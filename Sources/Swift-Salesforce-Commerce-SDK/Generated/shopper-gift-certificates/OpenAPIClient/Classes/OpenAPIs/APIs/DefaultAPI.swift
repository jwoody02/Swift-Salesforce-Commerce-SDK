//
// DefaultAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class DefaultAPI {

    /**

     - parameter organizationId: (path) An identifier for the organization the request is being made by. 
     - parameter siteId: (query)  
     - parameter body: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getGiftCertificate(organizationId: String, siteId: String, body: GiftCertificateRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GiftCertificate?, _ error: Error?) -> Void)) -> RequestTask {
        return getGiftCertificateWithRequestBuilder(organizationId: organizationId, siteId: siteId, body: body).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /organizations/{organizationId}/gift-certificate
     - Action to retrieve an existing gift certificate.
     - responseHeaders: [X-RateLimit-Remaining(String), X-RateLimit-Reset(String), X-RateLimit-Limit(String)]
     - parameter organizationId: (path) An identifier for the organization the request is being made by. 
     - parameter siteId: (query)  
     - parameter body: (body)  
     - returns: RequestBuilder<GiftCertificate> 
     */
    open class func getGiftCertificateWithRequestBuilder(organizationId: String, siteId: String, body: GiftCertificateRequest) -> RequestBuilder<GiftCertificate> {
        var localVariablePath = "/organizations/{organizationId}/gift-certificate"
        let organizationIdPreEscape = "\(APIHelper.mapValueToPathItem(organizationId))"
        let organizationIdPostEscape = organizationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{organizationId}", with: organizationIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "siteId": (wrappedValue: siteId.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GiftCertificate>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
