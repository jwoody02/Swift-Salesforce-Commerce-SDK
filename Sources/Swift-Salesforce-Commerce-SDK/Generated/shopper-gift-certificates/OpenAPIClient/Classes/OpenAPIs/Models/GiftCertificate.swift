//
// GiftCertificate.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Document representing a gift certificate. */
public struct GiftCertificate: Codable, JSONEncodable, Hashable {

    public enum Status: String, Codable, CaseIterable {
        case pending = "pending"
        case issued = "issued"
        case partiallyRedeemed = "partially_redeemed"
        case redeemed = "redeemed"
    }
    /** The gift certificate original amount. */
    public var amount: Double
    /** The gift certificate remaining balance. */
    public var balance: Double
    /** The gift certificate description. */
    public var description: String?
    /** Is the gift certificate is enabled? */
    public var enabled: Bool
    /** The masked gift certificate code. */
    public var maskedGiftCertificateCode: String
    /** The merchant ID. */
    public var merchantId: String
    /** The message. */
    public var message: String?
    /** The recipient email. */
    public var recipientEmail: String
    /** The recipient name. */
    public var recipientName: String
    /** The sender name. */
    public var senderName: String
    /** The gift certificate status. */
    public var status: Status

    public init(amount: Double, balance: Double, description: String? = nil, enabled: Bool, maskedGiftCertificateCode: String, merchantId: String, message: String? = nil, recipientEmail: String, recipientName: String, senderName: String, status: Status) {
        self.amount = amount
        self.balance = balance
        self.description = description
        self.enabled = enabled
        self.maskedGiftCertificateCode = maskedGiftCertificateCode
        self.merchantId = merchantId
        self.message = message
        self.recipientEmail = recipientEmail
        self.recipientName = recipientName
        self.senderName = senderName
        self.status = status
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case amount
        case balance
        case description
        case enabled
        case maskedGiftCertificateCode
        case merchantId
        case message
        case recipientEmail
        case recipientName
        case senderName
        case status
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(amount, forKey: .amount)
        try container.encode(balance, forKey: .balance)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encode(enabled, forKey: .enabled)
        try container.encode(maskedGiftCertificateCode, forKey: .maskedGiftCertificateCode)
        try container.encode(merchantId, forKey: .merchantId)
        try container.encodeIfPresent(message, forKey: .message)
        try container.encode(recipientEmail, forKey: .recipientEmail)
        try container.encode(recipientName, forKey: .recipientName)
        try container.encode(senderName, forKey: .senderName)
        try container.encode(status, forKey: .status)
    }
}

