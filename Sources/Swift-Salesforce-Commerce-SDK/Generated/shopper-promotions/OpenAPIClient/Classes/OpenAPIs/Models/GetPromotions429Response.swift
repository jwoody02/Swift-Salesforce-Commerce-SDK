//
// GetPromotions429Response.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct GetPromotions429Response: Codable, JSONEncodable, Hashable {

    /** A URI reference [RFC3986] that identifies the problem type.  This specification encourages that, when dereferenced, it provide human-readable documentation for the problem type (e.g., using HTML [W3C.REC-html5-20141028]).  When this member is not present, its value is assumed to be \"about:blank\". It accepts relative URIs; this means that they must be resolved relative to the document's base URI, as per [RFC3986], Section 5.  */
    public var type: String
    /** A short, human-readable summary of the problem type.  It will not change from occurrence to occurrence of the problem, except for purposes of localization.  */
    public var title: String?
    /** A human-readable explanation specific to this occurrence of the problem.  */
    public var detail: String?
    /** A URI reference that identifies the specific occurrence of the problem.  It may or may not yield further information if dereferenced.  It accepts relative URIs; this means that they must be resolved relative to the document's base URI, as per [RFC3986], Section 5.  */
    public var instance: String?

    public init(type: String, title: String? = nil, detail: String? = nil, instance: String? = nil) {
        self.type = type
        self.title = title
        self.detail = detail
        self.instance = instance
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case type
        case title
        case detail
        case instance
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(type, forKey: .type)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(detail, forKey: .detail)
        try container.encodeIfPresent(instance, forKey: .instance)
    }
}

