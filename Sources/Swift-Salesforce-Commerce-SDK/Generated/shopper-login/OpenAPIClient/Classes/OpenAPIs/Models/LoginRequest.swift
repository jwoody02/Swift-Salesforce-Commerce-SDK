//
// LoginRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct LoginRequest: Codable, JSONEncodable, Hashable {

    static let clientIdRule = StringRule(minLength: nil, maxLength: 40, pattern: nil)
    static let redirectUriRule = StringRule(minLength: nil, maxLength: 256, pattern: nil)
    static let stateRule = StringRule(minLength: nil, maxLength: 512, pattern: nil)
    static let scopeRule = StringRule(minLength: nil, maxLength: 256, pattern: nil)
    static let channelIdRule = StringRule(minLength: nil, maxLength: 100, pattern: nil)
    static let codeChallengeRule = StringRule(minLength: 43, maxLength: 128, pattern: nil)
    /** SLAS client ID. Required when the grant type is `authorization_code_pkce`. */
    public var clientId: String?
    public var responseType: ResponseType?
    /** The URI to which the server redirects the browser after the user grants the authorization. The URI must be registered with the SLAS client. A variety of URI formats and wildcards for host are supported, but app links like airbnb:// or fb:// are not. Examples of supported URIs:   Examples of supported URIs:   - `http://localhost:3000/callback`   - `https://example.com/callback`   - `com.example.app:redirect_uri_path`   - ` *.subdomain.topleveldomain.com`  */
    public var redirectUri: String
    /** Value to be sent by the client to determine the state between the authorization request and the server response. Optional, but strongly recommended. */
    public var state: String?
    /** Scopes to limit an application's access to a user's account. */
    public var scope: String?
    /** The unique shopper ID. */
    public var usid: String?
    /** The channel that the request is for. For an ECOM request, this is angalous to the site ID. */
    public var channelId: String
    /** PKCE code verifier. Created by the client calling the `login` endpoint.  The `code_challenge` is created by SHA256 hashing the `code_verifier` and Base64 encoding the resulting hash.  The `code_verifier` should be a high entropy cryptographically random string with a minimum of 43 characters and a maximum of 128 characters.  The `code_challenge` is optional when using a private client id for the token request. */
    public var codeChallenge: String?

    public init(clientId: String? = nil, responseType: ResponseType? = nil, redirectUri: String, state: String? = nil, scope: String? = nil, usid: String? = nil, channelId: String, codeChallenge: String? = nil) {
        self.clientId = clientId
        self.responseType = responseType
        self.redirectUri = redirectUri
        self.state = state
        self.scope = scope
        self.usid = usid
        self.channelId = channelId
        self.codeChallenge = codeChallenge
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case clientId = "client_id"
        case responseType = "response_type"
        case redirectUri = "redirect_uri"
        case state
        case scope
        case usid
        case channelId = "channel_id"
        case codeChallenge = "code_challenge"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(clientId, forKey: .clientId)
        try container.encodeIfPresent(responseType, forKey: .responseType)
        try container.encode(redirectUri, forKey: .redirectUri)
        try container.encodeIfPresent(state, forKey: .state)
        try container.encodeIfPresent(scope, forKey: .scope)
        try container.encodeIfPresent(usid, forKey: .usid)
        try container.encode(channelId, forKey: .channelId)
        try container.encodeIfPresent(codeChallenge, forKey: .codeChallenge)
    }
}

