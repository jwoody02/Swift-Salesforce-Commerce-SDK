//
// TokenResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct TokenResponse: Codable, JSONEncodable, Hashable {

    static let idpAccessTokenRule = StringRule(minLength: nil, maxLength: 8192, pattern: nil)
    /** Short term shopper JWT that can be used to access Shopper APIs. Valid for 30 minutes.  A trusted agent shopper JWT is valid for 15 min. */
    public var accessToken: String
    /** User ID token. Valid for 30 minutes. */
    public var idToken: String
    /** Long term refresh token that can be used to refresh an access token. Valid for 30 days. */
    public var refreshToken: String
    /** Remaining access token expiry time, in seconds. */
    public var expiresIn: Int
    /** Remaining refresh token expiry time, in seconds. */
    public var refreshTokenExpiresIn: Double
    public var tokenType: TokenType
    /** The unique shopper ID. Returned when using the `client_credentials` grant type. */
    public var usid: String
    /** Customer's ID */
    public var customerId: String
    /** MD5 Hashed ECOM user ID in uppercase. */
    public var encUserId: String
    /** This is the access token that is returned from the IDP. The IDP access token is returned to be able to make calls into the IDP outside of SLAS. */
    public var idpAccessToken: String

    public init(accessToken: String, idToken: String, refreshToken: String, expiresIn: Int, refreshTokenExpiresIn: Double, tokenType: TokenType, usid: String, customerId: String, encUserId: String, idpAccessToken: String) {
        self.accessToken = accessToken
        self.idToken = idToken
        self.refreshToken = refreshToken
        self.expiresIn = expiresIn
        self.refreshTokenExpiresIn = refreshTokenExpiresIn
        self.tokenType = tokenType
        self.usid = usid
        self.customerId = customerId
        self.encUserId = encUserId
        self.idpAccessToken = idpAccessToken
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case accessToken = "access_token"
        case idToken = "id_token"
        case refreshToken = "refresh_token"
        case expiresIn = "expires_in"
        case refreshTokenExpiresIn = "refresh_token_expires_in"
        case tokenType = "token_type"
        case usid
        case customerId = "customer_id"
        case encUserId = "enc_user_id"
        case idpAccessToken = "idp_access_token"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(accessToken, forKey: .accessToken)
        try container.encode(idToken, forKey: .idToken)
        try container.encode(refreshToken, forKey: .refreshToken)
        try container.encode(expiresIn, forKey: .expiresIn)
        try container.encode(refreshTokenExpiresIn, forKey: .refreshTokenExpiresIn)
        try container.encode(tokenType, forKey: .tokenType)
        try container.encode(usid, forKey: .usid)
        try container.encode(customerId, forKey: .customerId)
        try container.encode(encUserId, forKey: .encUserId)
        try container.encode(idpAccessToken, forKey: .idpAccessToken)
    }
}

