//
// SessionBridgeTokenRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct SessionBridgeTokenRequest: Codable, JSONEncodable, Hashable {

    static let codeRule = StringRule(minLength: nil, maxLength: 256, pattern: nil)
    static let clientIdRule = StringRule(minLength: nil, maxLength: 40, pattern: nil)
    static let channelIdRule = StringRule(minLength: nil, maxLength: 100, pattern: nil)
    static let loginIdRule = StringRule(minLength: nil, maxLength: 128, pattern: nil)
    /** Authorization code returned from session bridge authorization received in the front channel that is used to get session bridge access tokens and refresh tokens. Required with a grant type of `session_bridge`. */
    public var code: String
    /** The SLAS public client ID for use with PKCE requests. This is a required parameter when using a public client. */
    public var clientId: String
    /** The channel (ECOM site) that the user is associated with. */
    public var channelId: String
    /** PKCE code verifier. Created by the caller. This is a required parameter when using a public client.  The `code_challenge` is created by SHA256 hashing the `code_verifier` and Base64 encoding the resulting hash.  The `code_verifier` should be a high entropy cryptographically random string with a minimum of 43 characters and a maximum of 128 characters. */
    public var codeVerifier: String
    /** Cookie passed back from the '/authorize' endpoint call for session bridge. This parameter is optional and not needed if using the `dwsgst` parameter. */
    public var dwsid: String
    public var grantType: GrantType
    /** The ID of the shopper for session bridge access. */
    public var loginId: String
    /** Signed guest Json Web Token (JWT) that was obtained from ECOM. This parameter is optional and not needed if using the `dwsid` parameter. */
    public var dwsgst: String?
    /** The unique shopper ID. Returned when from session bridge authorization. */
    public var usid: String?

    public init(code: String, clientId: String, channelId: String, codeVerifier: String, dwsid: String, grantType: GrantType, loginId: String, dwsgst: String? = nil, usid: String? = nil) {
        self.code = code
        self.clientId = clientId
        self.channelId = channelId
        self.codeVerifier = codeVerifier
        self.dwsid = dwsid
        self.grantType = grantType
        self.loginId = loginId
        self.dwsgst = dwsgst
        self.usid = usid
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case code
        case clientId = "client_id"
        case channelId = "channel_id"
        case codeVerifier = "code_verifier"
        case dwsid
        case grantType = "grant_type"
        case loginId = "login_id"
        case dwsgst
        case usid
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(code, forKey: .code)
        try container.encode(clientId, forKey: .clientId)
        try container.encode(channelId, forKey: .channelId)
        try container.encode(codeVerifier, forKey: .codeVerifier)
        try container.encode(dwsid, forKey: .dwsid)
        try container.encode(grantType, forKey: .grantType)
        try container.encode(loginId, forKey: .loginId)
        try container.encodeIfPresent(dwsgst, forKey: .dwsgst)
        try container.encodeIfPresent(usid, forKey: .usid)
    }
}

