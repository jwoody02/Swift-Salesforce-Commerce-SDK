//
// PasswordLessLoginTokenRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A request for an access token using a passwordless token. */
public struct PasswordLessLoginTokenRequest: Codable, JSONEncodable, Hashable {

    static let clientIdRule = StringRule(minLength: nil, maxLength: 40, pattern: nil)
    public var grantType: GrantType
    /** Passwordless hint. Use `pwdless_login`. */
    public var hint: String
    /** Passwordless login token that was created from the user ID. */
    public var pwdlessLoginToken: String
    /** The public client ID. */
    public var clientId: String?
    /** PKCE code verifier. Created by the client.  The `code_challenge` is created by SHA256 hashing the `code_verifier` and Base64 encoding the resulting hash.  The `code_verifier` should be a high entropy cryptographically random string with a minimum of 43 characters and a maximum of 128 characters. */
    public var codeVerifier: String?

    public init(grantType: GrantType, hint: String, pwdlessLoginToken: String, clientId: String? = nil, codeVerifier: String? = nil) {
        self.grantType = grantType
        self.hint = hint
        self.pwdlessLoginToken = pwdlessLoginToken
        self.clientId = clientId
        self.codeVerifier = codeVerifier
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case grantType = "grant_type"
        case hint
        case pwdlessLoginToken = "pwdless_login_token"
        case clientId = "client_id"
        case codeVerifier = "code_verifier"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(grantType, forKey: .grantType)
        try container.encode(hint, forKey: .hint)
        try container.encode(pwdlessLoginToken, forKey: .pwdlessLoginToken)
        try container.encodeIfPresent(clientId, forKey: .clientId)
        try container.encodeIfPresent(codeVerifier, forKey: .codeVerifier)
    }
}

