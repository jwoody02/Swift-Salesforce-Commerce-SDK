//
// PasswordlessLoginRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A request for a passwordless login token. This is only available for resgistered users using ECOM. */
public struct PasswordlessLoginRequest: Codable, JSONEncodable, Hashable {

    static let userIdRule = StringRule(minLength: nil, maxLength: 128, pattern: nil)
    static let channelIdRule = StringRule(minLength: nil, maxLength: 100, pattern: nil)
    /** User ID for logging in. */
    public var userId: String
    public var mode: PasswordActionModes
    /** The locale of the template. Not needed for the `callback` mode */
    public var locale: String?
    /** The shopper's unique identifier, if known. If not provided, a new USID is generated. */
    public var usid: String?
    /** The channel (ECOM site) that the user is associated with. */
    public var channelId: String
    /** The callback URI. Required when the mode is `callback`. The `callback_uri` property will be validated against the callback URIs that have been registered with the SLAS client. The callback URI _must_ be a `POST` endpoint because the token will be included in the body.  Wildcards are not allowed in the callback_uri because this is a security risk that can expose the token. This is not considered an OAuth2 callback_url.  */
    public var callbackUri: String?

    public init(userId: String, mode: PasswordActionModes, locale: String? = nil, usid: String? = nil, channelId: String, callbackUri: String? = nil) {
        self.userId = userId
        self.mode = mode
        self.locale = locale
        self.usid = usid
        self.channelId = channelId
        self.callbackUri = callbackUri
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case userId = "user_id"
        case mode
        case locale
        case usid
        case channelId = "channel_id"
        case callbackUri = "callback_uri"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(userId, forKey: .userId)
        try container.encode(mode, forKey: .mode)
        try container.encodeIfPresent(locale, forKey: .locale)
        try container.encodeIfPresent(usid, forKey: .usid)
        try container.encode(channelId, forKey: .channelId)
        try container.encodeIfPresent(callbackUri, forKey: .callbackUri)
    }
}

