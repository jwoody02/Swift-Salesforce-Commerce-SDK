//
// DefaultAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class DefaultAPI {

    /**

     - parameter organizationId: (path) An identifier for the organization the request is being made by. 
     - parameter authorization: (header) Base64-encoded username and password for HTTP Basic authentication. 
     - parameter formData: (form)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticateCustomer(organizationId: String, authorization: String, formData: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticateCustomerWithRequestBuilder(organizationId: organizationId, authorization: authorization, formData: formData).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /organizations/{organizationId}/oauth2/login
     - Logs in a shopper with credentials that are managed by a B2C Commerce instance (ECOM). It follows the authorization code grant flow as defined by the OAuth 2.1 standard. It also uses a proof key for code exchange (PKCE).  For PKCE values: - The `code_verifier` string is a random string used for the `/token` endpoint request. - The `code_challenge` is an encoded version of the `code_verifier` string using an SHA-256 hash.    The request must include a basic authorization header that contains a Base64 encoded version of the following string: `<shopperUserID>:<shopperPassword>`.    Required parameters: `code_challenge`, `channel_id`, `client_id`, and `redirect_uri`.    Optional parameters: `usid`.    The SLAS `/login` endpoint redirects back to the redirect URI and returns an authorization code.    Calls to `/login` made with the same loginId and tenantId within 1 second will result in a conflict. 
     - parameter organizationId: (path) An identifier for the organization the request is being made by. 
     - parameter authorization: (header) Base64-encoded username and password for HTTP Basic authentication. 
     - parameter formData: (form)  
     - returns: RequestBuilder<Void> 
     */
    open class func authenticateCustomerWithRequestBuilder(organizationId: String, authorization: String, formData: String) -> RequestBuilder<Void> {
        var localVariablePath = "/organizations/{organizationId}/oauth2/login"
        let organizationIdPreEscape = "\(APIHelper.mapValueToPathItem(organizationId))"
        let organizationIdPostEscape = organizationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{organizationId}", with: organizationIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableFormParams: [String: Any?] = [
            "formData": formData.encodeToJSON(),
        ]

        let localVariableNonNullParameters = APIHelper.rejectNil(localVariableFormParams)
        let localVariableParameters = APIHelper.convertBoolToString(localVariableNonNullParameters)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/x-www-form-urlencoded",
            "Authorization": authorization.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter scope
     */
    public enum Scope_authorizeCustomer: String, CaseIterable {
        case openid = "openid"
        case offlineAccess = "offline_access"
        case email = "email"
    }

    /**

     - parameter organizationId: (path) An identifier for the organization the request is being made by. 
     - parameter redirectUri: (query) The URL to which the server redirects the browser after the user grants the authorization. The URI must be pre-registered. A variety of URI formats and wildcard for host are supported, but app links like &#x60;airbnb://&#x60; or &#x60;fb://&#x60; are not. Examples of supported URIs:   - &#x60;http://localhost:3000/callback&#x60;   - &#x60;https://example.com/callback&#x60;   - &#x60;com.example.app:redirect_uri_path&#x60;   - &#x60; *.subdomain.topleveldomain.com&#x60;  
     - parameter responseType: (query) Must be &#x60;code&#x60;. Indicates that the client wants an authorization code (using the &#x60;authorization_code&#x60; grant type). 
     - parameter clientId: (query) The client ID obtained during application registration. 
     - parameter codeChallenge: (query) PKCE code challenge. Created by the client calling the &#x60;login&#x60; endpoint.  The &#x60;code_challenge&#x60; is created by SHA256 hashing the &#x60;code_verifier&#x60; and Base64 encoding the resulting hash.  The &#x60;code_verifier&#x60; should be a high entropy cryptographically random string with a minimum of 43 characters and a maximum of 128 characters. 
     - parameter scope: (query)  (optional)
     - parameter state: (query) Value to send the client to determine the state between the authorization request and the server response. Optional, but strongly recommended. (optional)
     - parameter usid: (query) A unique shopper identifier (USID). If not provided, a new USID is generated. (optional)
     - parameter hint: (query) Name of an identity provider (IDP) to optionally redirect to, thereby skipping the IDP selection step.  To use a public client, set &#x60;hint&#x60; to &#x60;guest&#x60; and use a public client ID to get an authorization code. If no &#x60;hint&#x60; is provided, the preferred IDP of the tenant is used by default.  For session bridge authorization the &#x60;hint&#x60; should be set to &#x60;sb-user&#x60; for a registered customer and to &#x60;sb-guest&#x60; for a guest. (optional)
     - parameter channelId: (query) The channel that this request is for. For an ECOM request, this is angalous to the site ID. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authorizeCustomer(organizationId: String, redirectUri: String, responseType: String, clientId: String, codeChallenge: String, scope: Scope_authorizeCustomer? = nil, state: String? = nil, usid: String? = nil, hint: String? = nil, channelId: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return authorizeCustomerWithRequestBuilder(organizationId: organizationId, redirectUri: redirectUri, responseType: responseType, clientId: clientId, codeChallenge: codeChallenge, scope: scope, state: state, usid: usid, hint: hint, channelId: channelId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /organizations/{organizationId}/oauth2/authorize
     - Get an authorization code after authenticating a user against an identity provider (IDP). This is the first step of the OAuth 2.1 authorization code flow, where a user can log in via federation to the IDP configured for the client. After successfully logging in, the user gets an authorization code via a redirect URI.  This endpoint can be called from the front channel (the browser).
     - parameter organizationId: (path) An identifier for the organization the request is being made by. 
     - parameter redirectUri: (query) The URL to which the server redirects the browser after the user grants the authorization. The URI must be pre-registered. A variety of URI formats and wildcard for host are supported, but app links like &#x60;airbnb://&#x60; or &#x60;fb://&#x60; are not. Examples of supported URIs:   - &#x60;http://localhost:3000/callback&#x60;   - &#x60;https://example.com/callback&#x60;   - &#x60;com.example.app:redirect_uri_path&#x60;   - &#x60; *.subdomain.topleveldomain.com&#x60;  
     - parameter responseType: (query) Must be &#x60;code&#x60;. Indicates that the client wants an authorization code (using the &#x60;authorization_code&#x60; grant type). 
     - parameter clientId: (query) The client ID obtained during application registration. 
     - parameter codeChallenge: (query) PKCE code challenge. Created by the client calling the &#x60;login&#x60; endpoint.  The &#x60;code_challenge&#x60; is created by SHA256 hashing the &#x60;code_verifier&#x60; and Base64 encoding the resulting hash.  The &#x60;code_verifier&#x60; should be a high entropy cryptographically random string with a minimum of 43 characters and a maximum of 128 characters. 
     - parameter scope: (query)  (optional)
     - parameter state: (query) Value to send the client to determine the state between the authorization request and the server response. Optional, but strongly recommended. (optional)
     - parameter usid: (query) A unique shopper identifier (USID). If not provided, a new USID is generated. (optional)
     - parameter hint: (query) Name of an identity provider (IDP) to optionally redirect to, thereby skipping the IDP selection step.  To use a public client, set &#x60;hint&#x60; to &#x60;guest&#x60; and use a public client ID to get an authorization code. If no &#x60;hint&#x60; is provided, the preferred IDP of the tenant is used by default.  For session bridge authorization the &#x60;hint&#x60; should be set to &#x60;sb-user&#x60; for a registered customer and to &#x60;sb-guest&#x60; for a guest. (optional)
     - parameter channelId: (query) The channel that this request is for. For an ECOM request, this is angalous to the site ID. (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func authorizeCustomerWithRequestBuilder(organizationId: String, redirectUri: String, responseType: String, clientId: String, codeChallenge: String, scope: Scope_authorizeCustomer? = nil, state: String? = nil, usid: String? = nil, hint: String? = nil, channelId: String? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/organizations/{organizationId}/oauth2/authorize"
        let organizationIdPreEscape = "\(APIHelper.mapValueToPathItem(organizationId))"
        let organizationIdPostEscape = organizationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{organizationId}", with: organizationIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "redirect_uri": (wrappedValue: redirectUri.encodeToJSON(), isExplode: false),
            "response_type": (wrappedValue: responseType.encodeToJSON(), isExplode: false),
            "client_id": (wrappedValue: clientId.encodeToJSON(), isExplode: false),
            "scope": (wrappedValue: scope?.encodeToJSON(), isExplode: false),
            "state": (wrappedValue: state?.encodeToJSON(), isExplode: false),
            "usid": (wrappedValue: usid?.encodeToJSON(), isExplode: false),
            "hint": (wrappedValue: hint?.encodeToJSON(), isExplode: false),
            "channel_id": (wrappedValue: channelId?.encodeToJSON(), isExplode: false),
            "code_challenge": (wrappedValue: codeChallenge.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter organizationId: (path) An identifier for the organization the request is being made by. 
     - parameter formData: (form)  
     - parameter authorization: (header) Base64-encoded string for HTTP Basic authentication. The string is composed of a client ID and client secret, separated by a colon (&#x60;:&#x60;), like this: &#x60;clientId:clientSecret&#x60; (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authorizePasswordlessCustomer(organizationId: String, formData: String, authorization: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?, _ error: Error?) -> Void)) -> RequestTask {
        return authorizePasswordlessCustomerWithRequestBuilder(organizationId: organizationId, formData: formData, authorization: authorization).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /organizations/{organizationId}/oauth2/passwordless/login
     - Allows the customer to authenticate when their identity provider is down.
     - responseHeaders: [X-RateLimit-5M-Remaining(String), X-RateLimit-1M-Reset(String), X-RateLimit-5M-Reset(String), X-RateLimit-1M-Remaining(String), X-RateLimit-5M-Limit(String), X-RateLimit-1M-Limit(String)]
     - parameter organizationId: (path) An identifier for the organization the request is being made by. 
     - parameter formData: (form)  
     - parameter authorization: (header) Base64-encoded string for HTTP Basic authentication. The string is composed of a client ID and client secret, separated by a colon (&#x60;:&#x60;), like this: &#x60;clientId:clientSecret&#x60; (optional)
     - returns: RequestBuilder<String> 
     */
    open class func authorizePasswordlessCustomerWithRequestBuilder(organizationId: String, formData: String, authorization: String? = nil) -> RequestBuilder<String> {
        var localVariablePath = "/organizations/{organizationId}/oauth2/passwordless/login"
        let organizationIdPreEscape = "\(APIHelper.mapValueToPathItem(organizationId))"
        let organizationIdPostEscape = organizationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{organizationId}", with: organizationIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableFormParams: [String: Any?] = [
            "formData": formData.encodeToJSON(),
        ]

        let localVariableNonNullParameters = APIHelper.rejectNil(localVariableFormParams)
        let localVariableParameters = APIHelper.convertBoolToString(localVariableNonNullParameters)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/x-www-form-urlencoded",
            "Authorization": authorization?.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter organizationId: (path) An identifier for the organization the request is being made by. 
     - parameter formData: (form)  
     - parameter authorization: (header) Base64-encoded string for HTTP Basic authentication. The string is composed of a client ID and client secret, separated by a colon (&#x60;:&#x60;), like this: &#x60;clientId:clientSecret&#x60;. Required unless the grant type is &#x60;authorization_code_pkce&#x60;. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getAccessToken(organizationId: String, formData: String, authorization: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: TokenResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return getAccessTokenWithRequestBuilder(organizationId: organizationId, formData: formData, authorization: authorization).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /organizations/{organizationId}/oauth2/token
     - Get the shopper or guest JWT access token and a refresh token. This is the second step of the OAuth 2.1 authorization code flow.  For a private client, an application is able to get an access token for the shopper through the back channel (a trusted server) by passing in the client credentials and the authorization code retrieved from the `authorize` endpoint.  For a guest user, get the shopper JWT access token and a refresh token. This is where a client appplication is able to get an access token for the guest user through the back channel (a trusted server) by passing in the client credentials.  For a public client using PKCE, an application will pass a PKCE `code_verifier` that matches the `code_challenge` that was used to `authorize` the customer along with the authorization code.  When refreshing the access token with a private client ID and client secret, the refresh token is _not_ regenerated. However, when refreshing the access token with a public client ID, the refresh token is _always_ regenerated. The old refresh token is voided with every refresh call, so the refresh token on the client needs to be replaced to always store the new refresh token.  See the Body section for required parameters, including `grant_type` and others, depending on the value of `grant_type`.  **Important**: We strongly recommended using the `channel_id` query parameter because **it will be required in the future**.
     - responseHeaders: [X-RateLimit-5M-Remaining(String), X-RateLimit-1M-Reset(String), X-RateLimit-5M-Reset(String), X-RateLimit-1M-Remaining(String), X-RateLimit-5M-Limit(String), X-RateLimit-1M-Limit(String)]
     - parameter organizationId: (path) An identifier for the organization the request is being made by. 
     - parameter formData: (form)  
     - parameter authorization: (header) Base64-encoded string for HTTP Basic authentication. The string is composed of a client ID and client secret, separated by a colon (&#x60;:&#x60;), like this: &#x60;clientId:clientSecret&#x60;. Required unless the grant type is &#x60;authorization_code_pkce&#x60;. (optional)
     - returns: RequestBuilder<TokenResponse> 
     */
    open class func getAccessTokenWithRequestBuilder(organizationId: String, formData: String, authorization: String? = nil) -> RequestBuilder<TokenResponse> {
        var localVariablePath = "/organizations/{organizationId}/oauth2/token"
        let organizationIdPreEscape = "\(APIHelper.mapValueToPathItem(organizationId))"
        let organizationIdPostEscape = organizationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{organizationId}", with: organizationIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableFormParams: [String: Any?] = [
            "formData": formData.encodeToJSON(),
        ]

        let localVariableNonNullParameters = APIHelper.rejectNil(localVariableFormParams)
        let localVariableParameters = APIHelper.convertBoolToString(localVariableNonNullParameters)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/x-www-form-urlencoded",
            "Authorization": authorization?.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TokenResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter organizationId: (path) An identifier for the organization the request is being made by. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getJwksUri(organizationId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?, _ error: Error?) -> Void)) -> RequestTask {
        return getJwksUriWithRequestBuilder(organizationId: organizationId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /organizations/{organizationId}/oauth2/jwks
     - Returns a JSON Web Key Set (JWKS) containing the current, past, and future public keys. The key set enables clients to validate the Shopper JSON Web Token (JWT) issued by SLAS.  For performance purposes, the `/jwks` endpoint is rate limited to 25 call per minute. 
     - parameter organizationId: (path) An identifier for the organization the request is being made by. 
     - returns: RequestBuilder<String> 
     */
    open class func getJwksUriWithRequestBuilder(organizationId: String) -> RequestBuilder<String> {
        var localVariablePath = "/organizations/{organizationId}/oauth2/jwks"
        let organizationIdPreEscape = "\(APIHelper.mapValueToPathItem(organizationId))"
        let organizationIdPostEscape = organizationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{organizationId}", with: organizationIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter organizationId: (path) An identifier for the organization the request is being made by. 
     - parameter formData: (form)  
     - parameter authorization: (header) Base64-encoded string for HTTP Basic authentication. The string is composed of a client ID and client secret, separated by a colon (&#x60;:&#x60;), like this: &#x60;clientId:clientSecret&#x60; (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getPasswordLessAccessToken(organizationId: String, formData: String, authorization: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: TokenResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return getPasswordLessAccessTokenWithRequestBuilder(organizationId: organizationId, formData: formData, authorization: authorization).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /organizations/{organizationId}/oauth2/passwordless/token
     - Issue a shopper token (JWT).
     - responseHeaders: [X-RateLimit-5M-Remaining(String), X-RateLimit-1M-Reset(String), X-RateLimit-5M-Reset(String), X-RateLimit-1M-Remaining(String), X-RateLimit-5M-Limit(String), X-RateLimit-1M-Limit(String)]
     - parameter organizationId: (path) An identifier for the organization the request is being made by. 
     - parameter formData: (form)  
     - parameter authorization: (header) Base64-encoded string for HTTP Basic authentication. The string is composed of a client ID and client secret, separated by a colon (&#x60;:&#x60;), like this: &#x60;clientId:clientSecret&#x60; (optional)
     - returns: RequestBuilder<TokenResponse> 
     */
    open class func getPasswordLessAccessTokenWithRequestBuilder(organizationId: String, formData: String, authorization: String? = nil) -> RequestBuilder<TokenResponse> {
        var localVariablePath = "/organizations/{organizationId}/oauth2/passwordless/token"
        let organizationIdPreEscape = "\(APIHelper.mapValueToPathItem(organizationId))"
        let organizationIdPostEscape = organizationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{organizationId}", with: organizationIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableFormParams: [String: Any?] = [
            "formData": formData.encodeToJSON(),
        ]

        let localVariableNonNullParameters = APIHelper.rejectNil(localVariableFormParams)
        let localVariableParameters = APIHelper.convertBoolToString(localVariableNonNullParameters)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/x-www-form-urlencoded",
            "Authorization": authorization?.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TokenResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter organizationId: (path) An identifier for the organization the request is being made by. 
     - parameter formData: (form)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getPasswordResetToken(organizationId: String, formData: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return getPasswordResetTokenWithRequestBuilder(organizationId: organizationId, formData: formData).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /organizations/{organizationId}/oauth2/password/reset
     - Request a reset password token
     - responseHeaders: [X-RateLimit-5M-Remaining(String), X-RateLimit-1M-Reset(String), X-RateLimit-5M-Reset(String), X-RateLimit-1M-Remaining(String), X-RateLimit-5M-Limit(String), X-RateLimit-1M-Limit(String)]
     - parameter organizationId: (path) An identifier for the organization the request is being made by. 
     - parameter formData: (form)  
     - returns: RequestBuilder<Void> 
     */
    open class func getPasswordResetTokenWithRequestBuilder(organizationId: String, formData: String) -> RequestBuilder<Void> {
        var localVariablePath = "/organizations/{organizationId}/oauth2/password/reset"
        let organizationIdPreEscape = "\(APIHelper.mapValueToPathItem(organizationId))"
        let organizationIdPostEscape = organizationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{organizationId}", with: organizationIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableFormParams: [String: Any?] = [
            "formData": formData.encodeToJSON(),
        ]

        let localVariableNonNullParameters = APIHelper.rejectNil(localVariableFormParams)
        let localVariableParameters = APIHelper.convertBoolToString(localVariableNonNullParameters)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/x-www-form-urlencoded",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter organizationId: (path) An identifier for the organization the request is being made by. 
     - parameter formData: (form)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getSessionBridgeAccessToken(organizationId: String, formData: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: TokenResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return getSessionBridgeAccessTokenWithRequestBuilder(organizationId: organizationId, formData: formData).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /organizations/{organizationId}/oauth2/session-bridge/token
     - Get a shopper JWT access token for a registered customer using session bridge.  For public client id requests the grant_type must be set to `session_bridge`.  For  private client_id and secret the grant_type must be set to `client_credentials` along with a basic authorization header.
     - responseHeaders: [X-RateLimit-5M-Remaining(String), X-RateLimit-1M-Reset(String), X-RateLimit-5M-Reset(String), X-RateLimit-1M-Remaining(String), X-RateLimit-5M-Limit(String), X-RateLimit-1M-Limit(String)]
     - parameter organizationId: (path) An identifier for the organization the request is being made by. 
     - parameter formData: (form)  
     - returns: RequestBuilder<TokenResponse> 
     */
    open class func getSessionBridgeAccessTokenWithRequestBuilder(organizationId: String, formData: String) -> RequestBuilder<TokenResponse> {
        var localVariablePath = "/organizations/{organizationId}/oauth2/session-bridge/token"
        let organizationIdPreEscape = "\(APIHelper.mapValueToPathItem(organizationId))"
        let organizationIdPostEscape = organizationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{organizationId}", with: organizationIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableFormParams: [String: Any?] = [
            "formData": formData.encodeToJSON(),
        ]

        let localVariableNonNullParameters = APIHelper.rejectNil(localVariableFormParams)
        let localVariableParameters = APIHelper.convertBoolToString(localVariableNonNullParameters)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/x-www-form-urlencoded",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TokenResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter organizationId: (path) An identifier for the organization the request is being made by. 
     - parameter formData: (form)  
     - parameter authorization: (header) This is the &#x60;Bearer&#x60; token returned from Account Manager after the trusted agent on behalf of (TAOB) authorize call. (optional)
     - parameter sfdcClientAuth: (header) \&quot;Base64-encoded string of client credentials. The string is composed of a client ID and client secret, separated by a colon (&#x60;:&#x60;), like this: &#x60;clientId:clientSecret&#x60;. (Do not add the string &#x60;\&quot;Basic\&quot;&#x60;.)  The &#x60;_sfdc_client_auth&#x60; header is only required when using a SLAS private client ID.\&quot; (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getTrustedAgentAccessToken(organizationId: String, formData: String, authorization: String? = nil, sfdcClientAuth: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: TokenResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return getTrustedAgentAccessTokenWithRequestBuilder(organizationId: organizationId, formData: formData, authorization: authorization, sfdcClientAuth: sfdcClientAuth).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /organizations/{organizationId}/oauth2/trusted-agent/token
     - Get a shopper JWT access token for a registered customer using a trusted agent (merchant).  If using a SLAS private client ID, you must also use an `_sfdc_client_auth` header.   The value of the `_sfdc_client_auth` header must be a Base64-encoded string. The string is composed of a SLAS private client ID and client secret, separated by a colon (`:`). For example, `privateClientId:privateClientsecret` becomes `cHJpdmF0ZUNsaWVudElkOnByaXZhdGVDbGllbnRzZWNyZXQ=` after Base64 encoding.
     - responseHeaders: [X-RateLimit-5M-Remaining(String), X-RateLimit-1M-Reset(String), X-RateLimit-5M-Reset(String), X-RateLimit-1M-Remaining(String), X-RateLimit-5M-Limit(String), X-RateLimit-1M-Limit(String)]
     - parameter organizationId: (path) An identifier for the organization the request is being made by. 
     - parameter formData: (form)  
     - parameter authorization: (header) This is the &#x60;Bearer&#x60; token returned from Account Manager after the trusted agent on behalf of (TAOB) authorize call. (optional)
     - parameter sfdcClientAuth: (header) \&quot;Base64-encoded string of client credentials. The string is composed of a client ID and client secret, separated by a colon (&#x60;:&#x60;), like this: &#x60;clientId:clientSecret&#x60;. (Do not add the string &#x60;\&quot;Basic\&quot;&#x60;.)  The &#x60;_sfdc_client_auth&#x60; header is only required when using a SLAS private client ID.\&quot; (optional)
     - returns: RequestBuilder<TokenResponse> 
     */
    open class func getTrustedAgentAccessTokenWithRequestBuilder(organizationId: String, formData: String, authorization: String? = nil, sfdcClientAuth: String? = nil) -> RequestBuilder<TokenResponse> {
        var localVariablePath = "/organizations/{organizationId}/oauth2/trusted-agent/token"
        let organizationIdPreEscape = "\(APIHelper.mapValueToPathItem(organizationId))"
        let organizationIdPostEscape = organizationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{organizationId}", with: organizationIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableFormParams: [String: Any?] = [
            "formData": formData.encodeToJSON(),
        ]

        let localVariableNonNullParameters = APIHelper.rejectNil(localVariableFormParams)
        let localVariableParameters = APIHelper.convertBoolToString(localVariableNonNullParameters)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/x-www-form-urlencoded",
            "Authorization": authorization?.encodeToJSON(),
            "_sfdc_client_auth": sfdcClientAuth?.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TokenResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter organizationId: (path) An identifier for the organization the request is being made by. 
     - parameter clientId: (query) The SLAS public client ID or SLAS private client ID for use with internal, trusted-agent requests. When using a private client ID a PKCE code challenge is not required. 
     - parameter channelId: (query) The channel (ECOM site) that the user is associated with. 
     - parameter codeChallenge: (query) PKCE code challenge. Created by the caller.  The &#x60;code_challenge&#x60; is created by SHA256 hashing the &#x60;code_verifier&#x60; and Base64 encoding the resulting hash.  The &#x60;code_verifier&#x60; should be a high entropy cryptographically random string with a minimum of 43 characters and a maximum of 128 characters.  The &#x60;code_challenge&#x60; is not needed if a using SLAS private &#x60;client_id&#x60;. 
     - parameter loginId: (query) The ID of the shopper for trusted agent access. 
     - parameter idpOrigin: (query) The IDP that the shopper is associated with. 
     - parameter redirectUri: (query) The redirect for Account Manager to redirect to. A variety of URI formats and wildcard for host are supported, but app links like &#x60;airbnb://&#x60; or &#x60;fb://&#x60; are not. Examples of supported URIs:   - &#x60;http://localhost:3000/callback&#x60;   - &#x60;https://example.com/callback&#x60;   - &#x60;com.example.app:redirect_uri_path&#x60;   - &#x60; *.subdomain.topleveldomain.com&#x60;  
     - parameter responseType: (query) Must be &#x60;code&#x60;. Indicates that the caller wants an authorization code. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getTrustedAgentAuthorizationToken(organizationId: String, clientId: String, channelId: String, codeChallenge: String, loginId: String, idpOrigin: String, redirectUri: String, responseType: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return getTrustedAgentAuthorizationTokenWithRequestBuilder(organizationId: organizationId, clientId: clientId, channelId: channelId, codeChallenge: codeChallenge, loginId: loginId, idpOrigin: idpOrigin, redirectUri: redirectUri, responseType: responseType).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /organizations/{organizationId}/oauth2/trusted-agent/authorize
     - Obtains a new agent on behalf authorization token for a registered customer.
     - parameter organizationId: (path) An identifier for the organization the request is being made by. 
     - parameter clientId: (query) The SLAS public client ID or SLAS private client ID for use with internal, trusted-agent requests. When using a private client ID a PKCE code challenge is not required. 
     - parameter channelId: (query) The channel (ECOM site) that the user is associated with. 
     - parameter codeChallenge: (query) PKCE code challenge. Created by the caller.  The &#x60;code_challenge&#x60; is created by SHA256 hashing the &#x60;code_verifier&#x60; and Base64 encoding the resulting hash.  The &#x60;code_verifier&#x60; should be a high entropy cryptographically random string with a minimum of 43 characters and a maximum of 128 characters.  The &#x60;code_challenge&#x60; is not needed if a using SLAS private &#x60;client_id&#x60;. 
     - parameter loginId: (query) The ID of the shopper for trusted agent access. 
     - parameter idpOrigin: (query) The IDP that the shopper is associated with. 
     - parameter redirectUri: (query) The redirect for Account Manager to redirect to. A variety of URI formats and wildcard for host are supported, but app links like &#x60;airbnb://&#x60; or &#x60;fb://&#x60; are not. Examples of supported URIs:   - &#x60;http://localhost:3000/callback&#x60;   - &#x60;https://example.com/callback&#x60;   - &#x60;com.example.app:redirect_uri_path&#x60;   - &#x60; *.subdomain.topleveldomain.com&#x60;  
     - parameter responseType: (query) Must be &#x60;code&#x60;. Indicates that the caller wants an authorization code. 
     - returns: RequestBuilder<Void> 
     */
    open class func getTrustedAgentAuthorizationTokenWithRequestBuilder(organizationId: String, clientId: String, channelId: String, codeChallenge: String, loginId: String, idpOrigin: String, redirectUri: String, responseType: String) -> RequestBuilder<Void> {
        var localVariablePath = "/organizations/{organizationId}/oauth2/trusted-agent/authorize"
        let organizationIdPreEscape = "\(APIHelper.mapValueToPathItem(organizationId))"
        let organizationIdPostEscape = organizationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{organizationId}", with: organizationIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "client_id": (wrappedValue: clientId.encodeToJSON(), isExplode: false),
            "channel_id": (wrappedValue: channelId.encodeToJSON(), isExplode: false),
            "code_challenge": (wrappedValue: codeChallenge.encodeToJSON(), isExplode: false),
            "login_id": (wrappedValue: loginId.encodeToJSON(), isExplode: false),
            "idp_origin": (wrappedValue: idpOrigin.encodeToJSON(), isExplode: false),
            "redirect_uri": (wrappedValue: redirectUri.encodeToJSON(), isExplode: false),
            "response_type": (wrappedValue: responseType.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter organizationId: (path) An identifier for the organization the request is being made by. 
     - parameter formData: (form)  
     - parameter authorization: (header) Base64-encoded string for HTTP Basic authentication. The string is composed of a client ID and client secret, separated by a colon (&#x60;:&#x60;), like this: &#x60;clientId:clientSecret&#x60;. Required unless the grant type is &#x60;authorization_code_pkce&#x60;. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getTrustedSystemAccessToken(organizationId: String, formData: String, authorization: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: TokenResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return getTrustedSystemAccessTokenWithRequestBuilder(organizationId: organizationId, formData: formData, authorization: authorization).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /organizations/{organizationId}/oauth2/trusted-system/token
     - Get a shopper JWT access token for a registered customer whose credentials are stored using a third party system.  For external trusted-system requests, a basic authorization header that includes a SLAS client ID and SLAS client secret can be used in place of the bearer token.  For internal trusted-system requests, the bearer token must be a C2C JWT.
     - responseHeaders: [X-RateLimit-5M-Remaining(String), X-RateLimit-1M-Reset(String), X-RateLimit-5M-Reset(String), X-RateLimit-1M-Remaining(String), X-RateLimit-5M-Limit(String), X-RateLimit-1M-Limit(String)]
     - parameter organizationId: (path) An identifier for the organization the request is being made by. 
     - parameter formData: (form)  
     - parameter authorization: (header) Base64-encoded string for HTTP Basic authentication. The string is composed of a client ID and client secret, separated by a colon (&#x60;:&#x60;), like this: &#x60;clientId:clientSecret&#x60;. Required unless the grant type is &#x60;authorization_code_pkce&#x60;. (optional)
     - returns: RequestBuilder<TokenResponse> 
     */
    open class func getTrustedSystemAccessTokenWithRequestBuilder(organizationId: String, formData: String, authorization: String? = nil) -> RequestBuilder<TokenResponse> {
        var localVariablePath = "/organizations/{organizationId}/oauth2/trusted-system/token"
        let organizationIdPreEscape = "\(APIHelper.mapValueToPathItem(organizationId))"
        let organizationIdPostEscape = organizationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{organizationId}", with: organizationIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableFormParams: [String: Any?] = [
            "formData": formData.encodeToJSON(),
        ]

        let localVariableNonNullParameters = APIHelper.rejectNil(localVariableFormParams)
        let localVariableParameters = APIHelper.convertBoolToString(localVariableNonNullParameters)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/x-www-form-urlencoded",
            "Authorization": authorization?.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TokenResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter organizationId: (path) An identifier for the organization the request is being made by. 
     - parameter channelId: (query) Used when getting user information for a SFCC login. For an ECOM customer, this is angalous to the site ID. Required when getting user information for an ECOM customer. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getUserInfo(organizationId: String, channelId: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?, _ error: Error?) -> Void)) -> RequestTask {
        return getUserInfoWithRequestBuilder(organizationId: organizationId, channelId: channelId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /organizations/{organizationId}/oauth2/userinfo
     - Returns a JSON listing of claims about the currently authenticated user.
     - parameter organizationId: (path) An identifier for the organization the request is being made by. 
     - parameter channelId: (query) Used when getting user information for a SFCC login. For an ECOM customer, this is angalous to the site ID. Required when getting user information for an ECOM customer. (optional)
     - returns: RequestBuilder<String> 
     */
    open class func getUserInfoWithRequestBuilder(organizationId: String, channelId: String? = nil) -> RequestBuilder<String> {
        var localVariablePath = "/organizations/{organizationId}/oauth2/userinfo"
        let organizationIdPreEscape = "\(APIHelper.mapValueToPathItem(organizationId))"
        let organizationIdPostEscape = organizationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{organizationId}", with: organizationIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "channel_id": (wrappedValue: channelId?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter organizationId: (path) An identifier for the organization the request is being made by. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getWellknownOpenidConfiguration(organizationId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?, _ error: Error?) -> Void)) -> RequestTask {
        return getWellknownOpenidConfigurationWithRequestBuilder(organizationId: organizationId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /organizations/{organizationId}/oauth2/.well-known/openid-configuration
     - Returns a JSON listing of the OpenID/OAuth endpoints, supported scopes and claims, public keys used to sign the tokens, and other details.  For performance purposes, the `/jwks` endpoint is rate limited to 25 call per minute. 
     - parameter organizationId: (path) An identifier for the organization the request is being made by. 
     - returns: RequestBuilder<String> 
     */
    open class func getWellknownOpenidConfigurationWithRequestBuilder(organizationId: String) -> RequestBuilder<String> {
        var localVariablePath = "/organizations/{organizationId}/oauth2/.well-known/openid-configuration"
        let organizationIdPreEscape = "\(APIHelper.mapValueToPathItem(organizationId))"
        let organizationIdPostEscape = organizationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{organizationId}", with: organizationIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter organizationId: (path) An identifier for the organization the request is being made by. 
     - parameter authorization: (header) Base64 string for HTTP Basic authentication. 
     - parameter formData: (form)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func introspectToken(organizationId: String, authorization: String, formData: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return introspectTokenWithRequestBuilder(organizationId: organizationId, authorization: authorization, formData: formData).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /organizations/{organizationId}/oauth2/introspect
     - Returns the token properties. A basic auth header with Base64-encoded `clientId:secret` is required in the Authorization header, as well as an access token or refresh token. Use `token_type_hint` to help identify the token.
     - parameter organizationId: (path) An identifier for the organization the request is being made by. 
     - parameter authorization: (header) Base64 string for HTTP Basic authentication. 
     - parameter formData: (form)  
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func introspectTokenWithRequestBuilder(organizationId: String, authorization: String, formData: String) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/organizations/{organizationId}/oauth2/introspect"
        let organizationIdPreEscape = "\(APIHelper.mapValueToPathItem(organizationId))"
        let organizationIdPostEscape = organizationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{organizationId}", with: organizationIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableFormParams: [String: Any?] = [
            "formData": formData.encodeToJSON(),
        ]

        let localVariableNonNullParameters = APIHelper.rejectNil(localVariableFormParams)
        let localVariableParameters = APIHelper.convertBoolToString(localVariableNonNullParameters)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/x-www-form-urlencoded",
            "Authorization": authorization.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter organizationId: (path) An identifier for the organization the request is being made by. 
     - parameter clientId: (query) The SLAS client ID. 
     - parameter refreshToken: (query) Refresh token that was given during the access token request. 
     - parameter channelId: (query) The &#x60;channel_id&#x60; parameter must be provided if the shopper authenticated using the &#x60;login&#x60; endpoint with ECOM. (optional)
     - parameter hint: (query) Optional parameter for logging out user sessions. Use &#x60;all-sessions&#x60; to log out all user sessions. If &#x60;hint&#x60; is not used, only the current user session will be logged out. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func logoutCustomer(organizationId: String, clientId: String, refreshToken: String, channelId: String? = nil, hint: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: TokenResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return logoutCustomerWithRequestBuilder(organizationId: organizationId, clientId: clientId, refreshToken: refreshToken, channelId: channelId, hint: hint).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /organizations/{organizationId}/oauth2/logout
     - Log out a shopper. The shopper's access token and refresh token are revoked. If the shopper authenticated with a B2C Commerce (ECOM) instance, the OCAPI JWT is also revoked. This should be called for Registered users that have logged in using SLAS. his should be called for registered users that have logged in using SLAS. This endpoint is not for use with guest users.  Required header: Authorization header bearer token of the Shopper access token to logout.  Required parameters: `refresh token`, `channel_id`, and `client`.
     - parameter organizationId: (path) An identifier for the organization the request is being made by. 
     - parameter clientId: (query) The SLAS client ID. 
     - parameter refreshToken: (query) Refresh token that was given during the access token request. 
     - parameter channelId: (query) The &#x60;channel_id&#x60; parameter must be provided if the shopper authenticated using the &#x60;login&#x60; endpoint with ECOM. (optional)
     - parameter hint: (query) Optional parameter for logging out user sessions. Use &#x60;all-sessions&#x60; to log out all user sessions. If &#x60;hint&#x60; is not used, only the current user session will be logged out. (optional)
     - returns: RequestBuilder<TokenResponse> 
     */
    open class func logoutCustomerWithRequestBuilder(organizationId: String, clientId: String, refreshToken: String, channelId: String? = nil, hint: String? = nil) -> RequestBuilder<TokenResponse> {
        var localVariablePath = "/organizations/{organizationId}/oauth2/logout"
        let organizationIdPreEscape = "\(APIHelper.mapValueToPathItem(organizationId))"
        let organizationIdPostEscape = organizationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{organizationId}", with: organizationIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "client_id": (wrappedValue: clientId.encodeToJSON(), isExplode: false),
            "refresh_token": (wrappedValue: refreshToken.encodeToJSON(), isExplode: false),
            "channel_id": (wrappedValue: channelId?.encodeToJSON(), isExplode: false),
            "hint": (wrappedValue: hint?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TokenResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter organizationId: (path) An identifier for the organization the request is being made by. 
     - parameter formData: (form)  
     - parameter authorization: (header) Base64-encoded string for HTTP Basic authentication. The string is composed of a client ID and client secret, separated by a colon (&#x60;:&#x60;), like this: &#x60;clientId:clientSecret&#x60; (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func resetPassword(organizationId: String, formData: String, authorization: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return resetPasswordWithRequestBuilder(organizationId: organizationId, formData: formData, authorization: authorization).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /organizations/{organizationId}/oauth2/password/action
     - Creates a new password
     - responseHeaders: [X-RateLimit-5M-Remaining(String), X-RateLimit-1M-Reset(String), X-RateLimit-5M-Reset(String), X-RateLimit-1M-Remaining(String), X-RateLimit-5M-Limit(String), X-RateLimit-1M-Limit(String)]
     - parameter organizationId: (path) An identifier for the organization the request is being made by. 
     - parameter formData: (form)  
     - parameter authorization: (header) Base64-encoded string for HTTP Basic authentication. The string is composed of a client ID and client secret, separated by a colon (&#x60;:&#x60;), like this: &#x60;clientId:clientSecret&#x60; (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func resetPasswordWithRequestBuilder(organizationId: String, formData: String, authorization: String? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/organizations/{organizationId}/oauth2/password/action"
        let organizationIdPreEscape = "\(APIHelper.mapValueToPathItem(organizationId))"
        let organizationIdPostEscape = organizationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{organizationId}", with: organizationIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableFormParams: [String: Any?] = [
            "formData": formData.encodeToJSON(),
        ]

        let localVariableNonNullParameters = APIHelper.rejectNil(localVariableFormParams)
        let localVariableParameters = APIHelper.convertBoolToString(localVariableNonNullParameters)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/x-www-form-urlencoded",
            "Authorization": authorization?.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter organizationId: (path) An identifier for the organization the request is being made by. 
     - parameter authorization: (header) Base64 string for HTTP Basic authentication. 
     - parameter formData: (form)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func revokeToken(organizationId: String, authorization: String, formData: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: TokenResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return revokeTokenWithRequestBuilder(organizationId: organizationId, authorization: authorization, formData: formData).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /organizations/{organizationId}/oauth2/revoke
     - Invalidate the refresh token. A basic auth header with Base64-encoded `clientId:secret` is required in the Authorization header, and the refresh token to be revoked is required in the body.
     - parameter organizationId: (path) An identifier for the organization the request is being made by. 
     - parameter authorization: (header) Base64 string for HTTP Basic authentication. 
     - parameter formData: (form)  
     - returns: RequestBuilder<TokenResponse> 
     */
    open class func revokeTokenWithRequestBuilder(organizationId: String, authorization: String, formData: String) -> RequestBuilder<TokenResponse> {
        var localVariablePath = "/organizations/{organizationId}/oauth2/revoke"
        let organizationIdPreEscape = "\(APIHelper.mapValueToPathItem(organizationId))"
        let organizationIdPostEscape = organizationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{organizationId}", with: organizationIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableFormParams: [String: Any?] = [
            "formData": formData.encodeToJSON(),
        ]

        let localVariableNonNullParameters = APIHelper.rejectNil(localVariableFormParams)
        let localVariableParameters = APIHelper.convertBoolToString(localVariableNonNullParameters)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/x-www-form-urlencoded",
            "Authorization": authorization.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TokenResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
