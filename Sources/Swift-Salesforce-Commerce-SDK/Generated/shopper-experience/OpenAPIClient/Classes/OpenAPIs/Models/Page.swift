//
// Page.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Page: Codable, JSONEncodable, Hashable {

    /** Page identifier. */
    public var id: String
    /** Page type identifier. */
    public var typeId: String
    /** The aspect type assigned to the page. */
    public var aspectTypeId: String?
    /** Display name of the page. */
    public var name: String?
    /** Description of the page. */
    public var description: String?
    /** The SEO title of the page. */
    public var pageTitle: String?
    /** The SEO description of the page. */
    public var pageDescription: String?
    /** The SEO keywords of the page. */
    public var pageKeywords: String?
    /** The configuration data assigned to the page. */
    public var data: AnyCodable?
    /** Any custom data added by the custom code for the page type. */
    public var custom: AnyCodable?
    /** The regions (and their assigned components) for the page. */
    public var regions: [Region]?

    public init(id: String, typeId: String, aspectTypeId: String? = nil, name: String? = nil, description: String? = nil, pageTitle: String? = nil, pageDescription: String? = nil, pageKeywords: String? = nil, data: AnyCodable? = nil, custom: AnyCodable? = nil, regions: [Region]? = nil) {
        self.id = id
        self.typeId = typeId
        self.aspectTypeId = aspectTypeId
        self.name = name
        self.description = description
        self.pageTitle = pageTitle
        self.pageDescription = pageDescription
        self.pageKeywords = pageKeywords
        self.data = data
        self.custom = custom
        self.regions = regions
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case typeId
        case aspectTypeId
        case name
        case description
        case pageTitle
        case pageDescription
        case pageKeywords
        case data
        case custom
        case regions
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(typeId, forKey: .typeId)
        try container.encodeIfPresent(aspectTypeId, forKey: .aspectTypeId)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(pageTitle, forKey: .pageTitle)
        try container.encodeIfPresent(pageDescription, forKey: .pageDescription)
        try container.encodeIfPresent(pageKeywords, forKey: .pageKeywords)
        try container.encodeIfPresent(data, forKey: .data)
        try container.encodeIfPresent(custom, forKey: .custom)
        try container.encodeIfPresent(regions, forKey: .regions)
    }
}

