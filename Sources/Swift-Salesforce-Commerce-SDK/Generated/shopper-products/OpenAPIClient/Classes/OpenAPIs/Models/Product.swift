//
// Product.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Any product that is sold, shown alone, and does not have variations such as different sizes or colors. A product has no reliance on any other product for inheritance. *A product has a SKU and can have a product option, which has a different SKU*. */
public struct Product: Codable, JSONEncodable, Hashable {

    static let idRule = StringRule(minLength: 1, maxLength: 24, pattern: nil)
    /** The product's brand. */
    public var brand: String?
    /** The array of all bundled products of this product. */
    public var bundledProducts: [BundledProduct]?
    /** The ISO 4217 mnemonic code of the currency. */
    public var currency: String?
    /** The European Article Number of the product. */
    public var ean: String?
    public var fetchDate: Int?
    /** The ID (SKU) of the product. */
    public var id: String
    /** The array of product image groups. */
    public var imageGroups: [ImageGroup]?
    /** The array of product inventories explicitly requested via the 'inventory_ids' query parameter. This property  is only returned in context of the 'availability' expansion. */
    public var inventories: [Inventory]?
    public var inventory: Inventory?
    /** The localized product's long description. */
    public var longDescription: String?
    /** The product's manufacturer name. */
    public var manufacturerName: String?
    /** The product's manufacturer SKU. */
    public var manufacturerSku: String?
    public var master: Master?
    /** The minimum order quantity for this product. */
    public var minOrderQuantity: Double?
    /** The localized product name. */
    public var name: String?
    /** The array of product options, only for type option. This array can be empty. */
    public var options: [Option]?
    /** The localized product's page description. */
    public var pageDescription: String?
    /** The localized product's page description. */
    public var pageKeywords: String?
    /** The localized product's page title. */
    public var pageTitle: String?
    /** The sales price of the product. In case of complex products, like master or set, this is the minimum price of  related child products. */
    public var price: Double?
    /** The price per unit if defined for the product */
    public var pricePerUnit: Double?
    /** The max price per unit typically for a master product's variant. */
    public var pricePerUnitMax: Double?
    /** The maximum sales of related child products in complex products like master or set. */
    public var priceMax: Double?
    /** Array of one or more price range objects representing one or more Pricebooks in context for the site. */
    public var priceRanges: [PriceRange]?
    /** The prices map with pricebook IDs and their values. */
    public var prices: [String: Double]?
    /** The ID of the products primary category. */
    public var primaryCategoryId: String?
    /** The array of source and target product links information. */
    public var productLinks: [ProductLink]?
    /** The array of active customer product promotions for this product. This array can be empty.  Coupon promotions are not returned in this array. */
    public var productPromotions: [ProductPromotion]?
    /** Returns a list of recommendations. */
    public var recommendations: [Recommendation]?
    /** The array of set products of this product. */
    public var setProducts: [Product]?
    /** The localized product short description. */
    public var shortDescription: String?
    /** The complete link to this product's storefront page. */
    public var slugUrl: String?
    /** The steps in which the order amount of the product can be  increased. */
    public var stepQuantity: Double?
    /** The document represents list of tiered prices if the product is a variant */
    public var tieredPrices: [ProductPriceTable]?
    public var type: ProductType?
    /** The sales unit of the product. */
    public var unit: String?
    /** The Universal Product Code (UPC). */
    public var upc: String?
    /** The time a product is valid from. */
    public var validFrom: Date?
    /** The time a product is valid to. */
    public var validTo: Date?
    /** The array of actual variants. Only for master, variation group, and variant types. This array can be empty. */
    public var variants: [Variant]?
    /** Sorted array of variation attributes information. Only for master,  variation group, and variant types. This array can be empty. */
    public var variationAttributes: [VariationAttribute]?
    /** The array of actual variation groups. Only for master, variation group, and variant types. This array can be empty. */
    public var variationGroups: [VariationGroup]?
    /** The actual variation attribute ID - value pairs. Only for variant and  variation group types. */
    public var variationValues: [String: String]?

    public init(brand: String? = nil, bundledProducts: [BundledProduct]? = nil, currency: String? = nil, ean: String? = nil, fetchDate: Int? = nil, id: String, imageGroups: [ImageGroup]? = nil, inventories: [Inventory]? = nil, inventory: Inventory? = nil, longDescription: String? = nil, manufacturerName: String? = nil, manufacturerSku: String? = nil, master: Master? = nil, minOrderQuantity: Double? = nil, name: String? = nil, options: [Option]? = nil, pageDescription: String? = nil, pageKeywords: String? = nil, pageTitle: String? = nil, price: Double? = nil, pricePerUnit: Double? = nil, pricePerUnitMax: Double? = nil, priceMax: Double? = nil, priceRanges: [PriceRange]? = nil, prices: [String: Double]? = nil, primaryCategoryId: String? = nil, productLinks: [ProductLink]? = nil, productPromotions: [ProductPromotion]? = nil, recommendations: [Recommendation]? = nil, setProducts: [Product]? = nil, shortDescription: String? = nil, slugUrl: String? = nil, stepQuantity: Double? = nil, tieredPrices: [ProductPriceTable]? = nil, type: ProductType? = nil, unit: String? = nil, upc: String? = nil, validFrom: Date? = nil, validTo: Date? = nil, variants: [Variant]? = nil, variationAttributes: [VariationAttribute]? = nil, variationGroups: [VariationGroup]? = nil, variationValues: [String: String]? = nil) {
        self.brand = brand
        self.bundledProducts = bundledProducts
        self.currency = currency
        self.ean = ean
        self.fetchDate = fetchDate
        self.id = id
        self.imageGroups = imageGroups
        self.inventories = inventories
        self.inventory = inventory
        self.longDescription = longDescription
        self.manufacturerName = manufacturerName
        self.manufacturerSku = manufacturerSku
        self.master = master
        self.minOrderQuantity = minOrderQuantity
        self.name = name
        self.options = options
        self.pageDescription = pageDescription
        self.pageKeywords = pageKeywords
        self.pageTitle = pageTitle
        self.price = price
        self.pricePerUnit = pricePerUnit
        self.pricePerUnitMax = pricePerUnitMax
        self.priceMax = priceMax
        self.priceRanges = priceRanges
        self.prices = prices
        self.primaryCategoryId = primaryCategoryId
        self.productLinks = productLinks
        self.productPromotions = productPromotions
        self.recommendations = recommendations
        self.setProducts = setProducts
        self.shortDescription = shortDescription
        self.slugUrl = slugUrl
        self.stepQuantity = stepQuantity
        self.tieredPrices = tieredPrices
        self.type = type
        self.unit = unit
        self.upc = upc
        self.validFrom = validFrom
        self.validTo = validTo
        self.variants = variants
        self.variationAttributes = variationAttributes
        self.variationGroups = variationGroups
        self.variationValues = variationValues
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case brand
        case bundledProducts
        case currency
        case ean
        case fetchDate
        case id
        case imageGroups
        case inventories
        case inventory
        case longDescription
        case manufacturerName
        case manufacturerSku
        case master
        case minOrderQuantity
        case name
        case options
        case pageDescription
        case pageKeywords
        case pageTitle
        case price
        case pricePerUnit
        case pricePerUnitMax
        case priceMax
        case priceRanges
        case prices
        case primaryCategoryId
        case productLinks
        case productPromotions
        case recommendations
        case setProducts
        case shortDescription
        case slugUrl
        case stepQuantity
        case tieredPrices
        case type
        case unit
        case upc
        case validFrom
        case validTo
        case variants
        case variationAttributes
        case variationGroups
        case variationValues
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(brand, forKey: .brand)
        try container.encodeIfPresent(bundledProducts, forKey: .bundledProducts)
        try container.encodeIfPresent(currency, forKey: .currency)
        try container.encodeIfPresent(ean, forKey: .ean)
        try container.encodeIfPresent(fetchDate, forKey: .fetchDate)
        try container.encode(id, forKey: .id)
        try container.encodeIfPresent(imageGroups, forKey: .imageGroups)
        try container.encodeIfPresent(inventories, forKey: .inventories)
        try container.encodeIfPresent(inventory, forKey: .inventory)
        try container.encodeIfPresent(longDescription, forKey: .longDescription)
        try container.encodeIfPresent(manufacturerName, forKey: .manufacturerName)
        try container.encodeIfPresent(manufacturerSku, forKey: .manufacturerSku)
        try container.encodeIfPresent(master, forKey: .master)
        try container.encodeIfPresent(minOrderQuantity, forKey: .minOrderQuantity)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(options, forKey: .options)
        try container.encodeIfPresent(pageDescription, forKey: .pageDescription)
        try container.encodeIfPresent(pageKeywords, forKey: .pageKeywords)
        try container.encodeIfPresent(pageTitle, forKey: .pageTitle)
        try container.encodeIfPresent(price, forKey: .price)
        try container.encodeIfPresent(pricePerUnit, forKey: .pricePerUnit)
        try container.encodeIfPresent(pricePerUnitMax, forKey: .pricePerUnitMax)
        try container.encodeIfPresent(priceMax, forKey: .priceMax)
        try container.encodeIfPresent(priceRanges, forKey: .priceRanges)
        try container.encodeIfPresent(prices, forKey: .prices)
        try container.encodeIfPresent(primaryCategoryId, forKey: .primaryCategoryId)
        try container.encodeIfPresent(productLinks, forKey: .productLinks)
        try container.encodeIfPresent(productPromotions, forKey: .productPromotions)
        try container.encodeIfPresent(recommendations, forKey: .recommendations)
        try container.encodeIfPresent(setProducts, forKey: .setProducts)
        try container.encodeIfPresent(shortDescription, forKey: .shortDescription)
        try container.encodeIfPresent(slugUrl, forKey: .slugUrl)
        try container.encodeIfPresent(stepQuantity, forKey: .stepQuantity)
        try container.encodeIfPresent(tieredPrices, forKey: .tieredPrices)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(unit, forKey: .unit)
        try container.encodeIfPresent(upc, forKey: .upc)
        try container.encodeIfPresent(validFrom, forKey: .validFrom)
        try container.encodeIfPresent(validTo, forKey: .validTo)
        try container.encodeIfPresent(variants, forKey: .variants)
        try container.encodeIfPresent(variationAttributes, forKey: .variationAttributes)
        try container.encodeIfPresent(variationGroups, forKey: .variationGroups)
        try container.encodeIfPresent(variationValues, forKey: .variationValues)
    }
}

