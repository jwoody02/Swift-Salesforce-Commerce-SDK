//
// ProductType.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Document representing a product type. */
public struct ProductType: Codable, JSONEncodable, Hashable {

    /** A flag indicating whether the product is a bundle. */
    public var bundle: Bool?
    /** A flag indicating whether the product is a standard item. */
    public var item: Bool?
    /** A flag indicating whether the product is a master. */
    public var master: Bool?
    /** A flag indicating whether the product is an option. */
    public var option: Bool?
    /** A flag indicating whether the product is a set. */
    public var _set: Bool?
    /** A flag indicating whether the product is a variant. */
    public var variant: Bool?
    /** A flag indicating whether the product is a variation group. */
    public var variationGroup: Bool?

    public init(bundle: Bool? = nil, item: Bool? = nil, master: Bool? = nil, option: Bool? = nil, _set: Bool? = nil, variant: Bool? = nil, variationGroup: Bool? = nil) {
        self.bundle = bundle
        self.item = item
        self.master = master
        self.option = option
        self._set = _set
        self.variant = variant
        self.variationGroup = variationGroup
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case bundle
        case item
        case master
        case option
        case _set = "set"
        case variant
        case variationGroup
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(bundle, forKey: .bundle)
        try container.encodeIfPresent(item, forKey: .item)
        try container.encodeIfPresent(master, forKey: .master)
        try container.encodeIfPresent(option, forKey: .option)
        try container.encodeIfPresent(_set, forKey: ._set)
        try container.encodeIfPresent(variant, forKey: .variant)
        try container.encodeIfPresent(variationGroup, forKey: .variationGroup)
    }
}

