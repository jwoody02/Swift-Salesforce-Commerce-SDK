//
// ProductLink.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Document representing a link between two products. It contains the ID of the source and target products, the type of  product link, and the URLs to retrieve product data. */
public struct ProductLink: Codable, JSONEncodable, Hashable {

    public enum ModelType: String, Codable, CaseIterable {
        case crossSell = "cross_sell"
        case replacement = "replacement"
        case upSell = "up_sell"
        case accessory = "accessory"
        case newerVersion = "newer_version"
        case altOrderunit = "alt_orderunit"
        case sparePart = "spare_part"
        case other = "other"
    }
    /** The semantic ID of the product this product link is coming from. */
    public var sourceProductId: String
    /** The URL addressing the product this product link is coming from. */
    public var sourceProductLink: String
    /** The semantic ID of the product this product link is pointing to. */
    public var targetProductId: String
    /** The URL addressing the product this product link is pointing to. */
    public var targetProductLink: String
    /** The type of product link. */
    public var type: ModelType

    public init(sourceProductId: String, sourceProductLink: String, targetProductId: String, targetProductLink: String, type: ModelType) {
        self.sourceProductId = sourceProductId
        self.sourceProductLink = sourceProductLink
        self.targetProductId = targetProductId
        self.targetProductLink = targetProductLink
        self.type = type
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case sourceProductId
        case sourceProductLink
        case targetProductId
        case targetProductLink
        case type
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(sourceProductId, forKey: .sourceProductId)
        try container.encode(sourceProductLink, forKey: .sourceProductLink)
        try container.encode(targetProductId, forKey: .targetProductId)
        try container.encode(targetProductLink, forKey: .targetProductLink)
        try container.encode(type, forKey: .type)
    }
}

