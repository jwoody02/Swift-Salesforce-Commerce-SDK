//
// Inventory.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Document representing inventory information of the current product for a particular inventory list. */
public struct Inventory: Codable, JSONEncodable, Hashable {

    /** The Available To Sell (ATS) of the product. If it is infinity, the return value is 999999. The value can be overwritten by the  OCAPI setting 'product.inventory.ats.max_threshold'. */
    public var ats: Double?
    /** A flag indicating whether the product is backorderable. */
    public var backorderable: Bool?
    /** The inventory ID. */
    public var id: String
    /** A flag indicating the date when the product will be in stock. */
    public var inStockDate: Date?
    /** A flag indicating whether at least one of the products is available to sell. */
    public var orderable: Bool?
    /** A flag indicating whether the product is preorderable. */
    public var preorderable: Bool?
    /** The stock level of the product. If it is infinity, the return value is 999999. The value can be overwritten by the  OCAPI setting 'product.inventory.stock_level.max_threshold'. */
    public var stockLevel: Double?

    public init(ats: Double? = nil, backorderable: Bool? = nil, id: String, inStockDate: Date? = nil, orderable: Bool? = nil, preorderable: Bool? = nil, stockLevel: Double? = nil) {
        self.ats = ats
        self.backorderable = backorderable
        self.id = id
        self.inStockDate = inStockDate
        self.orderable = orderable
        self.preorderable = preorderable
        self.stockLevel = stockLevel
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case ats
        case backorderable
        case id
        case inStockDate
        case orderable
        case preorderable
        case stockLevel
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(ats, forKey: .ats)
        try container.encodeIfPresent(backorderable, forKey: .backorderable)
        try container.encode(id, forKey: .id)
        try container.encodeIfPresent(inStockDate, forKey: .inStockDate)
        try container.encodeIfPresent(orderable, forKey: .orderable)
        try container.encodeIfPresent(preorderable, forKey: .preorderable)
        try container.encodeIfPresent(stockLevel, forKey: .stockLevel)
    }
}

