//
// Category.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Categories allow products to be organized into hierarchical structures. Categories can have relationships to other parent categories. Each category can also provide a context inherited by subcategories. For example, a category may have an attribute value assigned to it, and any product assigned to the category or a subcategory would inherit the attribute value as long as the product is assigned. Once the product is removed from the category those attribute values would no longer be in the context of the product. Linking of categories is also used for Site hierarchical navigation. For example, inside &#39;Clothing&#39; you may have &#39;Mens&#39;, and inside &#39;Mens&#39; you may have &#39;Pants&#39;. Categories are not *Tags.* */
public struct Category: Codable, JSONEncodable, Hashable {

    /** Array of subcategories. Can be empty. */
    public var categories: [Category]?
    /** The localized description of the category. */
    public var description: String?
    /** The ID of the category. */
    public var id: String
    /** The URL of the category image. */
    public var image: String?
    /** The localized name of the category. */
    public var name: String?
    /** The localized page description of the category. */
    public var pageDescription: String?
    /** The localized page keywords of the category. */
    public var pageKeywords: String?
    /** The localized page title of the category. */
    public var pageTitle: String?
    /** The ID of the parent category. */
    public var parentCategoryId: String?
    /** The List of the parent categories. */
    public var parentCategoryTree: [PathRecord]?
    /** The URL of the category thumbnail. */
    public var thumbnail: String?

    public init(categories: [Category]? = nil, description: String? = nil, id: String, image: String? = nil, name: String? = nil, pageDescription: String? = nil, pageKeywords: String? = nil, pageTitle: String? = nil, parentCategoryId: String? = nil, parentCategoryTree: [PathRecord]? = nil, thumbnail: String? = nil) {
        self.categories = categories
        self.description = description
        self.id = id
        self.image = image
        self.name = name
        self.pageDescription = pageDescription
        self.pageKeywords = pageKeywords
        self.pageTitle = pageTitle
        self.parentCategoryId = parentCategoryId
        self.parentCategoryTree = parentCategoryTree
        self.thumbnail = thumbnail
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case categories
        case description
        case id
        case image
        case name
        case pageDescription
        case pageKeywords
        case pageTitle
        case parentCategoryId
        case parentCategoryTree
        case thumbnail
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(categories, forKey: .categories)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encode(id, forKey: .id)
        try container.encodeIfPresent(image, forKey: .image)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(pageDescription, forKey: .pageDescription)
        try container.encodeIfPresent(pageKeywords, forKey: .pageKeywords)
        try container.encodeIfPresent(pageTitle, forKey: .pageTitle)
        try container.encodeIfPresent(parentCategoryId, forKey: .parentCategoryId)
        try container.encodeIfPresent(parentCategoryTree, forKey: .parentCategoryTree)
        try container.encodeIfPresent(thumbnail, forKey: .thumbnail)
    }
}

