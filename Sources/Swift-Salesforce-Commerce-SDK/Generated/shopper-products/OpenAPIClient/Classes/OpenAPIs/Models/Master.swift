//
// Master.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** The master product is a representation of a group of variant products. This is a non-buyable entity, provides inheritable attributes for its product variants, and is used for navigation. *Doesn&#39;t have a SKU.* */
public struct Master: Codable, JSONEncodable, Hashable {

    static let masterIdRule = StringRule(minLength: 1, maxLength: 100, pattern: nil)
    /** The ID (SKU) of the master product. */
    public var masterId: String
    /** A flag indicating whether at least one of the variants is orderable. */
    public var orderable: Bool?
    /** The minimum sales price of the related variants. */
    public var price: Double?
    /** The maximum sales price of the related variants. */
    public var priceMax: Double?
    /** List of sale prices. */
    public var prices: [String: Double]?

    public init(masterId: String, orderable: Bool? = nil, price: Double? = nil, priceMax: Double? = nil, prices: [String: Double]? = nil) {
        self.masterId = masterId
        self.orderable = orderable
        self.price = price
        self.priceMax = priceMax
        self.prices = prices
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case masterId
        case orderable
        case price
        case priceMax
        case prices
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(masterId, forKey: .masterId)
        try container.encodeIfPresent(orderable, forKey: .orderable)
        try container.encodeIfPresent(price, forKey: .price)
        try container.encodeIfPresent(priceMax, forKey: .priceMax)
        try container.encodeIfPresent(prices, forKey: .prices)
    }
}

