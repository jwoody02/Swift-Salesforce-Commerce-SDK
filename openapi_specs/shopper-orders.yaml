{
  "swagger": "2.0",
  "info": {
    "title": "Shopper Orders",
    "description": "# API Overview\n\nThe Shopper Orders API enables you to create orders based on baskets prepared using the Shopper Baskets API.\n\nYou can also use the Shopper Orders API to add a customers payment instrument to an order.\n\nYou can choose to supply the full payment information or supply only a customer payment instrument ID and amount. If the customer payment instrument ID is set, all the other properties (except amount) are ignored and the payment data is resolved from the stored customer payment information.\n\n**Note:** The API doesnâ€™t allow the storage of credit card numbers. The endpoint provides the storage of masked credit card numbers only.\n\nTo update the payment status, use the Orders API.\n",
    "version": "v1"
  },
  "x-basePath": "{shortCode}.api.commercecloud.salesforce.com/checkout/shopper-orders/{version}",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "securityDefinitions": {
    "CommerceCloudStandards.AmOAuth2": {
      "description": "AccountManager OAuth 2.0 bearer token Authentication.\n",
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https://account.demandware.com/dwsso/oauth2/authorize",
      "tokenUrl": "https://account.demandware.com/dwsso/oauth2/access_token",
      "scopes": {}
    }
  },
  "definitions": {
    "ErrorResponse": {
      "$ref": "#/definitions/ApiStandards.ErrorResponse"
    },
    "ApiStandards.ErrorResponse": {
      "$ref": "#/definitions/ApiStandards.Error.Error"
    },
    "ApiStandards.Error.Error": {
      "description": "Errors reported by all APIs correspond to this error document format. \nThis format follows the RFC [IETF rfc7807](https://tools.ietf.org/html/rfc7807). \nThis may include additional properties as necessary to provide additional details \nregarding the error message.",
      "type": "object",
      "additionalProperties": true,
      "properties": {
        "type": {
          "description": "A URI reference [RFC3986] that identifies the\nproblem type.  This specification encourages that, when\ndereferenced, it provide human-readable documentation for the\nproblem type (e.g., using HTML [W3C.REC-html5-20141028]).  When\nthis member is not present, its value is assumed to be\n\"about:blank\". It accepts relative URIs; this means\nthat they must be resolved relative to the document's base URI, as\nper [RFC3986], Section 5.\n",
          "example": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/not-found",
          "type": "string"
        },
        "title": {
          "description": "A short, human-readable summary of the problem\ntype.  It will not change from occurrence to occurrence of the\nproblem, except for purposes of localization.\n",
          "example": "Not Found.",
          "type": "string"
        },
        "detail": {
          "description": "A human-readable explanation specific to this\noccurrence of the problem.\n",
          "example": "The requested resource was not found.",
          "type": "string"
        },
        "instance": {
          "description": "A URI reference that identifies the specific\noccurrence of the problem.  It may or may not yield further\ninformation if dereferenced.  It accepts relative URIs; this means\nthat they must be resolved relative to the document's base URI, as\nper [RFC3986], Section 5.\n",
          "example": "/account/12345/msgs/abc",
          "type": "string"
        }
      },
      "required": [
        "type"
      ]
    },
    "dataTypes.Basket": {
      "description": "Document representing a basket.",
      "allOf": [
        {
          "$ref": "#/definitions/CommerceCloudStandards.OpenObject"
        },
        {
          "properties": {
            "adjustedMerchandizeTotalTax": {
              "format": "double",
              "description": "The total tax on products in the shipment, including item-level price adjustments but not\nincluding service charges such as shipping. If the Discount Taxation preference is set to Tax \nProducts and Shipping Only Based on Adjusted Price, this amount also includes prorated \norder-level price adjustments.",
              "example": 4.95,
              "type": "number"
            },
            "adjustedShippingTotalTax": {
              "format": "double",
              "description": "The total tax on shipping charges in the shipment, including shipping price adjustments.",
              "example": 0.3,
              "type": "number"
            },
            "agentBasket": {
              "description": "Is the basket created by an agent?",
              "example": true,
              "type": "boolean"
            },
            "basketId": {
              "description": "The unique identifier for the basket.",
              "example": "e78aa5646a8efebdd9cdd38be7",
              "type": "string"
            },
            "billingAddress": {
              "description": "The billing address.",
              "$ref": "#/definitions/dataTypes.OrderAddress"
            },
            "bonusDiscountLineItems": {
              "description": "The bonus discount line items.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/dataTypes.BonusDiscountLineItem"
              }
            },
            "channelType": {
              "description": "The sales channel.",
              "example": "storefront",
              "enum": [
                "storefront",
                "callcenter",
                "marketplace",
                "dss",
                "store",
                "pinterest",
                "twitter",
                "facebookads",
                "subscriptions",
                "onlinereservation",
                "customerservicecenter",
                "instagramcommerce",
                "tiktok",
                "snapchat",
                "google",
                "whatsapp",
                "youtube"
              ],
              "type": "string"
            },
            "couponItems": {
              "description": "The coupon items.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/dataTypes.CouponItem"
              }
            },
            "creationDate": {
              "description": "The timestamp when the basket was created.",
              "example": "2015-05-19T15:23:18.000Z",
              "type": "string",
              "format": "date-time"
            },
            "currency": {
              "description": "The ISO 4217 mnemonic code of the currency.",
              "example": "USD",
              "type": "string"
            },
            "customerInfo": {
              "description": "The customer information, if the customer is logged in.",
              "$ref": "#/definitions/dataTypes.CustomerInfo"
            },
            "giftCertificateItems": {
              "description": "The gift certificate line items.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/dataTypes.GiftCertificateItem"
              }
            },
            "inventoryReservationExpiry": {
              "description": "The expiration datetime of the inventory reservation.",
              "example": "2015-05-19T15:30:18.000Z",
              "type": "string",
              "format": "date-time"
            },
            "lastModified": {
              "description": "The timestamp when the basket was last modified.",
              "example": "2015-05-19T15:25:18.000Z",
              "type": "string",
              "format": "date-time"
            },
            "merchandizeTotalTax": {
              "format": "double",
              "description": "The total products tax in the purchase currency.\nMerchandise total price represents the sum of the product prices before\nservices (such as shipping) or adjustments from promotions have\nbeen added.",
              "example": 4.95,
              "type": "number"
            },
            "notes": {
              "description": "The notes.",
              "$ref": "#/definitions/dataTypes.SimpleLink"
            },
            "orderPriceAdjustments": {
              "description": "The order-level price adjustments.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/dataTypes.PriceAdjustment"
              }
            },
            "orderTotal": {
              "format": "double",
              "description": "The total price, including products, shipping and tax.",
              "example": 110.24,
              "type": "number"
            },
            "paymentInstruments": {
              "description": "The payment instruments list.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/dataTypes.OrderPaymentInstrument"
              }
            },
            "productItems": {
              "description": "The product items.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/dataTypes.ProductItem"
              }
            },
            "productSubTotal": {
              "format": "double",
              "description": "The total price of all products including item-level adjustments, but not including order-level adjustments or shipping \ncharges. If the taxation policy is net, it doesn't include tax. If the taxation policy is gross, it includes tax.",
              "example": 99,
              "type": "number"
            },
            "productTotal": {
              "format": "double",
              "description": "The total price of all products including adjustments, but not including shipping charges. If the taxation policy is net,\nit doesn't include tax. If the taxation policy is gross, it includes tax.",
              "example": 88,
              "type": "number"
            },
            "shipments": {
              "description": "The shipments.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/dataTypes.Shipment"
              }
            },
            "shippingItems": {
              "description": "The shipping items.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/dataTypes.ShippingItem"
              }
            },
            "shippingTotal": {
              "format": "double",
              "description": "The total price of all shipping charges, including shipping adjustments. If the taxation policy is net, it doesn't\ninclude tax. If the taxation policy is gross, it includes tax.",
              "example": 5.99,
              "type": "number"
            },
            "shippingTotalTax": {
              "format": "double",
              "description": "The total tax on all shipping charges, not including shipping adjustments.",
              "example": 0.3,
              "type": "number"
            },
            "sourceCode": {
              "description": "The source code assigned to the basket.",
              "example": "OUTDOOR1",
              "type": "string"
            },
            "taxTotal": {
              "format": "double",
              "description": "The total tax amount.",
              "example": 5.25,
              "type": "number"
            },
            "taxation": {
              "description": "The taxation policy (gross or net).",
              "example": "net",
              "enum": [
                "gross",
                "net"
              ],
              "type": "string"
            }
          },
          "type": "object"
        }
      ]
    },
    "dataTypes.BonusDiscountLineItem": {
      "description": "Document representing a bonus discount line item.",
      "allOf": [
        {
          "$ref": "#/definitions/CommerceCloudStandards.OpenObject"
        },
        {
          "properties": {
            "bonusProducts": {
              "description": "The bonus products the customer can choose from.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/dataTypes.ProductDetailsLink"
              }
            },
            "couponCode": {
              "description": "The coupon code that triggered the promotion, if applicable.",
              "example": "5ties",
              "type": "string"
            },
            "id": {
              "description": "The ID of the line item.",
              "example": "91f4dd8bfa0653d58b7783b04f",
              "type": "string"
            },
            "maxBonusItems": {
              "format": "int32",
              "description": "The maximum number of bonus items the user can select for this promotion.",
              "type": "integer"
            },
            "promotionId": {
              "description": "The ID of the promotion that triggered the creation of the line item.",
              "example": "Buy1Get2",
              "type": "string"
            }
          },
          "type": "object"
        }
      ]
    },
    "dataTypes.CouponItem": {
      "description": "Document representing a coupon item.",
      "allOf": [
        {
          "$ref": "#/definitions/CommerceCloudStandards.OpenObject"
        },
        {
          "properties": {
            "code": {
              "maxLength": 256,
              "description": "The coupon code.",
              "example": "5ties",
              "type": "string"
            },
            "couponItemId": {
              "description": "The coupon item ID.",
              "example": "d4c9c0141e9c74c150225580f3",
              "type": "string"
            },
            "statusCode": {
              "description": "The status of the coupon item.",
              "example": "no_applicable_promotion",
              "enum": [
                "coupon_code_already_in_basket",
                "coupon_code_already_redeemed",
                "coupon_code_unknown",
                "coupon_disabled",
                "redemption_limit_exceeded",
                "customer_redemption_limit_exceeded",
                "timeframe_redemption_limit_exceeded",
                "no_active_promotion",
                "coupon_already_in_basket",
                "no_applicable_promotion",
                "applied",
                "adhoc"
              ],
              "type": "string"
            },
            "valid": {
              "description": "A flag indicating whether the coupon item is valid. A coupon line item is valid if\nthe status code is \"applied\" or \"no_applicable_promotion\".",
              "example": true,
              "type": "boolean"
            }
          },
          "required": [
            "code"
          ],
          "type": "object"
        }
      ]
    },
    "dataTypes.CustomerInfo": {
      "description": "The customer information for guest or logged-in customers.",
      "allOf": [
        {
          "$ref": "#/definitions/CommerceCloudStandards.OpenObject"
        },
        {
          "properties": {
            "customerId": {
              "maxLength": 100,
              "description": "The customer ID.",
              "example": "abMKqMaNYOBMnNdDNzyC5oNTi5",
              "type": "string"
            },
            "customerName": {
              "description": "The customer name.",
              "example": "Max Mustermann",
              "type": "string"
            },
            "customerNo": {
              "maxLength": 100,
              "description": "The customer number.",
              "example": "0002352",
              "type": "string"
            },
            "email": {
              "description": "The customer's email address.",
              "example": "no-reply@salesforce.com",
              "type": "string"
            }
          },
          "required": [
            "email"
          ],
          "type": "object"
        }
      ]
    },
    "dataTypes.Discount": {
      "description": "Document representing a discount.",
      "allOf": [
        {
          "$ref": "#/definitions/CommerceCloudStandards.OpenObject"
        },
        {
          "properties": {
            "amount": {
              "format": "double",
              "description": "The discount amount for discount types that define specific discount amounts.",
              "example": 130.88,
              "type": "number"
            },
            "percentage": {
              "format": "double",
              "description": "The discount percent for discount types that define percentage discounts.",
              "example": 0.19,
              "type": "number"
            },
            "priceBookId": {
              "description": "The price book ID that is used with some types.",
              "example": "usd-sale-prices",
              "type": "string"
            },
            "type": {
              "description": "The type of discount.",
              "example": "fixed_price",
              "enum": [
                "percentage",
                "fixed_price",
                "amount",
                "free",
                "price_book_price",
                "bonus",
                "total_fixed_price",
                "bonus_choice",
                "percentage_off_options"
              ],
              "type": "string"
            }
          },
          "required": [
            "type"
          ],
          "type": "object"
        }
      ]
    },
    "dataTypes.GiftCertificateItem": {
      "description": "A gift certificate item.",
      "allOf": [
        {
          "$ref": "#/definitions/CommerceCloudStandards.OpenObject"
        },
        {
          "properties": {
            "amount": {
              "format": "double",
              "description": "The gift certificate item amount.",
              "example": 20,
              "type": "number"
            },
            "giftCertificateItemId": {
              "description": "The item ID.",
              "example": "629dea6e7b61e58da629b57b21",
              "type": "string"
            },
            "message": {
              "maxLength": 4000,
              "description": "The gift certificate message.",
              "example": "Birthday present.",
              "type": "string"
            },
            "recipientEmail": {
              "minLength": 1,
              "description": "The recipient email.",
              "example": "no-reply@salesforce.com",
              "type": "string"
            },
            "recipientName": {
              "description": "The recipient's name.",
              "example": "Daniel Mustermann",
              "type": "string"
            },
            "senderName": {
              "description": "The sender's name.",
              "example": "Max Mustermann",
              "type": "string"
            },
            "shipmentId": {
              "description": "The ID of the shipment this item belongs to.",
              "example": "me",
              "type": "string"
            }
          },
          "required": [
            "amount",
            "recipientEmail"
          ],
          "type": "object"
        }
      ]
    },
    "dataTypes.OptionItem": {
      "description": "An option item represents an optional purchase related to a product item, and is always associated with that parent product\nitem. An option item can have different values from which to select. For example, a refrigerator item can have an option item representing an extended warranty, with a set of option item values representing different warranty lengths. When a shopper purchases the warranty option item together with the parent refrigerator item, they select one of the available warranty option item values.",
      "allOf": [
        {
          "$ref": "#/definitions/CommerceCloudStandards.OpenObject"
        },
        {
          "properties": {
            "adjustedTax": {
              "format": "double",
              "description": "The tax on the line item, including any adjustments.",
              "example": 19,
              "type": "number"
            },
            "basePrice": {
              "format": "double",
              "description": "The base price of the line item, which is the unit price not including adjustments. \nIf the taxation policy is net, it doesn't include tax. If the taxation policy is gross, it includes tax.",
              "example": 50,
              "type": "number"
            },
            "bonusDiscountLineItemId": {
              "description": "The ID of the bonus discount line item this bonus product relates to.",
              "example": "ba248414e3eee797f062162f8b",
              "type": "string"
            },
            "bonusProductLineItem": {
              "description": "A flag indicating whether the product item is a bonus.",
              "example": false,
              "type": "boolean"
            },
            "bundledProductItems": {
              "description": "The bundled product items.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/dataTypes.ProductItem"
              }
            },
            "gift": {
              "description": "Returns true if the item is a gift.",
              "example": false,
              "type": "boolean"
            },
            "giftMessage": {
              "description": "The gift message.",
              "example": "Happy Birthday",
              "type": "string"
            },
            "inventoryId": {
              "maxLength": 256,
              "description": "The inventory list ID associated with this item.",
              "example": "inventory",
              "type": "string"
            },
            "itemId": {
              "description": "The product item ID. Use it to identify this item when updating its quantity or creating a custom price adjustment for it.",
              "example": "430ef5aad3a24de59378458434",
              "type": "string"
            },
            "itemText": {
              "description": "The text describing the item.",
              "example": "The item text.",
              "type": "string"
            },
            "optionId": {
              "maxLength": 256,
              "description": "The ID of the option.",
              "example": "consoleWarranty",
              "type": "string"
            },
            "optionItems": {
              "description": "The option items.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/dataTypes.OptionItem"
              }
            },
            "optionValueId": {
              "maxLength": 256,
              "description": "The ID of the option value.",
              "example": "000",
              "type": "string"
            },
            "price": {
              "format": "double",
              "description": "The price of the line item before applying any adjustments. If the taxation policy is net, it doesn't include tax. \nIf the taxation policy is gross, it includes tax.",
              "example": 150.99,
              "type": "number"
            },
            "priceAdjustments": {
              "description": "The price adjustments.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/dataTypes.PriceAdjustment"
              }
            },
            "priceAfterItemDiscount": {
              "format": "double",
              "description": "The price of the product line item including item-level adjustments, but not including order-level adjustments or\nshipping charges. If the taxation policy is net, it doesn't include tax. If the taxation policy is gross, it includes tax.",
              "example": 50.99,
              "type": "number"
            },
            "priceAfterOrderDiscount": {
              "format": "double",
              "description": "The price of the product line item including item-level adjustments and prorated order-level adjustments, but not \nincluding shipping charges. If the taxation policy is net, it doesn't include tax. If the taxation policy is gross, it\nincludes tax.",
              "example": 40.5,
              "type": "number"
            },
            "productId": {
              "maxLength": 100,
              "description": "The ID of the product.",
              "example": "nintendo-ds-console",
              "type": "string"
            },
            "productListItem": {
              "description": "If this product line item was added from a product list, this value is a reference to the corresponding product list item.",
              "$ref": "#/definitions/dataTypes.ProductListItemReference"
            },
            "productName": {
              "description": "The name of the product.",
              "example": "Nintendo DS Game Console",
              "type": "string"
            },
            "quantity": {
              "minimum": 0,
              "maximum": 999,
              "format": "double",
              "description": "The ordered quantity of the products represented by this item.",
              "example": 1,
              "type": "number"
            },
            "shipmentId": {
              "description": "The ID of the shipment this item belongs to.",
              "example": "me",
              "type": "string"
            },
            "shippingItemId": {
              "description": "If the product line item has a related shipping item, this value is its ID. A related shipping item represents a \nsurcharge applied to individual products using a particular shipping method.",
              "example": "006490dcc338feeafc71c964bf",
              "type": "string"
            },
            "tax": {
              "format": "double",
              "description": "The tax on the line item before applying any adjustments.",
              "example": 0,
              "type": "number"
            },
            "taxBasis": {
              "format": "double",
              "description": "The amount used to calculate the tax for this item.",
              "example": 50,
              "type": "number"
            },
            "taxClassId": {
              "description": "The tax class ID for the product item, or null\nif no tax class ID is associated with the product item.",
              "type": "string"
            },
            "taxRate": {
              "format": "double",
              "description": "The tax rate, which is the decimal tax rate to be applied\nto the product represented by this item.",
              "example": 0.19,
              "type": "number"
            }
          },
          "required": [
            "optionId",
            "optionValueId"
          ],
          "type": "object"
        }
      ]
    },
    "dataTypes.Order": {
      "description": "Document representing an order.",
      "properties": {
        "adjustedMerchandizeTotalTax": {
          "format": "double",
          "description": "The total tax on products in the order, including price adjustments, but not including service charges such as \nshipping.",
          "example": 1.5,
          "type": "number"
        },
        "adjustedShippingTotalTax": {
          "format": "double",
          "description": "The total tax on shipping charges in the order, including shipping price adjustments.",
          "example": 0.3,
          "type": "number"
        },
        "billingAddress": {
          "description": "The billing address.",
          "$ref": "#/definitions/dataTypes.OrderAddress"
        },
        "bonusDiscountLineItems": {
          "description": "The bonus discount line items.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/dataTypes.BonusDiscountLineItem"
          }
        },
        "channelType": {
          "description": "The sales channel.",
          "example": "storefront",
          "enum": [
            "storefront",
            "callcenter",
            "marketplace",
            "dss",
            "store",
            "pinterest",
            "twitter",
            "facebookads",
            "subscriptions",
            "onlinereservation",
            "customerservicecenter",
            "instagramcommerce",
            "tiktok",
            "snapchat",
            "google",
            "whatsapp",
            "youtube"
          ],
          "type": "string"
        },
        "confirmationStatus": {
          "description": "The confirmation status.",
          "example": "confirmed",
          "enum": [
            "not_confirmed",
            "confirmed"
          ],
          "type": "string"
        },
        "couponItems": {
          "description": "The coupon items.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/dataTypes.CouponItem"
          }
        },
        "createdBy": {
          "description": "This value depends on how the order was created. If a shopper created the order, this value is Customer. \nIf a job created the order, this value is System. Otherwise, this value is the name of the user who created the order.",
          "example": "Customer",
          "type": "string"
        },
        "creationDate": {
          "description": "The timestamp when the order was created.",
          "example": "2015-05-19T15:23:18.000Z",
          "type": "string",
          "format": "date-time"
        },
        "currency": {
          "description": "The ISO 4217 mnemonic code of the currency.",
          "example": "USD",
          "type": "string"
        },
        "customerInfo": {
          "description": "The customer information for guest or logged-in customers.",
          "$ref": "#/definitions/dataTypes.CustomerInfo"
        },
        "customerName": {
          "description": "The customer name.",
          "example": "Max Mustermann",
          "type": "string"
        },
        "exportStatus": {
          "description": "The export status of the order.",
          "example": "exported",
          "enum": [
            "not_exported",
            "exported",
            "ready",
            "failed"
          ],
          "type": "string"
        },
        "externalOrderStatus": {
          "description": "The external status of the order.",
          "example": "Submitted",
          "type": "string"
        },
        "giftCertificateItems": {
          "description": "The gift certificate line items.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/dataTypes.GiftCertificateItem"
          }
        },
        "globalPartyId": {
          "description": "The Customer 360 Global Party ID associated with the shopper.",
          "example": "GP_1234",
          "type": "string"
        },
        "lastModified": {
          "description": "The timestamp when the order was last modified.",
          "example": "2021-02-25T09:58:08.715Z",
          "type": "string",
          "format": "date-time"
        },
        "merchandizeTotalTax": {
          "format": "double",
          "description": "The total products tax in the purchase currency. Merchandise total prices represent the sum of product prices \nnot including shipping or adjustments.",
          "example": 1.5,
          "type": "number"
        },
        "notes": {
          "description": "The notes.",
          "$ref": "#/definitions/dataTypes.SimpleLink"
        },
        "orderNo": {
          "description": "The order number.",
          "example": "00000410",
          "type": "string"
        },
        "orderPriceAdjustments": {
          "description": "The order-level price adjustments.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/dataTypes.PriceAdjustment"
          }
        },
        "orderToken": {
          "description": "The order token used to secure the lookup of an order on base of the\nplain order number. The order token contains only URL safe characters.",
          "type": "string"
        },
        "orderTotal": {
          "format": "double",
          "description": "The total price, including products, shipping, and tax.",
          "example": 110.24,
          "type": "number"
        },
        "paymentInstruments": {
          "description": "The payment instruments list.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/dataTypes.OrderPaymentInstrument"
          }
        },
        "paymentStatus": {
          "description": "The payment status.",
          "example": "paid",
          "enum": [
            "not_paid",
            "part_paid",
            "paid"
          ],
          "type": "string"
        },
        "productItems": {
          "description": "The product items.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/dataTypes.ProductItem"
          }
        },
        "productSubTotal": {
          "format": "double",
          "description": "The total price of all products including item-level adjustments, but not including \norder-level adjustments or shipping charges. If the taxation policy is net, it doesn't include tax. \nIf the taxation policy is gross, it includes tax.",
          "example": 99,
          "type": "number"
        },
        "productTotal": {
          "format": "double",
          "description": "The total price of all products in the shipment including item-level adjustments and prorated \norder-level adjustments, but not including shipping charges. If the taxation policy is net, \nit doesn't include tax. If the taxation policy is gross, it includes tax.",
          "example": 99,
          "type": "number"
        },
        "shipments": {
          "description": "The shipments.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/dataTypes.Shipment"
          }
        },
        "shippingItems": {
          "description": "The shipping items.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/dataTypes.ShippingItem"
          }
        },
        "shippingStatus": {
          "description": "The shipping status.",
          "example": "shipped",
          "enum": [
            "not_shipped",
            "part_shipped",
            "shipped"
          ],
          "type": "string"
        },
        "shippingTotal": {
          "format": "double",
          "description": "The total price of all shipping charges, including shipping adjustments. If the taxation policy is net, \nit doesn't include tax. If the taxation policy is gross, it includes tax.",
          "example": 5.99,
          "type": "number"
        },
        "shippingTotalTax": {
          "format": "double",
          "description": "The total tax on all shipping charges, not including shipping adjustments.",
          "example": 0.3,
          "type": "number"
        },
        "siteId": {
          "description": "The order's site.",
          "example": "ShoppingSite",
          "type": "string"
        },
        "sourceCode": {
          "description": "The source code assigned to the basket from which this order was created.",
          "example": "OUTDOOR1",
          "type": "string"
        },
        "status": {
          "description": "The status.",
          "example": "created",
          "enum": [
            "created",
            "new",
            "completed",
            "cancelled",
            "replaced",
            "failed"
          ],
          "type": "string"
        },
        "taxTotal": {
          "format": "double",
          "description": "The total tax amount.",
          "example": 5.25,
          "type": "number"
        },
        "taxation": {
          "description": "The taxation policy (gross or net).",
          "example": "net",
          "enum": [
            "gross",
            "net"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "dataTypes.OrderAddress": {
      "description": "Document representing an order address.",
      "allOf": [
        {
          "$ref": "#/definitions/CommerceCloudStandards.OpenObject"
        },
        {
          "properties": {
            "address1": {
              "description": "The first address line.",
              "example": "45 Main Rd.",
              "type": "string"
            },
            "address2": {
              "description": "The second address line.",
              "example": "Apartment 204",
              "type": "string"
            },
            "city": {
              "description": "The city.",
              "example": "Boston",
              "type": "string"
            },
            "companyName": {
              "description": "The company name.",
              "example": "Salesforce",
              "type": "string"
            },
            "countryCode": {
              "description": "The ISO Country Code.",
              "example": "US",
              "$ref": "#/definitions/CommerceCloudStandards.CountryCode"
            },
            "firstName": {
              "description": "The first name.",
              "example": "Max",
              "type": "string"
            },
            "fullName": {
              "description": "The full name.",
              "example": "Max Mustermann",
              "type": "string"
            },
            "id": {
              "description": "The ID of the address.",
              "example": "me",
              "type": "string"
            },
            "jobTitle": {
              "description": "The job title.",
              "example": "Software Engineer",
              "type": "string"
            },
            "lastName": {
              "description": "The last name.",
              "example": "Mustermann",
              "type": "string"
            },
            "phone": {
              "description": "The phone number.",
              "example": "6175555555",
              "type": "string"
            },
            "postBox": {
              "description": "The post office box.",
              "example": "PO BOX 109",
              "type": "string"
            },
            "postalCode": {
              "description": "The postal code.",
              "example": "05408",
              "type": "string"
            },
            "salutation": {
              "description": "The salutation.",
              "example": "Mr",
              "type": "string"
            },
            "secondName": {
              "description": "The second name.",
              "type": "string"
            },
            "stateCode": {
              "description": "The state code.",
              "example": "MA",
              "type": "string"
            },
            "suffix": {
              "description": "The suffix.",
              "example": "Sr",
              "type": "string"
            },
            "suite": {
              "description": "The suite.",
              "example": "24A",
              "type": "string"
            },
            "title": {
              "description": "The title.",
              "example": "Dr.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ]
    },
    "dataTypes.OrderPaymentCardRequest": {
      "description": "Document representing an order payment card request.",
      "allOf": [
        {
          "$ref": "#/definitions/CommerceCloudStandards.ClosedObject"
        },
        {
          "properties": {
            "cardType": {
              "maxLength": 256,
              "description": "The payment card type (for example: Visa).",
              "example": "Visa",
              "type": "string"
            },
            "creditCardToken": {
              "description": "A credit card token. If a credit card is tokenized, the token can be used to look up the credit card data\nin the token store.",
              "example": "E67TY8GQ27X",
              "type": "string"
            },
            "expirationMonth": {
              "format": "int32",
              "description": "The month when the payment card expires.",
              "example": 3,
              "type": "integer"
            },
            "expirationYear": {
              "format": "int32",
              "description": "The year when the payment card expires.",
              "example": 2025,
              "type": "integer"
            },
            "holder": {
              "maxLength": 256,
              "description": "The payment card holder.",
              "example": "Max Mustermann",
              "type": "string"
            },
            "issueNumber": {
              "maxLength": 256,
              "description": "The payment card issue number.",
              "example": "2",
              "type": "string"
            },
            "maskedNumber": {
              "pattern": "^[0-9 -]{0,7}\\D{6,15}\\d{0,4}$",
              "maxLength": 25,
              "description": "The masked payment card number.",
              "example": "*********4422",
              "type": "string"
            },
            "validFromMonth": {
              "minimum": 1,
              "maximum": 12,
              "format": "int32",
              "description": "The month the payment card is valid from.",
              "example": 5,
              "type": "integer"
            },
            "validFromYear": {
              "format": "int32",
              "description": "The year the payment card is valid from.",
              "example": 2019,
              "type": "integer"
            }
          },
          "type": "object"
        }
      ]
    },
    "dataTypes.OrderPaymentInstrument": {
      "description": "Document representing an order payment instrument.",
      "properties": {
        "amount": {
          "format": "double",
          "description": "The payment transaction amount.",
          "example": 130.88,
          "type": "number"
        },
        "authorizationStatus": {
          "description": "The authorization status of the payment transaction.",
          "$ref": "#/definitions/dataTypes.Status"
        },
        "bankRoutingNumber": {
          "maxLength": 256,
          "description": "The bank routing number.",
          "example": "12030000",
          "type": "string"
        },
        "maskedGiftCertificateCode": {
          "description": "The gift certificate code with the last 4 characters not masked.",
          "example": "******Gzzy",
          "type": "string"
        },
        "paymentCard": {
          "description": "The payment card.",
          "$ref": "#/definitions/dataTypes.PaymentCard"
        },
        "paymentInstrumentId": {
          "description": "The payment instrument ID.",
          "example": "ba248424e3eee797f062162f8b",
          "type": "string"
        },
        "paymentMethodId": {
          "maxLength": 256,
          "description": "The payment method ID.",
          "example": "CREDIT_CARD",
          "type": "string"
        }
      },
      "type": "object"
    },
    "dataTypes.OrderPaymentInstrumentRequest": {
      "description": "Document representing an order payment instrument request.",
      "allOf": [
        {
          "$ref": "#/definitions/CommerceCloudStandards.OpenObject"
        },
        {
          "properties": {
            "amount": {
              "format": "double",
              "description": "The payment transaction amount.",
              "example": 130.88,
              "type": "number"
            },
            "bankRoutingNumber": {
              "maxLength": 256,
              "description": "The bank routing number.",
              "example": "12030000",
              "type": "string"
            },
            "giftCertificateCode": {
              "maxLength": 256,
              "description": "The gift certificate code.",
              "type": "string"
            },
            "paymentCard": {
              "description": "The payment card.",
              "$ref": "#/definitions/dataTypes.OrderPaymentCardRequest"
            },
            "paymentMethodId": {
              "maxLength": 256,
              "description": "The payment method ID.",
              "example": "CREDIT_CARD",
              "type": "string"
            }
          },
          "type": "object"
        }
      ]
    },
    "dataTypes.PaymentCard": {
      "description": "Document representing a payment card.",
      "allOf": [
        {
          "$ref": "#/definitions/CommerceCloudStandards.ClosedObject"
        },
        {
          "properties": {
            "cardType": {
              "maxLength": 256,
              "description": "The payment card type.",
              "example": "Visa",
              "type": "string"
            },
            "creditCardExpired": {
              "description": "A flag indicating if the credit card is expired.",
              "example": true,
              "type": "boolean"
            },
            "creditCardToken": {
              "description": "A credit card token. If a credit card is tokenized, the token can be used to look up the credit card data\nin the token store.",
              "example": "E67TY8GQ27X",
              "type": "string"
            },
            "expirationMonth": {
              "format": "int32",
              "description": "The month when the payment card expires.",
              "example": 3,
              "type": "integer"
            },
            "expirationYear": {
              "format": "int32",
              "description": "The year when the payment card expires.",
              "example": 2025,
              "type": "integer"
            },
            "holder": {
              "maxLength": 256,
              "description": "The payment card holder.",
              "example": "Max Mustermann",
              "type": "string"
            },
            "issueNumber": {
              "maxLength": 256,
              "description": "The payment card issue number.",
              "example": "2",
              "type": "string"
            },
            "maskedNumber": {
              "maxLength": 4000,
              "description": "The masked payment card number.",
              "example": "*********4422",
              "type": "string"
            },
            "numberLastDigits": {
              "maxLength": 4000,
              "description": "The last digits of the payment card number.",
              "example": "4422",
              "type": "string"
            },
            "validFromMonth": {
              "minimum": 1,
              "maximum": 12,
              "format": "int32",
              "description": "The month the payment card is valid from.",
              "example": 5,
              "type": "integer"
            },
            "validFromYear": {
              "format": "int32",
              "description": "The year the payment card is valid from.",
              "example": 2015,
              "type": "integer"
            }
          },
          "type": "object"
        }
      ]
    },
    "dataTypes.PaymentCardSpec": {
      "description": "Document representing the specification for a payment card.",
      "allOf": [
        {
          "$ref": "#/definitions/CommerceCloudStandards.OpenObject"
        },
        {
          "properties": {
            "cardType": {
              "description": "The payment card type.",
              "example": "Visa",
              "type": "string"
            },
            "checksumVerificationEnabled": {
              "description": "A flag indicating whether the card number is verified using the Luhn checksum algorithm.",
              "example": true,
              "type": "boolean"
            },
            "description": {
              "description": "The localized description of the payment card.",
              "type": "string"
            },
            "image": {
              "description": "The URL to the image that represents the payment card.",
              "type": "string"
            },
            "name": {
              "description": "The localized name of the payment card.",
              "type": "string"
            },
            "numberLengths": {
              "description": "The sorted list of number lengths (individual lengths as well as\nlength ranges).",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "numberPrefixes": {
              "description": "The sorted list of number prefixes (individual prefixes as well\nas prefix ranges).",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "type": "object"
        }
      ]
    },
    "dataTypes.PaymentMethod": {
      "description": "Document representing a payment method.",
      "allOf": [
        {
          "$ref": "#/definitions/CommerceCloudStandards.OpenObject"
        },
        {
          "properties": {
            "cards": {
              "description": "The sorted array of payment cards (included only when the system payment method is CREDIT_CARD).",
              "type": "array",
              "items": {
                "$ref": "#/definitions/dataTypes.PaymentCardSpec"
              }
            },
            "description": {
              "description": "The localized description of the payment method or card.",
              "type": "string"
            },
            "id": {
              "maxLength": 256,
              "description": "The ID of the payment method or card.",
              "type": "string"
            },
            "image": {
              "description": "The URL to the image that represents the payment method or card.",
              "type": "string"
            },
            "name": {
              "description": "The localized name of the payment method or card.",
              "type": "string"
            },
            "paymentProcessorId": {
              "description": "The payment processor ID.",
              "type": "string"
            }
          },
          "required": [
            "id"
          ],
          "type": "object"
        }
      ]
    },
    "dataTypes.PaymentMethodResult": {
      "description": "Result document of payment methods applicable for a basket.",
      "properties": {
        "applicablePaymentMethods": {
          "description": "The applicable payment methods.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/dataTypes.PaymentMethod"
          }
        }
      },
      "type": "object"
    },
    "dataTypes.PriceAdjustment": {
      "description": "Document representing a price adjustment within a basket or order. Price adjustments\ncan be assigned at the order, product, or shipping level.",
      "allOf": [
        {
          "$ref": "#/definitions/CommerceCloudStandards.OpenObject"
        },
        {
          "properties": {
            "appliedDiscount": {
              "description": "Details describing the discount this price adjustment is based on. For adjustments\nnot based on a discount, this value is null.",
              "$ref": "#/definitions/dataTypes.Discount"
            },
            "couponCode": {
              "description": "The coupon code of the coupon this price adjustment is based on. For adjustments \nnot based on a coupon, this value is null.",
              "example": "5ties",
              "type": "string"
            },
            "createdBy": {
              "description": "The user who created the price adjustment.",
              "example": "Support",
              "type": "string"
            },
            "creationDate": {
              "description": "The timestamp when the price adjustment was created.",
              "example": "2015-05-19T15:23:18.000Z",
              "type": "string",
              "format": "date-time"
            },
            "custom": {
              "description": "A flag indicating whether this price adjustment was created by custom logic. This \nflag is set to true unless the price adjustment was created by the promotion \nengine.",
              "example": true,
              "type": "boolean"
            },
            "itemText": {
              "description": "The text describing the item.",
              "type": "string"
            },
            "lastModified": {
              "description": "The timestamp when the price adjustment was last modified.",
              "example": "2021-02-25T09:58:08.715Z",
              "type": "string",
              "format": "date-time"
            },
            "manual": {
              "description": "A flag indicating whether this price adjustment was created by a manual process.\nIf the price adjustment was created by the promotion engine, this value is always\nfalse.",
              "example": true,
              "type": "boolean"
            },
            "price": {
              "format": "double",
              "description": "The adjustment price.",
              "example": 120.88,
              "type": "number"
            },
            "priceAdjustmentId": {
              "description": "The price adjustment ID.",
              "example": "ba248424e3eee797f062161f8b",
              "type": "string"
            },
            "promotionId": {
              "description": "The ID of the related promotion. Custom price adjustments\ncan be assigned any promotion ID so long it is not\nused by a price adjustment belonging to the same item,\nand is not used by a promotion defined in the promotion engine.\nIf not specified, a promotion ID is generated.",
              "type": "string"
            },
            "promotionLink": {
              "description": "The URL addressing the related promotion.",
              "type": "string"
            },
            "reasonCode": {
              "description": "The reason for the price adjustment.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ]
    },
    "dataTypes.ProductDetailsLink": {
      "description": "Document representing a link to the resource for product details.",
      "allOf": [
        {
          "$ref": "#/definitions/CommerceCloudStandards.ClosedObject"
        },
        {
          "properties": {
            "productDescription": {
              "description": "The description of the product.",
              "example": "Nintendo DS revolutionizes handheld gameplay.",
              "type": "string"
            },
            "productId": {
              "description": "The ID of the product.",
              "example": "nintendo-ds-console",
              "type": "string"
            },
            "productName": {
              "description": "The name of the product.",
              "example": "Nintendo DS Game Console",
              "type": "string"
            },
            "title": {
              "description": "The link title.",
              "example": "Nintendo DS Game Console",
              "type": "string"
            }
          },
          "required": [
            "productId"
          ],
          "type": "object"
        }
      ]
    },
    "dataTypes.ProductItem": {
      "description": "Document representing a product item.",
      "allOf": [
        {
          "$ref": "#/definitions/CommerceCloudStandards.OpenObject"
        },
        {
          "properties": {
            "adjustedTax": {
              "format": "double",
              "description": "The tax on the line item, including any adjustments.",
              "example": 19,
              "type": "number"
            },
            "basePrice": {
              "format": "double",
              "description": "The base price of the line item, which is the unit price not including \nadjustments. If the taxation policy is net, it doesn't include tax. If the\ntaxation policy is gross, it includes tax.",
              "example": 130,
              "type": "number"
            },
            "bonusDiscountLineItemId": {
              "description": "The ID of the bonus discount line item this bonus product relates to.",
              "type": "string"
            },
            "bonusProductLineItem": {
              "description": "A flag indicating whether the product item is a bonus.",
              "example": true,
              "type": "boolean"
            },
            "bundledProductItems": {
              "description": "The bundled product items.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/dataTypes.ProductItem"
              }
            },
            "gift": {
              "description": "Returns true if the item is a gift.",
              "example": true,
              "type": "boolean"
            },
            "giftMessage": {
              "description": "The gift message.",
              "example": "Happy Birthday",
              "type": "string"
            },
            "inventoryId": {
              "maxLength": 256,
              "description": "The inventory list ID associated with this item.",
              "example": "inventory",
              "type": "string"
            },
            "itemId": {
              "description": "The product item ID. Use it to identify this item when updating its quantity or \ncreating a custom price adjustment for it.",
              "example": "430ef5aad3a24de59378458434",
              "type": "string"
            },
            "itemText": {
              "description": "The text describing the item.",
              "type": "string"
            },
            "optionItems": {
              "description": "The option items.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/dataTypes.OptionItem"
              }
            },
            "price": {
              "format": "double",
              "description": "The price of the line item before applying any adjustments. If the line item is based on net pricing\nthen the net price is returned. If the line item is based on gross\npricing then the gross price is returned.",
              "type": "number"
            },
            "priceAdjustments": {
              "description": "The price adjustments.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/dataTypes.PriceAdjustment"
              }
            },
            "priceAfterItemDiscount": {
              "format": "double",
              "description": "The price of the product line item including item-level adjustments, but not \nincluding order-level adjustments or shipping charges. If the taxation policy is \nnet, it doesn't include tax. If the taxation policy is gross, it includes tax.",
              "example": 20.99,
              "type": "number"
            },
            "priceAfterOrderDiscount": {
              "format": "double",
              "description": "The price of the product line item including item-level adjustments and prorated\norder-level adjustments, but not including shipping charges. If the taxation \npolicy is net, it doesn't include tax. If the taxation policy is gross, it \nincludes tax.",
              "example": 15.5,
              "type": "number"
            },
            "productId": {
              "maxLength": 100,
              "description": "The ID of the product.",
              "example": "nintendo-ds-console",
              "type": "string"
            },
            "productListItem": {
              "description": "If this product line item was added from a product list, this value is a reference\nto the corresponding product list item.",
              "$ref": "#/definitions/dataTypes.ProductListItemReference"
            },
            "productName": {
              "description": "The name of the product.",
              "example": "Nintendo DS Game Console",
              "type": "string"
            },
            "quantity": {
              "minimum": 0,
              "maximum": 999,
              "format": "double",
              "description": "The quantity of the products represented by this item.",
              "example": 1,
              "type": "number"
            },
            "shipmentId": {
              "description": "The ID of the shipment this item belongs to.",
              "example": "me",
              "type": "string"
            },
            "shippingItemId": {
              "description": "If the product line item has a related shipping item, this value is its ID. A \nrelated shipping item represents a surcharge applied to individual products using\na particular shipping method.",
              "example": "006490dcc338feeafc71c964bf",
              "type": "string"
            },
            "tax": {
              "format": "double",
              "description": "The tax for the product item, not including price adjustments.",
              "example": 0.3,
              "type": "number"
            },
            "taxBasis": {
              "format": "double",
              "description": "The price used to calculate the tax for this product item.",
              "example": 30,
              "type": "number"
            },
            "taxClassId": {
              "description": "The tax class ID for the product item, or null\nif no tax class ID is associated with the product item.",
              "type": "string"
            },
            "taxRate": {
              "format": "double",
              "description": "The tax rate, which is the decimal tax rate to be applied\nto the product represented by this item.",
              "example": 0.9,
              "type": "number"
            }
          },
          "type": "object"
        }
      ]
    },
    "dataTypes.ProductListItemReference": {
      "description": "Document representing product list item details.",
      "allOf": [
        {
          "$ref": "#/definitions/CommerceCloudStandards.ClosedObject"
        },
        {
          "properties": {
            "id": {
              "description": "The ID of the product list item.",
              "example": "ba248424e3fee797f062162f8b",
              "type": "string"
            },
            "priority": {
              "format": "int32",
              "description": "The priority of the product list item.",
              "example": 1,
              "type": "integer"
            },
            "productDetailsLink": {
              "$ref": "#/definitions/dataTypes.ProductDetailsLink"
            },
            "productList": {
              "description": "A reference to the associated product list.",
              "$ref": "#/definitions/dataTypes.ProductListLink"
            },
            "public": {
              "example": false,
              "type": "boolean"
            },
            "purchasedQuantity": {
              "format": "double",
              "description": "The total quantity of this item purchased from the product list.",
              "example": 0,
              "type": "number"
            },
            "quantity": {
              "minimum": 0,
              "format": "double",
              "description": "The number of products or gift certificates that get shipped when purchasing this product list item.",
              "example": 1,
              "type": "number"
            },
            "type": {
              "description": "Specifies whether the item is a product or a gift certificate.",
              "example": "product",
              "enum": [
                "product",
                "gift_certificate"
              ],
              "type": "string"
            }
          },
          "required": [
            "id"
          ],
          "type": "object"
        }
      ]
    },
    "dataTypes.ProductListLink": {
      "description": "Document representing a link to a product list.",
      "properties": {
        "description": {
          "description": "The description of this product list.",
          "type": "string"
        },
        "name": {
          "description": "The name of this product list.",
          "type": "string"
        },
        "public": {
          "description": "A flag indicating whether the owner made this product list available for access\nby other customers.",
          "example": true,
          "type": "boolean"
        },
        "title": {
          "description": "The link title.",
          "type": "string"
        },
        "type": {
          "description": "The type of the product list.",
          "example": "shopping_list",
          "enum": [
            "wish_list",
            "gift_registry",
            "shopping_list",
            "custom_1",
            "custom_2",
            "custom_3"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "dataTypes.Shipment": {
      "description": "Document representing a shipment.",
      "allOf": [
        {
          "$ref": "#/definitions/CommerceCloudStandards.OpenObject"
        },
        {
          "properties": {
            "adjustedMerchandizeTotalTax": {
              "format": "double",
              "description": "The total tax on products in the shipment, including item-level price adjustments but not including\nservice charges such as shipping. If the Discount Taxation preference is set to Tax Products and \nShipping Only Based on Adjusted Price, this amount also includes prorated order-level price adjustments.",
              "example": 4.95,
              "type": "number"
            },
            "adjustedShippingTotalTax": {
              "format": "double",
              "description": "The total tax on shipping charges in the shipment, including shipping price adjustments.",
              "example": 0.3,
              "type": "number"
            },
            "gift": {
              "description": "A flag indicating whether the shipment is a gift.",
              "example": true,
              "type": "boolean"
            },
            "giftMessage": {
              "description": "The gift message.",
              "example": "Happy Birthday",
              "type": "string"
            },
            "merchandizeTotalTax": {
              "format": "double",
              "description": "The total tax on products in the shipment, not including price adjustments or service charges such as \nshipping.",
              "example": 4.95,
              "type": "number"
            },
            "productSubTotal": {
              "format": "double",
              "description": "The total price of all products in the shipment, including item-level adjustments, but not including\norder-level adjustments or shipping charges. If the taxation policy is net, it doesn't include tax. If\nthe taxation policy is gross, it includes tax.",
              "example": 99,
              "type": "number"
            },
            "productTotal": {
              "format": "double",
              "description": "The total price of all products in the shipment including item-level adjustments and prorated \norder-level adjustments, but not including shipping charges. If the taxation policy is net, it doesn't\ninclude tax. If the taxation policy is gross, it includes tax.",
              "example": 99,
              "type": "number"
            },
            "shipmentId": {
              "description": "The order-specific ID of the shipment. The default value is 'me'.",
              "example": "me",
              "type": "string"
            },
            "shipmentNo": {
              "description": "The shipment number of this shipment. This number is automatically generated.",
              "type": "string"
            },
            "shipmentTotal": {
              "format": "double",
              "description": "The total price of all products in the shipment including item-level adjustments, shipping charges, \nand tax.",
              "example": 39.99,
              "type": "number"
            },
            "shippingAddress": {
              "description": "The shipping address.",
              "$ref": "#/definitions/dataTypes.OrderAddress"
            },
            "shippingMethod": {
              "description": "The shipping method.",
              "$ref": "#/definitions/dataTypes.ShippingMethod"
            },
            "shippingStatus": {
              "description": "The shipping status of the shipment.",
              "example": "shipped",
              "enum": [
                "not_shipped",
                "shipped"
              ],
              "type": "string"
            },
            "shippingTotal": {
              "format": "double",
              "description": "The total price of all shipping charges in the shipment, including shipping adjustments. If the \ntaxation policy is net, it doesn't include tax. If the taxation policy is gross, it includes tax.",
              "example": 5.99,
              "type": "number"
            },
            "shippingTotalTax": {
              "format": "double",
              "description": "The total tax on shipping charges in the shipment, not including shipping price adjustments.",
              "example": 0.3,
              "type": "number"
            },
            "taxTotal": {
              "format": "double",
              "description": "The total tax on the shipment, including item-level price adjustments and service charges such as\nshipping. If the Discount Taxation preference is set to Tax Products and Shipping Only Based on \nAdjusted Price, this amount also includes prorated order-level price adjustments.",
              "example": 1.8,
              "type": "number"
            },
            "trackingNumber": {
              "description": "The tracking number of the shipment.",
              "example": "1Z204E380338943508",
              "type": "string"
            }
          },
          "type": "object"
        }
      ]
    },
    "dataTypes.ShippingItem": {
      "description": "Document representing a shipping item.",
      "allOf": [
        {
          "$ref": "#/definitions/CommerceCloudStandards.OpenObject"
        },
        {
          "properties": {
            "adjustedTax": {
              "format": "double",
              "description": "The tax for the shipping item, including price adjustments.",
              "example": 19,
              "type": "number"
            },
            "basePrice": {
              "format": "double",
              "description": "The base price of the shipping item, which is the unit price not including adjustments. \nIf the taxation policy is net, it doesn't include tax. If the taxation policy is gross, it includes tax.",
              "example": 50,
              "type": "number"
            },
            "itemId": {
              "description": "The shipping item ID. Use it to identify this shipping item when updating its quantity or creating a\ncustom price adjustment for it.",
              "example": "430ef5aad3a24de59378458434",
              "type": "string"
            },
            "itemText": {
              "description": "The text describing the shipping item.",
              "example": "Shipping",
              "type": "string"
            },
            "price": {
              "format": "double",
              "description": "The price of the line item before applying any adjustments. If the line item is based on net pricing\nthen the net price is returned. If the line item is based on gross\npricing then the gross price is returned.",
              "type": "number"
            },
            "priceAdjustments": {
              "description": "The price adjustments.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/dataTypes.PriceAdjustment"
              }
            },
            "priceAfterItemDiscount": {
              "format": "double",
              "description": "The price of the shipping item including item-level adjustments, but not including order-level\nadjustments or shipping charges. If the taxation policy is net, it doesn't include tax. \nIf the taxation policy is gross, it includes tax.",
              "type": "number"
            },
            "shipmentId": {
              "description": "The identifier of the shipment to which this item belongs.",
              "example": "me",
              "type": "string"
            },
            "tax": {
              "format": "double",
              "description": "The tax on the product item, not including adjustments.",
              "example": 0.19,
              "type": "number"
            },
            "taxBasis": {
              "format": "double",
              "description": "The price used to calculate the tax for this shipping item.",
              "type": "number"
            },
            "taxClassId": {
              "description": "The tax class ID for the product item, or null\nif no tax class ID is associated with the product item.",
              "type": "string"
            },
            "taxRate": {
              "format": "double",
              "description": "The tax rate applicable to this product line item. For a 10% tax rate, the value is 0.1.",
              "type": "number"
            }
          },
          "type": "object"
        }
      ]
    },
    "dataTypes.ShippingMethod": {
      "description": "Document representing a shipping method.",
      "allOf": [
        {
          "$ref": "#/definitions/CommerceCloudStandards.OpenObject"
        },
        {
          "properties": {
            "description": {
              "description": "The localized description of the shipping method.",
              "example": "Order received within 7-10 business days",
              "type": "string"
            },
            "externalShippingMethod": {
              "description": "The external shipping method.",
              "type": "string"
            },
            "id": {
              "maxLength": 256,
              "description": "The shipping method ID.",
              "example": "001",
              "type": "string"
            },
            "name": {
              "description": "The localized name of the shipping method.",
              "example": "Ground",
              "type": "string"
            },
            "price": {
              "format": "double",
              "description": "The shipping cost total, including shipment level costs,\nproduct level fix, and surcharge costs.",
              "example": 15,
              "type": "number"
            },
            "shippingPromotions": {
              "description": "The array of active customer shipping promotions for this shipping\nmethod. This array can be empty.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/dataTypes.ShippingPromotion"
              }
            }
          },
          "required": [
            "id"
          ],
          "type": "object"
        }
      ]
    },
    "dataTypes.ShippingPromotion": {
      "description": "Document representing a shipping promotion.",
      "allOf": [
        {
          "$ref": "#/definitions/CommerceCloudStandards.OpenObject"
        },
        {
          "properties": {
            "calloutMsg": {
              "description": "The localized callout message of the promotion.",
              "example": "$30 Fixed Shipping Amount Above 150",
              "type": "string"
            },
            "promotionId": {
              "description": "The unique ID of the promotion.",
              "example": "$30FixedShippingAmountAbove150",
              "type": "string"
            },
            "promotionName": {
              "description": "The localized promotion name.",
              "example": "$30 Fixed Shipping Amount Above 150",
              "type": "string"
            }
          },
          "type": "object"
        }
      ]
    },
    "dataTypes.SimpleLink": {
      "description": "Document representing a link to another resource.",
      "$ref": "#/definitions/CommerceCloudStandards.ClosedObject"
    },
    "dataTypes.Status": {
      "description": "Document representing an object status.",
      "allOf": [
        {
          "$ref": "#/definitions/CommerceCloudStandards.ClosedObject"
        },
        {
          "properties": {
            "code": {
              "description": "The status code.",
              "type": "string"
            },
            "message": {
              "description": "The status message.",
              "type": "string"
            },
            "status": {
              "format": "int32",
              "description": "The status.\nFor more information on the status values see Status.OK and Status.ERROR.",
              "type": "integer"
            }
          },
          "type": "object"
        }
      ]
    },
    "dataTypes.Taxes": {
      "description": "Document representing the tax rates and (optionally) amounts for all items in a basket.",
      "allOf": [
        {
          "$ref": "#/definitions/CommerceCloudStandards.ClosedObject"
        },
        {
          "properties": {
            "taxes": {
              "description": "Map containing the TaxItems for the line item ids: Map<LineItemId, TaxItems []>",
              "additionalProperties": {
                "$ref": "#/definitions/dataTypes.TaxItems"
              },
              "type": "string"
            }
          },
          "required": [
            "taxes"
          ],
          "type": "object"
        }
      ]
    },
    "dataTypes.TaxItems": {
      "description": "Taxation for a line item.",
      "properties": {
        "taxItems": {
          "description": "The list of tax items.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/dataTypes.TaxItem"
          }
        }
      },
      "type": "object"
    },
    "dataTypes.TaxItem": {
      "description": "Object representing the taxation.",
      "allOf": [
        {
          "$ref": "#/definitions/CommerceCloudStandards.ClosedObject"
        },
        {
          "properties": {
            "id": {
              "description": "The taxation identifier.",
              "type": "string"
            },
            "rate": {
              "format": "double",
              "description": "The taxation rate.",
              "example": 0.13,
              "type": "number"
            },
            "value": {
              "format": "double",
              "description": "The tax amount. Will be computed if not set.",
              "type": "number"
            }
          },
          "required": [
            "id",
            "rate"
          ],
          "type": "object"
        }
      ]
    },
    "CommerceCloudStandards.ISO.Country": {
      "pattern": "^[A-Z][A-Z]$",
      "description": "A two letter uppercase country code conforming to the [ISO 3166-1](https://www.iso.org/iso-3166-country-codes.html) alpha-2 standard.",
      "example": "US",
      "type": "string"
    },
    "CommerceCloudStandards.ISO.Locale": {
      "description": "A descriptor for a geographical region by both a language and country code. By combining these two, regional differences in a language can be addressed, such as with the request header parameter `Accept-Language` following [RFC 2616](https://tools.ietf.org/html/rfc2616) & [RFC 1766](https://tools.ietf.org/html/rfc1766). This can also just refer to a language code, also RFC 2616/1766 compliant, as a default if there is no specific match for a country. Finally, can also be used to define default behavior if there is no locale specified.",
      "type": "string"
    },
    "CommerceCloudStandards.AdditionalProperties.NoPropertiesAllowed": {
      "description": "This type is intended as an abstract super type that indicates that no additional properties are supported for this type and its sub types. All types that do not support any additional properties should inherit from this type. This type is not allowed to be used directly in any API and should always be extended.",
      "type": "object",
      "additionalProperties": false
    },
    "CommerceCloudStandards.AdditionalProperties.SpecifiedPropertiesAllowed": {
      "description": "This type is intended as an abstract super type that indicates that additional properties are supported for this type and its sub types (unless one of those subtypes inherits from `ClosedObject`). All types that support any additional properties should inherit from this type. This type is not allowed to be used directly in any API and should always be extended.\n\nTo indicate that the properties were defined and expected to be handled as additional properties, they are expected to be prefixed with a `c_`. The type will reject any property that does not fit this pattern, only allowing additional properties beginning with the known prefix.",
      "type": "object",
      "additionalProperties": {
        "title": "Additional Property Support",
        "description": "This type supports additional properties passed along with the defined properties of this API. To indicate that the properties were defined and expected to be handled as additional properties, they are expected to be prefixed with a `c_`. The type will reject any property that does not fit this pattern, only allowing additional properties beginning with the known prefix.",
        "example": "c_faxNumber",
        "type": "string"
      }
    },
    "CommerceCloudStandards.SiteId": {
      "minLength": 1,
      "description": "The identifer of the site that a request is being made in the context of. Attributes might have site specific values, and some objects may only be assigned to specific sites",
      "example": "SiteGenesis",
      "type": "string"
    },
    "CommerceCloudStandards.CountryCode": {
      "$ref": "#/definitions/CommerceCloudStandards.ISO.Country"
    },
    "CommerceCloudStandards.LocaleCode": {
      "$ref": "#/definitions/CommerceCloudStandards.ISO.Locale"
    },
    "CommerceCloudStandards.ClosedObject": {
      "$ref": "#/definitions/CommerceCloudStandards.AdditionalProperties.NoPropertiesAllowed"
    },
    "CommerceCloudStandards.OpenObject": {
      "$ref": "#/definitions/CommerceCloudStandards.AdditionalProperties.SpecifiedPropertiesAllowed"
    }
  },
  "parameters": {
    "trait:CommerceCloudStandards.SiteSpecific:siteId": {
      "in": "query",
      "name": "siteId",
      "required": true,
      "type": "string"
    },
    "trait:OrderTraits.LocaleSpecific:locale": {
      "description": "A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.\nBelow are some valid examples:\n- en-US\n- de-AT\n- de\n- default",
      "in": "query",
      "name": "locale",
      "type": "string"
    }
  },
  "responses": {
    "trait:ApiStandards.RateLimited:429": {
      "description": "The user has sent too many requests in a given amount of time (\"rate limiting\")",
      "headers": {
        "Retry-After": {
          "examples": [
            120
          ],
          "type": "string"
        }
      },
      "schema": {
        "example": {
          "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/too-many-requests",
          "title": "Too Many Requests",
          "detail": "You have performed too many requests in a short period of time."
        },
        "properties": {
          "type": {
            "description": "A URI reference [RFC3986] that identifies the\nproblem type.  This specification encourages that, when\ndereferenced, it provide human-readable documentation for the\nproblem type (e.g., using HTML [W3C.REC-html5-20141028]).  When\nthis member is not present, its value is assumed to be\n\"about:blank\". It accepts relative URIs; this means\nthat they must be resolved relative to the document's base URI, as\nper [RFC3986], Section 5.\n",
            "example": "https://example.com/probs/out-of-credit",
            "type": "string"
          },
          "title": {
            "description": "A short, human-readable summary of the problem\ntype.  It will not change from occurrence to occurrence of the\nproblem, except for purposes of localization.\n",
            "example": "You do not have enough credit.",
            "type": "string"
          },
          "detail": {
            "description": "A human-readable explanation specific to this\noccurrence of the problem.\n",
            "example": "Your current balance is 30, but that costs 50.",
            "type": "string"
          },
          "instance": {
            "description": "A URI reference that identifies the specific\noccurrence of the problem.  It may or may not yield further\ninformation if dereferenced.  It accepts relative URIs; this means\nthat they must be resolved relative to the document's base URI, as\nper [RFC3986], Section 5.\n",
            "example": "/account/12345/msgs/abc",
            "type": "string"
          }
        },
        "required": [
          "type"
        ]
      }
    }
  },
  "paths": {
    "/organizations/{organizationId}/orders": {
      "post": {
        "description": "Submits an order based on a prepared basket. The only considered value from the request body is basketId.",
        "operationId": "createOrder",
        "produces": [
          "application/problem+json"
        ],
        "responses": {
          "200": {
            "description": "Success, the response body contains the submitted order.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": {
                "dataTypes.Order": "Can not resolve examples/order/order-post-response.raml"
              }
            },
            "schema": {
              "$ref": "#/definitions/dataTypes.Order"
            }
          },
          "400": {
            "description": "Possible reasons:\n- a failure during the creation of a gift certificate\nfor a gift certificate item.\n- the basket ID in the request body is null or\nempty.\n- an invalid product item.\n- an option with the specified option ID is\nunknown.\n- an option with the specified option value ID\nis unknown.\n- a product item is not available.\n- the customer assigned to the basket does not\nmatch the verified customer represented by the JWT token.\n- the basket contains flashes.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": {
                "dataTypes.ErrorResponse": {
                  "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/bad-request",
                  "title": "Bad Request",
                  "detail": "Decoding of the property with path '$.failedExample.[1].intProperty' failed because the expected type is 'Integer|Decimal' but the actual type was 'String'."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "The basket with the given basket ID is unknown.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": {
                "dataTypes.ErrorResponse": {
                  "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/basket-not-found",
                  "title": "Basket Not Found",
                  "detail": "No basket with ID '123' could be found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "$ref": "#/responses/trait:ApiStandards.RateLimited:429"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "dataTypes.Basket": "Can not resolve examples/order/order-post-request.raml"
              },
              "$ref": "#/definitions/dataTypes.Basket"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:CommerceCloudStandards.SiteSpecific:siteId"
          },
          {
            "$ref": "#/parameters/trait:OrderTraits.LocaleSpecific:locale"
          }
        ]
      },
      "parameters": [
        {
          "description": "An identifier for the organization the request is being made by.",
          "type": "string",
          "in": "path",
          "name": "organizationId",
          "required": true
        }
      ]
    },
    "/organizations/{organizationId}/orders/{orderNo}": {
      "get": {
        "description": "Gets information for an order.",
        "operationId": "getOrder",
        "produces": [
          "application/problem+json"
        ],
        "responses": {
          "200": {
            "description": "Success, the response body contains the order.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": {
                "dataTypes.Order": "Can not resolve examples/order/order-get-response.raml"
              }
            },
            "schema": {
              "$ref": "#/definitions/dataTypes.Order"
            }
          },
          "404": {
            "description": "The order with the given order number is unknown.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": {
                "dataTypes.ErrorResponse": {
                  "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/basket-not-found",
                  "title": "Basket Not Found",
                  "detail": "No basket with ID '123' could be found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "$ref": "#/responses/trait:ApiStandards.RateLimited:429"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:CommerceCloudStandards.SiteSpecific:siteId"
          },
          {
            "$ref": "#/parameters/trait:OrderTraits.LocaleSpecific:locale"
          }
        ]
      },
      "parameters": [
        {
          "minLength": 1,
          "description": "The order number of the order to be modified.",
          "type": "string",
          "in": "path",
          "name": "orderNo",
          "required": true
        },
        {
          "description": "An identifier for the organization the request is being made by.",
          "type": "string",
          "in": "path",
          "name": "organizationId",
          "required": true
        }
      ]
    },
    "/organizations/{organizationId}/orders/{orderNo}/payment-instruments": {
      "post": {
        "description": "Adds a payment instrument to an order. \n\nDetails:\n\nThe payment instrument is added with the provided details. The payment method must be applicable for the order see GET\n/baskets/{basketId}/payment-methods, if the payment method is 'CREDIT_CARD' a paymentCard must be specified in the request.",
        "operationId": "createPaymentInstrumentForOrder",
        "produces": [
          "application/problem+json"
        ],
        "responses": {
          "200": {
            "description": "Success, the response body contains the order with the added payment instrument.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": {
                "dataTypes.Order": "Can not resolve examples/order/payment-instrument-post-response.raml"
              }
            },
            "schema": {
              "$ref": "#/definitions/dataTypes.Order"
            }
          },
          "400": {
            "description": "Possible reasons:\n- the given order number is invalid.\n- the provided payment method is invalid or not applicable.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": {
                "dataTypes.ErrorResponse": {
                  "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/bad-request",
                  "title": "Bad Request",
                  "detail": "Decoding of the property with path '$.failedExample.[1].intProperty' failed because the expected type is 'Integer|Decimal' but the actual type was 'String'."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "The order with the given order number is unknown.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": {
                "dataTypes.ErrorResponse": {
                  "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/order-not-found",
                  "title": "Order Not Found",
                  "detail": "No order with number '123' was found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "$ref": "#/responses/trait:ApiStandards.RateLimited:429"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "dataTypes.OrderPaymentInstrumentRequest": "Can not resolve examples/order/payment-instrument-post-request.raml"
              },
              "$ref": "#/definitions/dataTypes.OrderPaymentInstrumentRequest"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:CommerceCloudStandards.SiteSpecific:siteId"
          },
          {
            "$ref": "#/parameters/trait:OrderTraits.LocaleSpecific:locale"
          }
        ]
      },
      "parameters": [
        {
          "description": "An identifier for the organization the request is being made by.",
          "type": "string",
          "in": "path",
          "name": "organizationId",
          "required": true
        },
        {
          "minLength": 1,
          "description": "The order number of the order to be modified.",
          "type": "string",
          "in": "path",
          "name": "orderNo",
          "required": true
        }
      ]
    },
    "/organizations/{organizationId}/orders/{orderNo}/payment-instruments/{paymentInstrumentId}": {
      "delete": {
        "description": "Removes a payment instrument of an order.",
        "operationId": "removePaymentInstrumentFromOrder",
        "produces": [
          "application/problem+json"
        ],
        "responses": {
          "200": {
            "description": "Success, the response body contains the order without the deleted payment instrument.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/dataTypes.Order"
            }
          },
          "404": {
            "description": "Possible reasons:\n- The order with the given order number is unknown.\n- The payment instrument with the given order payment\ninstrument ID is unknown.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": {
                "dataTypes.ErrorResponse": {
                  "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/order-not-found",
                  "title": "Order Not Found",
                  "detail": "No order with number '123' was found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "$ref": "#/responses/trait:ApiStandards.RateLimited:429"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:CommerceCloudStandards.SiteSpecific:siteId"
          },
          {
            "$ref": "#/parameters/trait:OrderTraits.LocaleSpecific:locale"
          }
        ]
      },
      "patch": {
        "description": "Updates a payment instrument of an order.\n\nDetails:\n\nThe payment instrument is updated with the provided details. The payment method must be applicable for the\norder see GET /baskets/{basketId}/payment-methods, if the payment method is 'CREDIT_CARD' a\npaymentCard must be specified in the request.",
        "operationId": "updatePaymentInstrumentForOrder",
        "produces": [
          "application/problem+json"
        ],
        "responses": {
          "200": {
            "description": "Success, the response body contains the order with the updated payment instrument.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": {
                "dataTypes.Order": "Can not resolve examples/order/payment-instrument-patch-response.raml"
              }
            },
            "schema": {
              "$ref": "#/definitions/dataTypes.Order"
            }
          },
          "400": {
            "description": "Possible reasons:\n- the basket payment instrument with the given\nID already is permanently masked.\n- the provided payment method is invalid or not applicable.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": {
                "dataTypes.ErrorResponse": {
                  "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/bad-request",
                  "title": "Bad Request",
                  "detail": "Decoding of the property with path '$.failedExample.[1].intProperty' failed because the expected type is 'Integer|Decimal' but the actual type was 'String'."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Possible reasons:\n- The order with the given order number is unknown.\n- The payment instrument with the given payment\ninstrument ID is unknown.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": {
                "dataTypes.ErrorResponse": {
                  "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/order-not-found",
                  "title": "Order Not Found",
                  "detail": "No order with number '123' was found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "$ref": "#/responses/trait:ApiStandards.RateLimited:429"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "dataTypes.Order": "Can not resolve examples/order/payment-instrument-patch-request.raml"
              },
              "$ref": "#/definitions/dataTypes.OrderPaymentInstrumentRequest"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:CommerceCloudStandards.SiteSpecific:siteId"
          },
          {
            "$ref": "#/parameters/trait:OrderTraits.LocaleSpecific:locale"
          }
        ]
      },
      "parameters": [
        {
          "minLength": 1,
          "description": "The ID of the payment instrument to be updated.",
          "type": "string",
          "in": "path",
          "name": "paymentInstrumentId",
          "required": true
        },
        {
          "description": "An identifier for the organization the request is being made by.",
          "type": "string",
          "in": "path",
          "name": "organizationId",
          "required": true
        },
        {
          "minLength": 1,
          "description": "The order number of the order to be modified.",
          "type": "string",
          "in": "path",
          "name": "orderNo",
          "required": true
        }
      ]
    },
    "/organizations/{organizationId}/orders/{orderNo}/payment-methods": {
      "get": {
        "description": "Gets the applicable payment methods for an existing order considering the open payment amount only.",
        "operationId": "getPaymentMethodsForOrder",
        "produces": [
          "application/problem+json"
        ],
        "responses": {
          "200": {
            "description": "Success, the response body contains the applicable payment methods for the order.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": {
                "dataTypes.PaymentMethodResult": "Can not resolve examples/order/payment-methods-get-response.raml"
              }
            },
            "schema": {
              "$ref": "#/definitions/dataTypes.PaymentMethodResult"
            }
          },
          "400": {
            "description": "The customer assigned to the order does not\nmatch the verified customer represented by the JSON Web Token (JWT).",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": {
                "dataTypes.ErrorResponse": {
                  "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/bad-request",
                  "title": "Bad Request",
                  "detail": "The customer is invalid."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "The order with the given order number is unknown.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": {
                "dataTypes.ErrorResponse": {
                  "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/order-not-found",
                  "title": "Order Not Found",
                  "detail": "No order with number '123' was found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "$ref": "#/responses/trait:ApiStandards.RateLimited:429"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:CommerceCloudStandards.SiteSpecific:siteId"
          },
          {
            "$ref": "#/parameters/trait:OrderTraits.LocaleSpecific:locale"
          }
        ]
      },
      "parameters": [
        {
          "description": "An identifier for the organization the request is being made by.",
          "type": "string",
          "in": "path",
          "name": "organizationId",
          "required": true
        },
        {
          "minLength": 1,
          "description": "The order number of the order to be modified.",
          "type": "string",
          "in": "path",
          "name": "orderNo",
          "required": true
        }
      ]
    },
    "/organizations/{organizationId}/orders/{orderNo}/taxes": {
      "get": {
        "description": "This method gives you the external taxation data of the order transferred from the basket during \norder creation. This endpoint can be called only if external taxation was used. See POST /baskets \nfor more information.         ",
        "operationId": "getTaxesFromOrder",
        "produces": [
          "application/problem+json"
        ],
        "responses": {
          "200": {
            "description": "Success, the response body contains the external taxation from all items from the referenced \norder.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": {
                "dataTypes.Taxes": "Can not resolve examples/order/order-tax-get-response.raml"
              }
            },
            "schema": {
              "$ref": "#/definitions/dataTypes.Taxes"
            }
          },
          "404": {
            "description": "The order with the given order number is unknown.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": {
                "dataTypes.ErrorResponse": {
                  "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/order-not-found",
                  "title": "Order Not Found",
                  "detail": "No order with number '123' was found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "Possible Reasons:\n- The tax mode of the referenced basket is not set to EXTERNAL. \n- Salesforce Commerce API Hook Execution is enabled.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": {
                "dataTypes.InvalidTaxMode": {
                  "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/invalid-tax-mode",
                  "title": "Invalid Tax Mode",
                  "detail": "Basket with ID 'a10ff320829cb0eef93ca5310a' has invalid tax mode."
                },
                "dataTypes.UnsupportedRequest": {
                  "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/unsupported-request-if-scapi-hooks-enabled",
                  "title": "Unsupported Request If SCAPI Hooks Enabled",
                  "detail": "You can't call this endpoint because Salesforce Commerce API hook execution is enabled."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "$ref": "#/responses/trait:ApiStandards.RateLimited:429"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:CommerceCloudStandards.SiteSpecific:siteId"
          }
        ],
        "security": [
          {
            "CommerceCloudStandards.AmOAuth2": []
          }
        ]
      },
      "parameters": [
        {
          "description": "An identifier for the organization the request is being made by.",
          "type": "string",
          "in": "path",
          "name": "organizationId",
          "required": true
        },
        {
          "minLength": 1,
          "description": "The order number of the order to be modified.",
          "type": "string",
          "in": "path",
          "name": "orderNo",
          "required": true
        }
      ]
    }
  }
}