{
  "swagger": "2.0",
  "info": {
    "title": "Shopper Customers",
    "description": "ðŸš¨ **DEPRECATION NOTICE**\n\nTo enhance the security and availability of Salesforce services, the `/customers/actions/login` and `/trusted-system/actions/login` endpoints are now **deprecated**, and **we plan to remove them in mid-2023**. These endpoints are not available to new customers, and we discourage existing customers from using them. Instead, we strongly recommend using the endpoints of the [Shopper Login and API Access Service](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-login:Summary) (SLAS) because they meet a higher standard for security and availability. All other Shopper Customer endpoints are still recommended for use.\n\n---\n\n# API Overview\n\nThe Shopper Customers API enables you to develop functionality that lets customers log in, and manage their profiles and product lists. Profile management includes ability for shoppers to add or modify addresses and payment methods, and add or modify products to wishlists or favorites. Commerce Cloud provides a rich set of Authentication APIs that include logging in guest shoppers, registered shoppers, agents on behalf of customers and a trusted system authentication on behalf of customers. In all authentication scenarios involving customers, a JSON Web Token (JWT) is generated in Commerce Cloud. Using the JWT, customers can access other Shopper API resources like Orders and Baskets. The application must refresh the JWT every 30 minutes to save the shopper activity (for example, retain products in a shopper's cart) for prolonged periods of time.\n\n## Authentication & Authorization\n\nThe client requesting the customer information must have access to the Customer and Product List resources. The API requests pass a system-to-system bearer token in the header of the request. For the trusted system API, the trusted client must first authenticate against Account manager to log in on behalf of a customer.\n\n## Register a New Customer\n\nIn this use case, a customer who is browsing on a commerce shopping app built using B2C Commerce APIs would like to create a customer profile, so that they can track their order when logged in on the next visit.\n\nThe API flow is shown in the following diagram:\n\n![b2c-commerce-shopper-customers-screenshot-1.png](https://resources.docs.salesforce.com/rel1/doc/en-us/static/misc/b2c-commerce-shopper-customers-screenshot-1.png)\n\n1. The shopper opens the shopping app.\n2. Request an access token from SLAS. For details, see the guest user flows for [public clients](https://developer.salesforce.com/docs/commerce/commerce-api/guide/slas-public-client.html#guest-user) and [private clients](https://developer.salesforce.com/docs/commerce/commerce-api/guide/slas-private-client.html#guest-user) in the SLAS guides.\n3. The SLAS API responds with the shopper access token (JWT).\n4. The shopper adds a product to their basket.\n5. Use the Shopper Baskets API to create a basket. The shopper JWT from SLAS is supplied in the authorization header.\n6. Save the basket with a registered user customer ID (even though the shopper is still a guest). The shopper JWT from SLAS is supplied in the authorization header.\n7. The shopper creates a profile.\n8. Use the Shopper Customers API to register the customer.\n\n## Authenticate a Trusted System on Behalf of a Customer\n\nIn this cross-cloud use case, a Experience Cloud user places an order on Commerce Cloud from the Experience Cloud using the platform APIs. The Experience Cloud app is a trusted system that has a trusted relationship with Commerce Cloud using the OAuth client credentials grant against the Commerce Cloud Account Manager. The Experience Cloud user logs in with a redirect to Salesforce IDM and after successful login, the client application is able to call B2C Commerce APIs on behalf of the customer. Commerce Cloud returns a JWT for the Experience Cloud user and the Experience Cloud user is able to place orders on Commerce Cloud.\n\nThe API flow is shown in the following diagram:\n\n![b2c-commerce-shopper-customers-screenshot-2.png](https://resources.docs.salesforce.com/rel1/doc/en-us/static/misc/b2c-commerce-shopper-customers-screenshot-2.png)\n\n## Reset Customer Password\n\nIn this use case, a shopper who is browsing on a commerce shopping app, built using B2C Commerce APIs, requests to reset their password. When the shopper requests their password to be reset, the app first creates a password reset token using the shopperâ€™s login ID, and an account manager token (obtained using the client credentials grant). After the app has the password reset token, the app can prompt the shopper for new password. Any app-level customization, such as sending a password reset email, can be done at this step. Finally, the app calls the reset endpoint to reset the customerâ€™s password.\n\n![b2c-commerce-shopper-customers-screenshot-3.png](https://resources.docs.salesforce.com/rel1/doc/en-us/static/misc/b2c-commerce-shopper-customers-screenshot-3.png)\n",
    "version": "v1"
  },
  "x-basePath": "{shortCode}.api.commercecloud.salesforce.com/customer/shopper-customers/{version}",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "securityDefinitions": {
    "CommerceCloudStandards.AmOAuth2": {
      "description": "AccountManager OAuth 2.0 bearer token Authentication.\n",
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https://account.demandware.com/dwsso/oauth2/authorize",
      "tokenUrl": "https://account.demandware.com/dwsso/oauth2/access_token",
      "scopes": {}
    }
  },
  "definitions": {
    "AuthRequest": {
      "description": "Document representing the authentication request type.",
      "properties": {
        "type": {
          "description": "Type of authentication request: guest, credentials or refresh",
          "example": "credentials",
          "enum": [
            "guest",
            "credentials",
            "refresh"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "Basket": {
      "description": "Document representing a basket.",
      "properties": {
        "adjustedMerchandizeTotalTax": {
          "format": "double",
          "description": "The tax after applying discounts in the purchase currency.\n\nAdjusted merchandize prices represent the sum of product prices before\nservices (such as shipping) have been added, but after adjustments from\npromotions have been added.",
          "example": 20.3,
          "type": "number"
        },
        "adjustedShippingTotalTax": {
          "format": "double",
          "description": "The tax of all shipping line items of the line item container, after\n shipping adjustments have been applied.",
          "example": 15.5,
          "type": "number"
        },
        "agentBasket": {
          "description": "Is the basket created by an agent?",
          "example": false,
          "type": "boolean"
        },
        "basketId": {
          "description": "The unique identifier for the basket.",
          "example": "MyBasket",
          "type": "string"
        },
        "billingAddress": {
          "description": "The billing address. This property is part of basket checkout information only.",
          "$ref": "#/definitions/OrderAddress"
        },
        "bonusDiscountLineItems": {
          "description": "The bonus discount line items of the line item container.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BonusDiscountLineItem"
          }
        },
        "channelType": {
          "description": "The sales channel for the order.",
          "enum": [
            "storefront",
            "callcenter",
            "marketplace",
            "dss",
            "store",
            "pinterest",
            "twitter",
            "facebookads",
            "subscriptions",
            "onlinereservation",
            "customerservicecenter",
            "instagramcommerce"
          ],
          "type": "string"
        },
        "couponItems": {
          "description": "The sorted array of coupon items. This array can be empty.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CouponItem"
          }
        },
        "creationDate": {
          "description": "Returns the value of attribute 'creationDate'.",
          "type": "string",
          "format": "date-time"
        },
        "currency": {
          "description": "The ISO 4217 mnemonic code of the currency.",
          "example": "USD",
          "type": "string"
        },
        "customerInfo": {
          "description": "The customer information for logged in customers. This property is part of basket checkout information only.",
          "$ref": "#/definitions/CustomerInfo"
        },
        "giftCertificateItems": {
          "description": "The sorted array of gift certificate line items. This array can be empty.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/GiftCertificateItem"
          }
        },
        "inventoryReservationExpiry": {
          "description": "Date on which the inventory reservation for this basket expires.",
          "type": "string",
          "format": "date-time"
        },
        "lastModified": {
          "description": "Returns the value of attribute 'lastModified'.",
          "type": "string",
          "format": "date-time"
        },
        "merchandizeTotalTax": {
          "format": "double",
          "description": "The total tax in the purchase currency.\n\n Merchandize total prices represent the sum of product prices before\n services (such as shipping) or adjustments from promotions have\n been added.",
          "example": 10,
          "type": "number"
        },
        "notes": {
          "description": "The notes for the line item container.",
          "$ref": "#/definitions/SimpleLink"
        },
        "orderPriceAdjustments": {
          "description": "The array of order level price adjustments. This array can be empty.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PriceAdjustment"
          }
        },
        "orderTotal": {
          "format": "double",
          "description": "The total price of the order, including products, shipping, and tax. This property is part of basket checkout information only.",
          "type": "number"
        },
        "paymentInstruments": {
          "description": "The payment instruments list for the order.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderPaymentInstrument"
          }
        },
        "productItems": {
          "description": "The sorted array of product items (up to a maximum of 50 items). This array can be empty.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductItem"
          }
        },
        "productSubTotal": {
          "format": "double",
          "description": "The total price of all product items after all product discounts.\n\nDepending on taxation policy, the returned price is net or gross.",
          "example": 150.99,
          "type": "number"
        },
        "productTotal": {
          "format": "double",
          "description": "The total price of all product items after all product and order discounts.\n\nDepending on taxation policy, the returned price is net or gross.",
          "example": 99.99,
          "type": "number"
        },
        "shipments": {
          "description": "The array of shipments. This property is part of basket checkout information only.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Shipment"
          }
        },
        "shippingItems": {
          "description": "The sorted array of shipping items. This array can be empty.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ShippingItem"
          }
        },
        "shippingTotal": {
          "format": "double",
          "description": "The total shipping price of the order after all shipping discounts. Excludes tax if the taxation policy is net. Includes\ntax if the taxation policy is gross. This property is part of the basket checkout information only.",
          "example": 12.99,
          "type": "number"
        },
        "shippingTotalTax": {
          "format": "double",
          "description": "The tax of all shipping line items of the line item container, before\nshipping adjustments have been applied.",
          "example": 2.99,
          "type": "number"
        },
        "sourceCode": {
          "description": "Gets the source code assigned to this basket.",
          "type": "string"
        },
        "taxTotal": {
          "format": "double",
          "description": "The total tax amount of the order. This property is part of basket checkout information only.",
          "example": 5.99,
          "type": "number"
        },
        "taxation": {
          "description": "The taxation the line item container is based on.",
          "example": "net",
          "enum": [
            "gross",
            "net"
          ],
          "type": "string"
        }
      },
      "required": [
        "adjustedMerchandizeTotalTax",
        "adjustedShippingTotalTax",
        "agentBasket",
        "basketId",
        "channelType",
        "creationDate",
        "currency",
        "customerInfo",
        "lastModified",
        "merchandizeTotalTax",
        "notes",
        "orderTotal",
        "productSubTotal",
        "productTotal",
        "shipments",
        "shippingItems",
        "shippingTotal",
        "shippingTotalTax",
        "taxTotal",
        "taxation"
      ],
      "type": "object"
    },
    "BasketsResult": {
      "description": "Result document containing an array of baskets.",
      "properties": {
        "baskets": {
          "description": "The list of baskets for a customer.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Basket"
          }
        },
        "total": {
          "format": "int32",
          "description": "The total number of baskets.",
          "example": 10,
          "type": "integer"
        }
      },
      "required": [
        "total"
      ],
      "type": "object"
    },
    "BonusDiscountLineItem": {
      "description": "Document representing a bonus discount line item.",
      "properties": {
        "bonusProducts": {
          "description": "The list of links to the bonus products the customer can choose from.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductDetailsLink"
          }
        },
        "couponCode": {
          "description": "The coupon code that triggered the promotion, if applicable.",
          "example": "BOGO",
          "type": "string"
        },
        "id": {
          "description": "The ID of the line item.",
          "example": "45239",
          "type": "string"
        },
        "maxBonusItems": {
          "format": "int32",
          "description": "The maximum number of bonus items the user can select for this promotion.",
          "example": 1,
          "type": "integer"
        },
        "promotionId": {
          "description": "The ID of the promotion which triggered the creation of the line item.",
          "example": "summer-sale",
          "type": "string"
        }
      },
      "required": [
        "bonusProducts",
        "couponCode",
        "id",
        "maxBonusItems",
        "promotionId"
      ],
      "type": "object"
    },
    "BundledProduct": {
      "description": "Document representing a bundled product within a product bundle.",
      "properties": {
        "id": {
          "example": "awesome-bundle",
          "type": "string"
        },
        "product": {
          "description": "The product being bundled.",
          "$ref": "#/definitions/Product"
        },
        "quantity": {
          "format": "double",
          "description": "For the product being bundled, the quantity added to the bundle.",
          "type": "number"
        }
      },
      "required": [
        "id",
        "product",
        "quantity"
      ],
      "type": "object"
    },
    "CouponItem": {
      "description": "Document representing a coupon item.",
      "properties": {
        "code": {
          "maxLength": 256,
          "description": "The coupon code.",
          "example": "BOGO",
          "type": "string"
        },
        "couponItemId": {
          "description": "The coupon item ID.",
          "example": "934kkas",
          "type": "string"
        },
        "statusCode": {
          "description": "The status of the coupon item.",
          "example": "applied",
          "enum": [
            "coupon_code_already_in_basket",
            "coupon_code_already_redeemed",
            "coupon_code_unknown",
            "coupon_disabled",
            "redemption_limit_exceeded",
            "customer_redemption_limit_exceeded",
            "timeframe_redemption_limit_exceeded",
            "no_active_promotion",
            "coupon_already_in_basket",
            "no_applicable_promotion",
            "applied",
            "adhoc"
          ],
          "type": "string"
        },
        "valid": {
          "description": "A flag indicating whether the coupon item is valid. A coupon line item is valid if\nthe status code is `applied` or `no_applicable_promotion`.",
          "example": true,
          "type": "boolean"
        }
      },
      "required": [
        "code"
      ],
      "type": "object"
    },
    "Customer": {
      "description": "Person or entity who shops on Commerce Cloud storefronts by creating a shopper account in Commerce Cloud.",
      "properties": {
        "addresses": {
          "description": "The customer's addresses.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomerAddress"
          }
        },
        "authType": {
          "description": "The customer's authorization type (indicates whether the customer is a guest\nor a registered customer).",
          "example": "registered",
          "enum": [
            "guest",
            "registered"
          ],
          "type": "string"
        },
        "birthday": {
          "description": "The customer's birthday.",
          "type": "string",
          "format": "date"
        },
        "companyName": {
          "maxLength": 256,
          "description": "The customer's company name.",
          "example": "Acme",
          "type": "string"
        },
        "creationDate": {
          "description": "Returns the value of attribute 'creationDate'.",
          "example": "9999-12-31T00:00:00.0Z",
          "type": "string",
          "format": "date-time"
        },
        "customerId": {
          "maxLength": 28,
          "description": "The customer's number (ID). Both registered and guest customers have a\n customer ID.",
          "example": "dfuisydifu2342usyf",
          "type": "string"
        },
        "customerNo": {
          "maxLength": 100,
          "description": "The customer's number (ID). Only a registered customer has a customer\n number.",
          "example": "D0000123",
          "type": "string"
        },
        "email": {
          "maxLength": 256,
          "description": "The customer's email address.",
          "example": "johnsmith@email.com",
          "type": "string"
        },
        "enabled": {
          "description": "A flag indicating whether this customer is enabled and can log in.",
          "example": true,
          "type": "boolean"
        },
        "fax": {
          "maxLength": 32,
          "description": "The customer's fax number. The length is restricted to 32 characters.",
          "example": "555-555-5555",
          "type": "string"
        },
        "firstName": {
          "maxLength": 256,
          "description": "The customer's first name.",
          "example": "John",
          "type": "string"
        },
        "gender": {
          "format": "int32",
          "description": "The customer's gender.",
          "example": 1,
          "type": "integer"
        },
        "jobTitle": {
          "maxLength": 256,
          "description": "The customer's job title.",
          "example": "Supervisor",
          "type": "string"
        },
        "lastLoginTime": {
          "description": "The time when the customer last logged in.",
          "example": "9999-12-31T00:00:00.0Z",
          "type": "string",
          "format": "date-time"
        },
        "lastModified": {
          "description": "Returns the value of attribute 'lastModified'.",
          "example": "9999-12-31T00:00:00.0Z",
          "type": "string",
          "format": "date-time"
        },
        "lastName": {
          "maxLength": 256,
          "description": "The customer's last name.",
          "example": "Smith",
          "type": "string"
        },
        "lastVisitTime": {
          "description": "The time when the customer last visited.",
          "example": "9999-12-31T00:00:00.0Z",
          "type": "string",
          "format": "date-time"
        },
        "login": {
          "maxLength": 256,
          "description": "The customer's login.",
          "example": "jsmith",
          "type": "string"
        },
        "note": {
          "description": "The customer's note.",
          "example": "customer-note",
          "type": "string"
        },
        "paymentInstruments": {
          "description": "The customer's payment instruments.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomerPaymentInstrument"
          }
        },
        "phoneBusiness": {
          "maxLength": 32,
          "description": "The customer's business phone number.",
          "example": "555-555-5555",
          "type": "string"
        },
        "phoneHome": {
          "maxLength": 32,
          "description": "The customer's home phone number.",
          "example": "555-555-5555",
          "type": "string"
        },
        "phoneMobile": {
          "maxLength": 32,
          "description": "The customer's mobile phone number.",
          "example": "555-555-5555",
          "type": "string"
        },
        "preferredLocale": {
          "description": "The customer's preferred locale.",
          "example": "us-en",
          "type": "string"
        },
        "previousLoginTime": {
          "description": "The time when the customer previously logged in.",
          "example": "9999-12-31T00:00:00.0Z",
          "type": "string",
          "format": "date-time"
        },
        "previousVisitTime": {
          "description": "The time when the customer last visited the store.",
          "example": "9999-12-31T00:00:00.0Z",
          "type": "string",
          "format": "date-time"
        },
        "salutation": {
          "maxLength": 256,
          "description": "The salutation to use for the customer.",
          "example": "Mr.",
          "type": "string"
        },
        "secondName": {
          "maxLength": 256,
          "description": "The customer's second name.",
          "example": "Smith",
          "type": "string"
        },
        "suffix": {
          "maxLength": 256,
          "description": "The customer's suffix (for example, \"Jr.\" or \"Sr.\").",
          "example": "Jr.",
          "type": "string"
        },
        "title": {
          "maxLength": 256,
          "description": "The customer's title (for example, \"Mrs\" or \"Mr\").",
          "example": "Mr.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "CustomerAddress": {
      "description": "Address that is associated with a shopper (billing, shipping, mailing, and so on).",
      "properties": {
        "address1": {
          "maxLength": 256,
          "description": "The first address.",
          "example": "10 Presidential Way",
          "type": "string"
        },
        "address2": {
          "maxLength": 256,
          "description": "The second address.",
          "example": "Apt-616",
          "type": "string"
        },
        "addressId": {
          "maxLength": 256,
          "description": "The ID of the address as specified by account owner.",
          "example": "Home",
          "type": "string"
        },
        "city": {
          "maxLength": 256,
          "description": "The city.",
          "example": "New York",
          "type": "string"
        },
        "companyName": {
          "maxLength": 256,
          "description": "The company name.",
          "example": "Acme Inc",
          "type": "string"
        },
        "countryCode": {
          "pattern": "^([A-Z][A-Z])$",
          "maxLength": 2,
          "description": "The two-letter ISO 3166-1 (Alpha-2) country code.",
          "example": "US",
          "type": "string"
        },
        "creationDate": {
          "description": "Returns the value of attribute 'creationDate'.",
          "example": "9999-12-31T17:12:56.670Z",
          "type": "string",
          "format": "date-time"
        },
        "firstName": {
          "maxLength": 256,
          "description": "The first name.",
          "example": "John",
          "type": "string"
        },
        "fullName": {
          "maxLength": 256,
          "description": "The full name.",
          "example": "John Smith",
          "type": "string"
        },
        "jobTitle": {
          "maxLength": 256,
          "description": "The job title.",
          "example": "Supervisor",
          "type": "string"
        },
        "lastModified": {
          "description": "Returns the value of attribute 'lastModified'.",
          "example": "9999-12-31T17:12:56.670Z",
          "type": "string",
          "format": "date-time"
        },
        "lastName": {
          "maxLength": 256,
          "description": "The last name.",
          "example": "Smith",
          "type": "string"
        },
        "phone": {
          "maxLength": 32,
          "description": "The phone number.",
          "example": "555-555-5555",
          "type": "string"
        },
        "postBox": {
          "maxLength": 256,
          "description": "The post box.",
          "example": "12345",
          "type": "string"
        },
        "postalCode": {
          "maxLength": 256,
          "description": "The postal code.",
          "example": "N5",
          "type": "string"
        },
        "preferred": {
          "description": "The preferred attribute.",
          "example": true,
          "type": "boolean"
        },
        "salutation": {
          "maxLength": 256,
          "description": "The salutation.",
          "example": "Sir",
          "type": "string"
        },
        "secondName": {
          "maxLength": 256,
          "description": "The second name.",
          "example": "Smith",
          "type": "string"
        },
        "stateCode": {
          "maxLength": 256,
          "description": "The state code.",
          "example": "UT",
          "type": "string"
        },
        "suffix": {
          "maxLength": 256,
          "description": "The suffix.",
          "example": "Sr.",
          "type": "string"
        },
        "suite": {
          "maxLength": 32,
          "description": "The suite.",
          "example": "100",
          "type": "string"
        },
        "title": {
          "maxLength": 256,
          "description": "The title.",
          "example": "Supervisor",
          "type": "string"
        }
      },
      "required": [
        "addressId",
        "countryCode",
        "lastName"
      ],
      "type": "object"
    },
    "CustomerAddressInfo": {
      "description": "Result document of product list addresses.",
      "properties": {
        "addressId": {
          "maxLength": 256,
          "description": "The ID of the address.",
          "example": "Home",
          "type": "string"
        },
        "title": {
          "description": "The link title.",
          "example": "title",
          "type": "string"
        }
      },
      "required": [
        "addressId",
        "title"
      ],
      "type": "object"
    },
    "CustomerInfo": {
      "description": "Document representing information used to identify a customer.",
      "properties": {
        "customerId": {
          "maxLength": 100,
          "description": "The customer's number (ID).",
          "example": "3034s93875939348394hk3348",
          "type": "string"
        },
        "customerName": {
          "description": "The customer's name.",
          "example": "John Smith",
          "type": "string"
        },
        "customerNo": {
          "maxLength": 100,
          "description": "The customer's number (ID).",
          "example": "123",
          "type": "string"
        },
        "email": {
          "description": "The customer's email address.",
          "example": "jsmith@email.com",
          "type": "string"
        }
      },
      "required": [
        "customerNo",
        "email"
      ],
      "type": "object"
    },
    "CustomerOrderResult": {
      "description": "Result document containing an array of customer orders.",
      "properties": {
        "limit": {
          "format": "int32",
          "description": "The number of returned documents.",
          "example": 3,
          "type": "integer"
        },
        "data": {
          "description": "The array of customer order documents.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Order"
          }
        },
        "offset": {
          "minimum": 0,
          "format": "int32",
          "description": "The zero-based index of the first search hit to include in the result.",
          "example": 0,
          "type": "integer"
        },
        "total": {
          "format": "int32",
          "description": "The total number of documents.",
          "example": 3,
          "type": "integer"
        }
      },
      "required": [
        "limit",
        "data",
        "offset",
        "total"
      ],
      "type": "object"
    },
    "CustomerPaymentCardRequest": {
      "description": "Document representing a customer payment card request.",
      "properties": {
        "cardType": {
          "maxLength": 256,
          "description": "The payment card type (for example, \"Visa\").",
          "example": "Visa",
          "type": "string"
        },
        "creditCardToken": {
          "description": "A credit card token. If a credit card is tokenized, the token can be used to look up the credit card data at the\ntoken store.",
          "example": "hk2jh293484",
          "type": "string"
        },
        "expirationMonth": {
          "format": "int32",
          "description": "The month the payment card expires.",
          "example": 11,
          "type": "integer"
        },
        "expirationYear": {
          "format": "int32",
          "description": "The year the payment card expires.",
          "example": 9999,
          "type": "integer"
        },
        "holder": {
          "maxLength": 256,
          "description": "The payment card holder.",
          "example": "John Smith",
          "type": "string"
        },
        "issueNumber": {
          "maxLength": 256,
          "description": "The payment card issue number.",
          "example": "92743927",
          "type": "string"
        },
        "number": {
          "maxLength": 4000,
          "description": "The payment card number.",
          "example": "4454852652415965",
          "type": "string"
        },
        "validFromMonth": {
          "minimum": 1,
          "maximum": 12,
          "format": "int32",
          "description": "The month the payment card valid is from.",
          "example": 11,
          "type": "integer"
        },
        "validFromYear": {
          "format": "int32",
          "description": "The year the payment card is valid from.",
          "example": 23,
          "type": "integer"
        }
      },
      "required": [
        "cardType",
        "expirationMonth",
        "expirationYear",
        "holder",
        "issueNumber",
        "number",
        "validFromMonth",
        "validFromYear"
      ],
      "type": "object"
    },
    "CustomerPaymentInstrument": {
      "description": "Method for customers to pay for the goods purchased on an ecommerce site. Payment methods include - credit card, debit card, bank account, and gift card.",
      "properties": {
        "bankRoutingNumber": {
          "maxLength": 256,
          "description": "The bank routing number.",
          "example": "KDSJHKS",
          "type": "string"
        },
        "creationDate": {
          "description": "Returns the value of attribute 'creationDate'.",
          "example": "9999-12-31T00:00:00.0Z",
          "type": "string",
          "format": "date-time"
        },
        "lastModified": {
          "description": "Returns the value of attribute 'lastModified'.",
          "example": "9999-12-31T00:00:00.0Z",
          "type": "string",
          "format": "date-time"
        },
        "maskedGiftCertificateCode": {
          "description": "The masked gift certificate code.",
          "example": "gift-code",
          "type": "string"
        },
        "paymentBankAccount": {
          "description": "The payment bank account.",
          "$ref": "#/definitions/PaymentBankAccount"
        },
        "paymentCard": {
          "description": "The payment card.",
          "$ref": "#/definitions/PaymentCard"
        },
        "paymentInstrumentId": {
          "description": "The payment instrument ID.",
          "example": "Personal",
          "type": "string"
        },
        "paymentMethodId": {
          "maxLength": 256,
          "description": "The payment method ID. Optional if a customer payment instrument ID is specified.",
          "example": "Personal",
          "type": "string"
        }
      },
      "required": [
        "paymentBankAccount",
        "paymentCard",
        "paymentInstrumentId",
        "paymentMethodId"
      ],
      "type": "object"
    },
    "CustomerPaymentInstrumentRequest": {
      "description": "Document representing a customer payment instrument request.",
      "properties": {
        "bankRoutingNumber": {
          "maxLength": 256,
          "description": "The bank routing number.",
          "example": "AB123",
          "type": "string"
        },
        "giftCertificateCode": {
          "maxLength": 256,
          "description": "The gift certificate code.",
          "example": "gift-code",
          "type": "string"
        },
        "paymentBankAccount": {
          "description": "The payment bank account request data.",
          "$ref": "#/definitions/PaymentBankAccountRequest"
        },
        "paymentCard": {
          "description": "The customer payment card.",
          "$ref": "#/definitions/CustomerPaymentCardRequest"
        },
        "paymentMethodId": {
          "maxLength": 256,
          "description": "The payment method ID. Optional if a customer payment instrument ID is specified.",
          "example": "Credit Card",
          "type": "string"
        }
      },
      "required": [
        "bankRoutingNumber",
        "giftCertificateCode",
        "paymentCard",
        "paymentMethodId"
      ],
      "type": "object"
    },
    "Discount": {
      "description": "Document representing a discount that was applied to the price.",
      "properties": {
        "amount": {
          "format": "double",
          "description": "The amount that is used with the amount and fixed price types.",
          "example": 30.25,
          "type": "number"
        },
        "percentage": {
          "format": "double",
          "description": "The percentage that is used with percentage types.",
          "example": 10.5,
          "type": "number"
        },
        "priceBookId": {
          "description": "The price book ID that is used with some types.",
          "example": "sale-pricebook",
          "type": "string"
        },
        "type": {
          "description": "The type of discount.",
          "example": "percentage",
          "enum": [
            "percentage",
            "fixed_price",
            "amount",
            "free",
            "price_book_price",
            "bonus",
            "total_fixed_price",
            "bonus_choice",
            "percentage_off_options"
          ],
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "CustomerProductList": {
      "description": "Document representing a customer product list.",
      "properties": {
        "coRegistrant": {
          "description": "The coregistrant of this product list.",
          "$ref": "#/definitions/CustomerProductListRegistrant"
        },
        "creationDate": {
          "description": "Returns the value of attribute 'creationDate'.",
          "example": "9999-12-31T00:00:00.0Z",
          "type": "string",
          "format": "date-time"
        },
        "currentShippingAddressInfo": {
          "description": "The resource link to the current shipping address of this customer product list.",
          "$ref": "#/definitions/CustomerAddressInfo"
        },
        "customerProductListItems": {
          "description": "The list of customer product list items.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomerProductListItem"
          }
        },
        "description": {
          "description": "The description of this product list.",
          "example": "My Product List",
          "type": "string"
        },
        "event": {
          "description": "The event of this product list.",
          "$ref": "#/definitions/ProductListEvent"
        },
        "id": {
          "minLength": 1,
          "description": "The ID of this product list.",
          "example": "MyList",
          "type": "string"
        },
        "lastModified": {
          "description": "Returns the value of attribute 'lastModified'.",
          "example": "9999-12-31T00:00:00.0Z",
          "type": "string",
          "format": "date-time"
        },
        "name": {
          "description": "The name of this product list.",
          "example": "Danny's Product List",
          "type": "string"
        },
        "postEventShippingAddressInfo": {
          "description": "The resource link to the post event shipping address of this customer product list.",
          "$ref": "#/definitions/CustomerAddressInfo"
        },
        "productListShippingAddress": {
          "description": "The abbreviated shipping address of this product list representing what an anonymous user can see.",
          "$ref": "#/definitions/ProductListShippingAddress"
        },
        "public": {
          "description": "Indicates whether the owner made this product list available for access by other customers.",
          "example": true,
          "type": "boolean"
        },
        "registrant": {
          "description": "The registrant of this product list.",
          "$ref": "#/definitions/CustomerProductListRegistrant"
        },
        "shippingAddressInfo": {
          "description": "The resource link to the shipping address of this customer product list.",
          "$ref": "#/definitions/CustomerAddressInfo"
        },
        "type": {
          "description": "The type of the product list.",
          "example": "wish_list",
          "enum": [
            "wish_list",
            "gift_registry",
            "shopping_list",
            "custom_1",
            "custom_2",
            "custom_3"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "CustomerProductListItem": {
      "description": "Document representing a customer product list item.",
      "properties": {
        "id": {
          "description": "The ID of this product list item.",
          "example": "Main Product",
          "type": "string"
        },
        "priority": {
          "format": "int32",
          "description": "The priority of the item.",
          "example": 1,
          "type": "integer"
        },
        "product": {
          "description": "The product item.",
          "$ref": "#/definitions/Product"
        },
        "productId": {
          "description": "The ID of the product.",
          "example": "Toaster",
          "type": "string"
        },
        "public": {
          "description": "Is this product list item available for access by other customers?",
          "example": true,
          "type": "boolean"
        },
        "purchasedQuantity": {
          "format": "double",
          "description": "The quantity of products already purchased.",
          "example": 1,
          "type": "number"
        },
        "quantity": {
          "minimum": 0,
          "format": "double",
          "description": "The quantity of this product list item.",
          "example": 2,
          "type": "number"
        },
        "type": {
          "description": "The type of the item.",
          "example": "product",
          "enum": [
            "product",
            "gift_certificate"
          ],
          "type": "string"
        }
      },
      "required": [
        "priority",
        "public",
        "quantity"
      ],
      "type": "object"
    },
    "CustomerProductListItemPurchase": {
      "description": "Document representing a customer product list item purchase.",
      "properties": {
        "id": {
          "description": "The ID of this purchase.",
          "example": "myId",
          "type": "string"
        },
        "orderNo": {
          "description": "The order number of this purchase.",
          "example": "28234",
          "type": "string"
        },
        "productListItemId": {
          "description": "The ID of the product list item this purchase relates to.",
          "example": "My Product List",
          "type": "string"
        },
        "purchaserName": {
          "description": "The name of the purchaser.",
          "example": "John Smith",
          "type": "string"
        },
        "quantity": {
          "minimum": 0,
          "format": "double",
          "description": "The quantity of this product list item purchased.",
          "example": 1,
          "type": "number"
        }
      },
      "required": [
        "id",
        "orderNo",
        "productListItemId",
        "purchaserName",
        "quantity"
      ],
      "type": "object"
    },
    "CustomerProductListRegistrant": {
      "description": "Document representing a customer product list registrant.",
      "properties": {
        "email": {
          "description": "The email of the registrant.",
          "example": "jsmith@mail.com",
          "type": "string"
        },
        "firstName": {
          "description": "The first name of the registrant.",
          "example": "John",
          "type": "string"
        },
        "lastName": {
          "description": "The last name of the registrant.",
          "example": "Smith",
          "type": "string"
        },
        "role": {
          "description": "The role of the registrant.",
          "example": "Friend",
          "type": "string"
        }
      },
      "required": [
        "email",
        "firstName",
        "lastName",
        "role"
      ],
      "type": "object"
    },
    "CustomerProductListResult": {
      "description": "Document representing a customer product lists result.",
      "properties": {
        "limit": {
          "format": "int32",
          "description": "The number of returned documents.",
          "example": 13,
          "type": "integer"
        },
        "data": {
          "description": "The customer product lists.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomerProductList"
          }
        },
        "total": {
          "format": "int32",
          "description": "The total number of documents.",
          "example": 3,
          "type": "integer"
        }
      },
      "required": [
        "limit",
        "data",
        "total"
      ],
      "type": "object"
    },
    "CustomerRegistration": {
      "description": "Document representing the registration information for a customer.",
      "properties": {
        "customer": {
          "description": "The customer registration information. The mandatory properties for registration are login, last name and email.",
          "example": {
            "login": "jsmith",
            "email": "jsmith@test.com",
            "last_name": "Smith"
          },
          "$ref": "#/definitions/Customer"
        },
        "password": {
          "description": "The login password",
          "example": "Abcd!1234",
          "type": "string"
        }
      },
      "required": [
        "customer",
        "password"
      ],
      "type": "object"
    },
    "GiftCertificateItem": {
      "description": "A gift certificate item.",
      "properties": {
        "amount": {
          "format": "double",
          "description": "The certificate item amount.",
          "example": 120.5,
          "type": "number"
        },
        "giftCertificateItemId": {
          "description": "ID used to identify this item.",
          "example": "myGiftId",
          "type": "string"
        },
        "message": {
          "maxLength": 4000,
          "description": "The certificate's message.",
          "example": "Buy One Get One Free",
          "type": "string"
        },
        "recipientEmail": {
          "minLength": 1,
          "description": "The recipient's email.",
          "example": "jsmith@mail.com",
          "type": "string"
        },
        "recipientName": {
          "description": "The recipient's name.",
          "example": "John Smith",
          "type": "string"
        },
        "senderName": {
          "description": "The sender's name.",
          "example": "Jane Smith",
          "type": "string"
        },
        "shipmentId": {
          "description": "The shipment ID.",
          "example": "Express",
          "type": "string"
        }
      },
      "required": [
        "amount",
        "recipientEmail"
      ],
      "type": "object"
    },
    "Image": {
      "description": "Image of the product within a customer's productList.",
      "properties": {
        "alt": {
          "example": "myImage",
          "type": "string"
        },
        "disBaseLink": {
          "example": "www.image.com/product.jpg",
          "type": "string"
        },
        "link": {
          "minLength": 1,
          "example": "https://www.ecom.com/myProduct.jpg",
          "type": "string"
        },
        "title": {
          "example": "My Product Image",
          "type": "string"
        }
      },
      "required": [
        "link"
      ],
      "type": "object"
    },
    "ImageGroup": {
      "description": "Document representing an image group containing a list of images for a particular view type and an optional variation value.",
      "properties": {
        "images": {
          "description": "The images of the image group.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Image"
          }
        },
        "variationAttributes": {
          "description": "Returns a list of variation attributes applied to this image group.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/VariationAttribute"
          }
        },
        "viewType": {
          "description": "The image view type.",
          "example": "Hi-Res",
          "type": "string"
        }
      },
      "required": [
        "images",
        "viewType"
      ],
      "type": "object"
    },
    "Inventory": {
      "description": "Document representing inventory information of the current product for a particular inventory list.",
      "properties": {
        "ats": {
          "format": "double",
          "description": "The Available To Sell (ATS) of the product. If it is infinity, the return value is `999999`. The value can be overwritten by the\nOCAPI setting `product.inventory.ats.max_threshold`.",
          "example": 25,
          "type": "number"
        },
        "backorderable": {
          "description": "A flag indicating whether the product is backorderable.",
          "example": true,
          "type": "boolean"
        },
        "id": {
          "description": "The inventory ID.",
          "example": "listInventory",
          "type": "string"
        },
        "inStockDate": {
          "description": "A flag indicating the date when the product will be in stock.",
          "example": "9999-12-31T00:00:00.0Z",
          "type": "string",
          "format": "date-time"
        },
        "orderable": {
          "description": "A flag indicating whether at least one product is available to sell.",
          "example": true,
          "type": "boolean"
        },
        "preorderable": {
          "description": "A flag indicating whether the product is pre orderable.",
          "example": true,
          "type": "boolean"
        },
        "stockLevel": {
          "format": "double",
          "description": "The stock level of the product. If it is infinity, the return value is `999999`. The value can be overwritten by the\n OCAPI setting `product.inventory.stock_level.max_threshold`.",
          "example": 22,
          "type": "number"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "Master": {
      "description": "Representation of a group of variant products. This is a non-buyable entity, provides inheritable attributes for it's product variants, and is used for navigation. *Doesn't have a SKU.*",
      "properties": {
        "masterId": {
          "minLength": 1,
          "maxLength": 100,
          "example": "Shirt",
          "type": "string"
        },
        "orderable": {
          "example": true,
          "type": "boolean"
        },
        "price": {
          "format": "double",
          "example": 29.99,
          "type": "number"
        },
        "priceMax": {
          "format": "double",
          "example": 39.99,
          "type": "number"
        },
        "prices": {
          "type": "object",
          "additionalProperties": {
            "format": "double",
            "type": "number"
          }
        }
      },
      "required": [
        "masterId"
      ],
      "type": "object"
    },
    "Option": {
      "description": "Document representing a product option.",
      "properties": {
        "description": {
          "description": "The localized description of the option.",
          "example": "Great Option",
          "type": "string"
        },
        "id": {
          "minLength": 1,
          "maxLength": 100,
          "description": "The ID of the option.",
          "example": "Warranty",
          "type": "string"
        },
        "image": {
          "description": "The URL to the option image.",
          "example": "https://www.image.com/option.jpg",
          "type": "string"
        },
        "name": {
          "description": "The localized name of the option.",
          "example": "Warranty Option",
          "type": "string"
        },
        "values": {
          "description": "The array of option values. This array can be empty.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/OptionValue"
          }
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "OptionItem": {
      "description": "Document representing an option item.",
      "properties": {
        "adjustedTax": {
          "format": "double",
          "description": "The tax of the product item after adjustments are applied.",
          "example": 2.52,
          "type": "number"
        },
        "basePrice": {
          "format": "double",
          "description": "The base price for the line item, which is the\nprice of the unit before applying adjustments, in the purchase\ncurrency. Depending on the configured taxation policy, the base price may be net or gross of tax.",
          "example": 29.99,
          "type": "number"
        },
        "bonusDiscountLineItemId": {
          "description": "The ID of the bonus discount line item this bonus product relates to.",
          "example": "myProduct",
          "type": "string"
        },
        "bonusProductLineItem": {
          "description": "A flag indicating whether the product item is a bonus.",
          "example": true,
          "type": "boolean"
        },
        "bundledProductItems": {
          "description": "The array of bundled product items. Can be empty.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductItem"
          }
        },
        "gift": {
          "description": "Returns true if the item is a gift.",
          "example": false,
          "type": "boolean"
        },
        "giftMessage": {
          "description": "The gift message.",
          "example": "Enjoy!",
          "type": "string"
        },
        "inventoryId": {
          "maxLength": 256,
          "description": "The inventory list ID associated with this item.",
          "example": "storeInventory",
          "type": "string"
        },
        "itemId": {
          "description": "The item identifier. Use this to identify an item when updating the item quantity or creating a custom price\n adjustment for an item.",
          "example": "Shirt",
          "type": "string"
        },
        "itemText": {
          "description": "The text describing the item in more detail.",
          "example": "Magical Shirt",
          "type": "string"
        },
        "optionId": {
          "maxLength": 256,
          "description": "The ID of the option.",
          "example": "Warranty",
          "type": "string"
        },
        "optionItems": {
          "description": "The array of option items. This array can be empty.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/OptionItem"
          }
        },
        "optionValueId": {
          "maxLength": 256,
          "description": "The ID of the option value.",
          "example": "5 years",
          "type": "string"
        },
        "price": {
          "format": "double",
          "description": "The price of the line item before applying any adjustments. If the line item is based on net pricing\n then the net price is returned. If the line item is based on gross\n pricing then the gross price is returned.",
          "example": 29.99,
          "type": "number"
        },
        "priceAdjustments": {
          "description": "Array of price adjustments. Can be empty.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PriceAdjustment"
          }
        },
        "priceAfterItemDiscount": {
          "format": "double",
          "description": "The price of the product line item after applying all product-level\n adjustments. For net pricing the adjusted net price is returned. For gross pricing, the adjusted\n gross price is returned.",
          "example": 19.99,
          "type": "number"
        },
        "priceAfterOrderDiscount": {
          "format": "double",
          "description": "The price of this product line item after considering all\n dependent price adjustments and prorating all order-level\n price adjustments. For net pricing the net price is returned. For gross\n pricing, the gross price is returned.",
          "example": 19.99,
          "type": "number"
        },
        "productId": {
          "maxLength": 100,
          "description": "The ID of the product.",
          "example": "Shirt",
          "type": "string"
        },
        "productListItem": {
          "description": "The product list item.",
          "$ref": "#/definitions/ProductListItemReference"
        },
        "productName": {
          "description": "The name of the product.",
          "example": "Nice Shirt",
          "type": "string"
        },
        "quantity": {
          "minimum": 0,
          "maximum": 999,
          "format": "double",
          "description": "The quantity of products represented by this item.",
          "example": 100,
          "type": "number"
        },
        "shipmentId": {
          "description": "The ID of the shipment which includes the product item.",
          "example": "Express",
          "type": "string"
        },
        "shippingItemId": {
          "description": "The reference to the related shipping item, if it exists. This is the case, if for example, when a surcharge is\ndefined for individual products using a particular a shipping method.",
          "example": "Express",
          "type": "string"
        },
        "tax": {
          "format": "double",
          "description": "The tax of the product item before adjustments are applied.",
          "example": 5.5,
          "type": "number"
        },
        "taxBasis": {
          "format": "double",
          "description": "The price used to calculate the tax for this product item.",
          "example": 10,
          "type": "number"
        },
        "taxClassId": {
          "description": "The tax class ID for the product item, or `null`\n if no tax class ID is associated with the product item.",
          "example": "Standard",
          "type": "string"
        },
        "taxRate": {
          "format": "double",
          "description": "The tax rate, which is the decimal tax rate to be applied\n to the product represented by this item.",
          "example": 8.5,
          "type": "number"
        }
      },
      "required": [
        "optionId",
        "optionValueId"
      ],
      "type": "object"
    },
    "OptionValue": {
      "description": "Document representing an option value.",
      "properties": {
        "default": {
          "description": "A flag indicating whether this option value is the default one.",
          "example": true,
          "type": "boolean"
        },
        "id": {
          "minLength": 1,
          "maxLength": 100,
          "description": "The ID of the option value.",
          "example": "5Years",
          "type": "string"
        },
        "name": {
          "description": "The localized name of the option value.",
          "example": "5 Year Warranty",
          "type": "string"
        },
        "price": {
          "format": "double",
          "description": "The effective price of this option value.",
          "example": 15.99,
          "type": "number"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "Order": {
      "description": "Document representing an order.",
      "properties": {
        "adjustedMerchandizeTotalTax": {
          "format": "double",
          "description": "The tax after discounts applied in the purchase currency.\n\n Adjusted merchandize prices represent the sum of product prices before\n services (such as shipping) have been added, but after adjustments from\n promotions have been added.",
          "example": 6.5,
          "type": "number"
        },
        "adjustedShippingTotalTax": {
          "format": "double",
          "description": "The tax of all shipping line items of the line item container after\n shipping adjustments have been applied.",
          "example": 5.5,
          "type": "number"
        },
        "billingAddress": {
          "description": "The billing address. This property is part of basket checkout information only.",
          "$ref": "#/definitions/OrderAddress"
        },
        "bonusDiscountLineItems": {
          "description": "The bonus discount line items of the line item container.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BonusDiscountLineItem"
          }
        },
        "channelType": {
          "description": "The sales channel for the order.",
          "example": "store",
          "enum": [
            "storefront",
            "callcenter",
            "marketplace",
            "dss",
            "store",
            "pinterest",
            "twitter",
            "facebookads",
            "subscriptions",
            "onlinereservation",
            "customerservicecenter",
            "instagramcommerce"
          ],
          "type": "string"
        },
        "confirmationStatus": {
          "description": "The confirmation status of the order.",
          "enum": [
            "not_confirmed",
            "confirmed"
          ],
          "type": "string"
        },
        "couponItems": {
          "description": "The sorted array of coupon items. This array can be empty.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CouponItem"
          }
        },
        "createdBy": {
          "description": "The name of the user who created the order.",
          "example": "Someone",
          "type": "string"
        },
        "creationDate": {
          "description": "Returns the value of attribute 'creationDate'.",
          "example": "9999-12-31T00:00:00.0Z",
          "type": "string",
          "format": "date-time"
        },
        "currency": {
          "description": "The ISO 4217 mnemonic code of the currency.",
          "example": "USD",
          "type": "string"
        },
        "customerInfo": {
          "description": "The customer information for logged in customers. This property is part of basket checkout information only.",
          "$ref": "#/definitions/CustomerInfo"
        },
        "customerName": {
          "description": "The name of the customer associated with this order.",
          "example": "John Smith",
          "type": "string"
        },
        "exportStatus": {
          "description": "The export status of the order.",
          "enum": [
            "not_exported",
            "exported",
            "ready",
            "failed"
          ],
          "type": "string"
        },
        "externalOrderStatus": {
          "description": "The external status of the order.",
          "example": "set",
          "type": "string"
        },
        "giftCertificateItems": {
          "description": "The sorted array of gift certificate line items. This array can be empty.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/GiftCertificateItem"
          }
        },
        "globalPartyId": {
          "description": "globalPartyId is managed by Customer 360. Its value can be changed.",
          "example": "globalId",
          "type": "string"
        },
        "lastModified": {
          "description": "Returns the value of attribute 'lastModified'.",
          "example": "9999-12-31T00:00:00.0Z",
          "type": "string",
          "format": "date-time"
        },
        "merchandizeTotalTax": {
          "format": "double",
          "description": "The total tax in the purchase currency.\n\n Merchandize total prices represent the sum of product prices before\n services (such as shipping) or adjustments from promotions have\n been added.",
          "example": 5.5,
          "type": "number"
        },
        "notes": {
          "description": "The notes for the line item container.",
          "$ref": "#/definitions/SimpleLink"
        },
        "orderNo": {
          "description": "The order number of the order.",
          "example": "firstOrder",
          "type": "string"
        },
        "orderPriceAdjustments": {
          "description": "The array of order level price adjustments. This array can be empty.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PriceAdjustment"
          }
        },
        "orderToken": {
          "description": "The order token used to secure the lookup of an order on base of the\n plain order number. The order token contains only URL safe characters.",
          "example": "token",
          "type": "string"
        },
        "orderTotal": {
          "format": "double",
          "description": "The total price of the order, including products, shipping, and tax. This property is part of basket checkout\n information only.",
          "example": 59.99,
          "type": "number"
        },
        "paymentInstruments": {
          "description": "Method for customer to pay for the goods purchased on an ecommerce site. Payment methods include credit card, debit card, bank account, and gift card.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderPaymentInstrument"
          }
        },
        "paymentStatus": {
          "description": "The payment status of the order.",
          "enum": [
            "not_paid",
            "part_paid",
            "paid"
          ],
          "type": "string"
        },
        "productItems": {
          "description": "The sorted array of product items (up to a maximum of 50 items). This array can be empty.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductItem"
          }
        },
        "productSubTotal": {
          "format": "double",
          "description": "The total price of all product items after all product discounts.\n Depending on taxation policy the returned price is net or gross.",
          "example": 29.99,
          "type": "number"
        },
        "productTotal": {
          "format": "double",
          "description": "The total price of all product items after all product and order discounts.\n Depending on taxation policy the returned price is net or gross.",
          "example": 39.99,
          "type": "number"
        },
        "shipments": {
          "description": "The array of shipments. This property is part of basket checkout information only.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Shipment"
          }
        },
        "shippingItems": {
          "description": "The sorted array of shipping items. This array can be empty.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ShippingItem"
          }
        },
        "shippingStatus": {
          "description": "The shipping status of the order.",
          "enum": [
            "not_shipped",
            "part_shipped",
            "shipped"
          ],
          "type": "string"
        },
        "shippingTotal": {
          "format": "double",
          "description": "The total shipping price of the order after all shipping discounts. Excludes tax if the taxation policy is net. Includes\n tax if the taxation policy is gross. This property is part of basket checkout information only.",
          "example": 59.99,
          "type": "number"
        },
        "shippingTotalTax": {
          "format": "double",
          "description": "The tax of all shipping line items of the line item container, before\n shipping adjustments have been applied.",
          "example": 5.99,
          "type": "number"
        },
        "siteId": {
          "description": "The site where the order resides.",
          "example": "SiteGenesis",
          "type": "string"
        },
        "sourceCode": {
          "description": "Gets the source code assigned to this basket.",
          "example": "code",
          "type": "string"
        },
        "status": {
          "description": "The status of the order.",
          "enum": [
            "created",
            "new",
            "open",
            "completed",
            "cancelled",
            "replaced",
            "failed"
          ],
          "type": "string"
        },
        "taxTotal": {
          "format": "double",
          "description": "The total tax amount of the order. This property is part of basket checkout information only.",
          "example": 15.99,
          "type": "number"
        },
        "taxation": {
          "description": "The taxation the line item container is based on.",
          "example": "net",
          "enum": [
            "gross",
            "net"
          ],
          "type": "string"
        }
      },
      "required": [
        "confirmationStatus",
        "exportStatus",
        "paymentStatus",
        "shippingStatus",
        "status"
      ],
      "type": "object"
    },
    "OrderAddress": {
      "description": "Document representing an order address.",
      "properties": {
        "address1": {
          "description": "The first address.",
          "example": "10 Presidential Way",
          "type": "string"
        },
        "address2": {
          "description": "The second address.",
          "example": "Apt 10",
          "type": "string"
        },
        "city": {
          "description": "The city.",
          "example": "New York",
          "type": "string"
        },
        "companyName": {
          "description": "The company name.",
          "example": "Acme Inc",
          "type": "string"
        },
        "countryCode": {
          "pattern": "^([A-Z][A-Z])$",
          "description": "The two-letter ISO 3166-1 (Alpha-2) country code.",
          "example": "US",
          "type": "string"
        },
        "firstName": {
          "description": "The first name.",
          "example": "John",
          "type": "string"
        },
        "fullName": {
          "description": "The full name.",
          "example": "John Smith",
          "type": "string"
        },
        "id": {
          "description": "ID used to identify this address",
          "example": "Home",
          "type": "string"
        },
        "jobTitle": {
          "description": "The job title.",
          "example": "Supervisor",
          "type": "string"
        },
        "lastName": {
          "description": "The last name.",
          "example": "Smith",
          "type": "string"
        },
        "phone": {
          "description": "The phone number.",
          "example": "555-555-5555",
          "type": "string"
        },
        "postBox": {
          "description": "The post box.",
          "example": "58426",
          "type": "string"
        },
        "postalCode": {
          "description": "The postal code.",
          "example": "N5",
          "type": "string"
        },
        "salutation": {
          "description": "The salutation.",
          "example": "Mr.",
          "type": "string"
        },
        "secondName": {
          "description": "The second name.",
          "example": "Smith",
          "type": "string"
        },
        "stateCode": {
          "description": "The state code.",
          "example": "UT",
          "type": "string"
        },
        "suffix": {
          "description": "The suffix.",
          "example": "Sr.",
          "type": "string"
        },
        "suite": {
          "description": "The suite.",
          "example": "100",
          "type": "string"
        },
        "title": {
          "description": "The title.",
          "example": "Engineer",
          "type": "string"
        }
      },
      "required": [
        "address1",
        "city",
        "countryCode",
        "firstName",
        "lastName",
        "postalCode"
      ],
      "type": "object"
    },
    "OrderPaymentInstrument": {
      "description": "Document representing an order payment instrument.",
      "properties": {
        "amount": {
          "format": "double",
          "description": "The payment transaction amount.",
          "example": 101.99,
          "type": "number"
        },
        "authorizationStatus": {
          "description": "The authorization status of the payment transaction.",
          "$ref": "#/definitions/Status"
        },
        "bankRoutingNumber": {
          "maxLength": 256,
          "description": "The bank routing number.",
          "example": "ACB123",
          "type": "string"
        },
        "maskedGiftCertificateCode": {
          "description": "The masked gift certificate code.",
          "example": "*****",
          "type": "string"
        },
        "paymentBankAccount": {
          "description": "The payment bank account.",
          "$ref": "#/definitions/PaymentBankAccount"
        },
        "paymentCard": {
          "description": "The payment card.",
          "$ref": "#/definitions/PaymentCard"
        },
        "paymentInstrumentId": {
          "description": "The payment instrument ID.",
          "example": "myId",
          "type": "string"
        },
        "paymentMethodId": {
          "maxLength": 256,
          "description": "The payment method ID. Optional if a customer payment instrument ID is specified.",
          "example": "CreditCard",
          "type": "string"
        }
      },
      "required": [
        "amount",
        "authorizationStatus",
        "bankRoutingNumber",
        "maskedGiftCertificateCode",
        "paymentBankAccount",
        "paymentCard",
        "paymentInstrumentId",
        "paymentMethodId"
      ],
      "type": "object"
    },
    "PasswordChangeRequest": {
      "description": "Document representing a password change request.",
      "properties": {
        "currentPassword": {
          "maxLength": 4096,
          "description": "The customer's current password.",
          "example": "p@ssword1",
          "type": "string"
        },
        "password": {
          "maxLength": 4096,
          "description": "The customer's new password.",
          "example": "p@ssword2",
          "type": "string"
        }
      },
      "required": [
        "currentPassword",
        "password"
      ],
      "type": "object"
    },
    "ResetPasswordRequest": {
      "description": "Document representing a reset password request.",
      "properties": {
        "resetToken": {
          "maxLength": 4096,
          "description": "Temporary token used to reset password.",
          "example": "R1e2s3e4t5T6o7k8e9n0",
          "type": "string"
        },
        "login": {
          "pattern": "^(?!\\s*$).+",
          "maxLength": 256,
          "description": "The customer's login.",
          "example": "loginId",
          "type": "string"
        },
        "newPassword": {
          "maxLength": 4096,
          "description": "New password to reset to.",
          "example": "p@ssword2",
          "type": "string"
        }
      },
      "required": [
        "resetToken",
        "login",
        "newPassword"
      ],
      "type": "object"
    },
    "ResetPasswordTokenRequest": {
      "description": "Document representing a reset password token request.",
      "properties": {
        "login": {
          "pattern": "^(?!\\s*$).+",
          "maxLength": 256,
          "description": "The customer's login.",
          "example": "loginId",
          "type": "string"
        }
      },
      "required": [
        "login"
      ],
      "type": "object"
    },
    "ResetPasswordToken": {
      "description": "Document representing reset password token response.",
      "properties": {
        "login": {
          "pattern": "^(?!\\s*$).+",
          "maxLength": 256,
          "description": "The customer's login.",
          "example": "loginId",
          "type": "string"
        },
        "email": {
          "maxLength": 256,
          "description": "The customer's email address.",
          "example": "jdoe@customer.com",
          "type": "string"
        },
        "resetToken": {
          "maxLength": 4096,
          "description": "Temporary token generated that will be used to reset password.",
          "example": "R1e2s3e4t5T6o7k8e9n0",
          "type": "string"
        },
        "expiresInMinutes": {
          "format": "int32",
          "description": "Reset token expiry (in minutes).",
          "example": 30,
          "type": "integer"
        }
      },
      "required": [
        "login",
        "email",
        "resetToken",
        "expiresInMinutes"
      ],
      "type": "object"
    },
    "PaymentBankAccount": {
      "description": "Document representing a payment bank account.",
      "properties": {
        "driversLicenseLastDigits": {
          "maxLength": 256,
          "description": "The last 4 characters of the decrypted driverâ€™s license number of the bank account associated with this payment\ninstrument.",
          "example": "7435",
          "type": "string"
        },
        "driversLicenseStateCode": {
          "maxLength": 256,
          "description": "The driverâ€™s license state code.",
          "example": "UT",
          "type": "string"
        },
        "holder": {
          "maxLength": 256,
          "description": "The holder of the bank account.",
          "example": "John Smith",
          "type": "string"
        },
        "maskedDriversLicense": {
          "maxLength": 256,
          "description": "The decrypted driverâ€™s license number of the bank account with all but the last 4 characters replaced with `*`\ncharacters.",
          "example": "****7658",
          "type": "string"
        },
        "maskedNumber": {
          "maxLength": 256,
          "description": "The masked bank account number.",
          "example": "********",
          "type": "string"
        },
        "numberLastDigits": {
          "maxLength": 256,
          "description": "The last digits of the bank account number.",
          "example": "6654",
          "type": "string"
        }
      },
      "type": "object"
    },
    "PaymentBankAccountRequest": {
      "description": "Document representing a payment bank account request.",
      "properties": {
        "driversLicense": {
          "maxLength": 256,
          "description": "The driverâ€™s license.",
          "example": "84736485",
          "type": "string"
        },
        "driversLicenseStateCode": {
          "maxLength": 256,
          "description": "The driverâ€™s license state code.",
          "example": "UT",
          "type": "string"
        },
        "holder": {
          "maxLength": 256,
          "description": "The holder of the bank account.",
          "example": "John Smith",
          "type": "string"
        },
        "number": {
          "maxLength": 256,
          "description": "The payment bank account number.",
          "example": "9796976",
          "type": "string"
        }
      },
      "required": [
        "driversLicense",
        "driversLicenseStateCode",
        "holder",
        "number"
      ],
      "type": "object"
    },
    "PaymentCard": {
      "description": "Document representing a payment card.",
      "properties": {
        "cardType": {
          "maxLength": 256,
          "description": "The payment card type (for example, \"Visa\").",
          "example": "Visa",
          "type": "string"
        },
        "creditCardExpired": {
          "description": "A flag indicating if the credit card is expired.",
          "example": false,
          "type": "boolean"
        },
        "creditCardToken": {
          "description": "A credit card token. If a credit card is tokenized, the token can be used to look up the credit card data in the\ntoken store.",
          "example": "969kJSD9",
          "type": "string"
        },
        "expirationMonth": {
          "format": "int32",
          "description": "The month the payment card expires.",
          "example": 3,
          "type": "integer"
        },
        "expirationYear": {
          "format": "int32",
          "description": "The year the payment card expires.",
          "example": 23,
          "type": "integer"
        },
        "holder": {
          "maxLength": 256,
          "description": "The payment card holder.",
          "example": "John Smith",
          "type": "string"
        },
        "issueNumber": {
          "maxLength": 256,
          "description": "The payment card issue number.",
          "example": "769969",
          "type": "string"
        },
        "maskedNumber": {
          "maxLength": 4000,
          "description": "The masked credit card number.",
          "example": "*****************",
          "type": "string"
        },
        "numberLastDigits": {
          "maxLength": 4000,
          "description": "The last digits of credit card number.",
          "example": "4579",
          "type": "string"
        },
        "validFromMonth": {
          "minimum": 1,
          "maximum": 12,
          "format": "int32",
          "description": "The month the payment card is valid from.",
          "example": 11,
          "type": "integer"
        },
        "validFromYear": {
          "format": "int32",
          "description": "The year the payment card is valid from.",
          "example": 15,
          "type": "integer"
        }
      },
      "required": [
        "cardType"
      ],
      "type": "object"
    },
    "PriceAdjustment": {
      "description": "Document representing a price adjustment within a basket or order. Price adjustments\nare assigned at the order, product, or shipping level. They are created by the\npromotion engine if the custom flag is set to false, or are added by custom logic if the custom\nflag is set to `true`. For custom price adjustments created by a user, the manual flag should be\nset to `true`. This is always the case for price adjustments created using OCAPI.",
      "properties": {
        "appliedDiscount": {
          "description": "A price adjustment that provides details of the discount that was applied.\nThis adjustment is `null` for custom price adjustments created\nwithout discount details.",
          "$ref": "#/definitions/Discount"
        },
        "couponCode": {
          "description": "The coupon code that triggered the promotion, provided\nthe price adjustment was created as the result of a promotion\nbeing triggered by a coupon.",
          "example": "free",
          "type": "string"
        },
        "createdBy": {
          "description": "The user who created the price adjustment.",
          "example": "John Smith",
          "type": "string"
        },
        "creationDate": {
          "description": "Returns the value of the `creationDate` attribute.",
          "example": "9999-12-31T00:00:00.0Z",
          "type": "string",
          "format": "date-time"
        },
        "custom": {
          "description": "A flag indicating whether this price adjustment was created by custom logic. This flag is\n set to true unless the price adjustment was created by the promotion engine.",
          "example": false,
          "type": "boolean"
        },
        "itemText": {
          "description": "The text describing the item in more detail.",
          "example": "Brand New Item",
          "type": "string"
        },
        "lastModified": {
          "description": "Returns the value of the `lastModified` attribute.",
          "example": "9999-12-31T00:00:00.0Z",
          "type": "string",
          "format": "date-time"
        },
        "manual": {
          "description": "A flag indicating whether this price adjustment was created in a manual process.\n \nFor custom price adjustments created using the Shop API, this always\nreturns `true`. Using the scripting API, however, it is possible to set this to `true`\nor `false`, according to the use case.",
          "example": true,
          "type": "boolean"
        },
        "price": {
          "format": "double",
          "description": "The adjustment price.",
          "example": 29.99,
          "type": "number"
        },
        "priceAdjustmentId": {
          "description": "The price adjustment ID (UUID).",
          "example": "3845kj34593845hiuhf",
          "type": "string"
        },
        "promotionId": {
          "description": "The ID of the related promotion. Custom price adjustments\n can be assigned any promotion ID so long it is not\n used by a price adjustment belonging to the same item,\n and is not used by a promotion defined in the promotion engine.\n If not specified, a promotion ID is generated.",
          "example": "BestPromotion",
          "type": "string"
        },
        "promotionLink": {
          "description": "The URL addressing the related promotion.",
          "example": "www.site.com/promotions",
          "type": "string"
        },
        "reasonCode": {
          "description": "The reason why this price adjustment was made.",
          "example": "BACKORDER",
          "enum": [
            "PRICE_MATCH",
            "BACKORDER",
            "EVEN_EXCHANGE"
          ],
          "type": "string"
        }
      },
      "required": [
        "appliedDiscount",
        "couponCode",
        "createdBy",
        "creationDate",
        "custom",
        "itemText",
        "lastModified",
        "manual",
        "price",
        "priceAdjustmentId",
        "promotionId",
        "promotionLink",
        "reasonCode"
      ],
      "type": "object"
    },
    "Product": {
      "description": "Document representing a product.",
      "properties": {
        "brand": {
          "description": "The productâ€™s brand.",
          "example": "Apple",
          "type": "string"
        },
        "bundledProducts": {
          "description": "The array of all bundled products of this product.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BundledProduct"
          }
        },
        "currency": {
          "description": "The ISO 4217 mnemonic code of the currency.",
          "example": "USD",
          "type": "string"
        },
        "ean": {
          "description": "The European Article Number.",
          "example": "sidfhg97",
          "type": "string"
        },
        "fetchDate": {
          "format": "int32",
          "example": 15,
          "type": "integer"
        },
        "id": {
          "minLength": 1,
          "maxLength": 100,
          "description": "The ID (SKU) of the product.",
          "example": "8746534",
          "type": "string"
        },
        "imageGroups": {
          "description": "The array of product image groups.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ImageGroup"
          }
        },
        "inventories": {
          "description": "The array of product inventories explicitly requested via the `inventory_ids` query parameter. This property\nis only returned in the context of the `availability` expansion.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Inventory"
          }
        },
        "inventory": {
          "description": "The site default inventory information. This property is only\n returned in the context of the `availability` expansion.",
          "$ref": "#/definitions/Inventory"
        },
        "longDescription": {
          "description": "The localized product long description.",
          "example": "Best Product Ever",
          "type": "string"
        },
        "manufacturerName": {
          "description": "The productâ€™s manufacturer name.",
          "example": "Apple",
          "type": "string"
        },
        "manufacturerSku": {
          "description": "The productâ€™s manufacturer SKU.",
          "example": "938579345",
          "type": "string"
        },
        "master": {
          "description": "The master product information. Only for types master, variation group, and variant.",
          "$ref": "#/definitions/Master"
        },
        "minOrderQuantity": {
          "format": "double",
          "description": "The minimum order quantity for this product.",
          "example": 10,
          "type": "number"
        },
        "name": {
          "description": "The localized product name.",
          "example": "Best Product",
          "type": "string"
        },
        "options": {
          "description": "The array of product options, for type option. This array can be empty.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Option"
          }
        },
        "pageDescription": {
          "description": "The localized products page description.",
          "type": "string"
        },
        "pageKeywords": {
          "description": "The localized products page description.",
          "example": "Apple",
          "type": "string"
        },
        "pageTitle": {
          "description": "The localized products page title.",
          "example": "Product",
          "type": "string"
        },
        "price": {
          "format": "double",
          "description": "The sales price of the product. In case of complex products, like master or set, this is the minimum price of\n related child products.",
          "example": 59.99,
          "type": "number"
        },
        "priceMax": {
          "format": "double",
          "description": "The maximum sales of related child products in case of complex products like master or set.",
          "example": 69.99,
          "type": "number"
        },
        "prices": {
          "description": "The prices map with pricebook IDs and their values.",
          "type": "object",
          "additionalProperties": {
            "format": "double",
            "type": "number"
          }
        },
        "primaryCategoryId": {
          "description": "The ID of the productâ€™s primary category.",
          "example": "Mens",
          "type": "string"
        },
        "productLinks": {
          "description": "The array of source and target products links information.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductLink"
          }
        },
        "productPromotions": {
          "description": "The array of active customer product promotions for this product. This array can be empty.\n Coupon promotions are not returned in this array.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductPromotion"
          }
        },
        "recommendations": {
          "description": "Returns a list of recommendations.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Recommendation"
          }
        },
        "setProducts": {
          "description": "The array of set products of this product.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Product"
          }
        },
        "shortDescription": {
          "description": "The localized product short description.",
          "example": "What a Product!",
          "type": "string"
        },
        "stepQuantity": {
          "format": "double",
          "description": "The steps in which the order amount of the product can be\n increased.",
          "example": 1,
          "type": "number"
        },
        "type": {
          "description": "The product type information. Can be one or multiple of the following values: item, master, variation_group, variant, bundle, and set.",
          "$ref": "#/definitions/ProductType"
        },
        "unit": {
          "description": "The sales unit of the product.",
          "example": "kg",
          "type": "string"
        },
        "upc": {
          "description": "The Universal Product Code (UPC).",
          "example": "0384753lj4lj",
          "type": "string"
        },
        "validFrom": {
          "description": "The time when product is valid from.",
          "example": "9999-12-31T00:00:00.0Z",
          "type": "string",
          "format": "date-time"
        },
        "validTo": {
          "description": "The time when product is valid to.",
          "example": "9999-12-31T00:00:00.0Z",
          "type": "string",
          "format": "date-time"
        },
        "variants": {
          "description": "The array of actual variants. This array can be empty. Only for types master, variation group, and variant.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Variant"
          }
        },
        "variationAttributes": {
          "description": "Sorted array of variation attributes information. This array can be empty. Only for types master,\n variation group, and variant.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/VariationAttribute"
          }
        },
        "variationGroups": {
          "description": "The array of actual variation groups. This array can be empty. Only for types master, variation group, and variant.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/VariationGroup"
          }
        },
        "variationValues": {
          "description": "The actual variation attribute ID - value pairs. Only for type variant and\n variation group.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "ProductLink": {
      "description": "Document representing a link between two products. It contains the ID of the source and target products, the type of\n product link, and URLs to retrieve product data.",
      "properties": {
        "sourceProductId": {
          "description": "The semantic ID of the product from which this product link is coming from.",
          "example": "9475394",
          "type": "string"
        },
        "sourceProductLink": {
          "description": "The URL addressing the product from which this product link is coming from.",
          "type": "string"
        },
        "targetProductId": {
          "description": "The semantic ID of the product to which this product link is pointing to.",
          "example": "534583745",
          "type": "string"
        },
        "targetProductLink": {
          "description": "The URL addressing the product to which this product link is pointing to.",
          "type": "string"
        },
        "type": {
          "description": "The type of product link.",
          "example": "up_sell",
          "enum": [
            "cross_sell",
            "replacement",
            "up_sell",
            "accessory",
            "newer_version",
            "alt_orderunit",
            "spare_part",
            "other"
          ],
          "type": "string"
        }
      },
      "required": [
        "sourceProductId",
        "sourceProductLink",
        "targetProductId",
        "targetProductLink",
        "type"
      ],
      "type": "object"
    },
    "ProductListEvent": {
      "description": "Document representing a product list event.",
      "properties": {
        "city": {
          "description": "The city where the event takes place.",
          "example": "New York",
          "type": "string"
        },
        "country": {
          "description": "The country where the event takes place.",
          "example": "USA",
          "type": "string"
        },
        "date": {
          "description": "The date when the event takes place.",
          "example": "9999-12-31T00:00:00.0Z",
          "type": "string",
          "format": "date-time"
        },
        "state": {
          "description": "The federal state where the event takes place.",
          "example": "UT",
          "type": "string"
        },
        "type": {
          "description": "Type of the event to celebrate.",
          "example": "wedding",
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "ProductDetailsLink": {
      "description": "Document representing a link to the resource for product details.",
      "properties": {
        "productDescription": {
          "description": "The description of the product.",
          "example": "Awesome Product",
          "type": "string"
        },
        "productId": {
          "description": "The ID of the product.",
          "example": "384756345",
          "type": "string"
        },
        "productName": {
          "description": "The name of the product.",
          "example": "WhatAProduct",
          "type": "string"
        },
        "title": {
          "description": "The link title.",
          "example": "ProductLink",
          "type": "string"
        }
      },
      "required": [
        "productId"
      ],
      "type": "object"
    },
    "ProductListItemReference": {
      "properties": {
        "id": {
          "description": "The ID of the product list item.",
          "example": "93475",
          "type": "string"
        },
        "priority": {
          "format": "int32",
          "example": 1,
          "type": "integer"
        },
        "productList": {
          "description": "The link of the product list the item is assigned to.",
          "$ref": "#/definitions/ProductListLink"
        },
        "public": {
          "example": true,
          "type": "boolean"
        },
        "purchasedQuantity": {
          "format": "double",
          "example": 12,
          "type": "number"
        },
        "quantity": {
          "minimum": 0,
          "format": "double",
          "example": 10,
          "type": "number"
        },
        "type": {
          "example": "product",
          "enum": [
            "product",
            "gift_certificate"
          ],
          "type": "string"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "ProductListRegistrant": {
      "description": "A `ProductListRegistrant` is typically associated with an event-related product list, such as a gift registry. It holds\ninformation about a person associated with the event, such as a bride or groom.",
      "properties": {
        "firstName": {
          "description": "The first name of the registrant.",
          "example": "John",
          "type": "string"
        },
        "lastName": {
          "description": "The last name of the registrant.",
          "example": "Smith",
          "type": "string"
        },
        "role": {
          "description": "The role of the registrant.",
          "example": "CEO",
          "type": "string"
        }
      },
      "required": [
        "firstName",
        "lastName",
        "role"
      ],
      "type": "object"
    },
    "ProductListShippingAddress": {
      "description": "Document representing a product list shipping address.",
      "properties": {
        "addressId": {
          "minLength": 1,
          "description": "The ID of this address.",
          "example": "Home",
          "type": "string"
        },
        "city": {
          "description": "The city of this address.",
          "example": "New York",
          "type": "string"
        },
        "firstName": {
          "description": "The first name of this address.",
          "example": "John",
          "type": "string"
        },
        "lastName": {
          "description": "The last name of this address.",
          "example": "Smith",
          "type": "string"
        }
      },
      "required": [
        "addressId"
      ],
      "type": "object"
    },
    "ProductListLink": {
      "description": "Document representing a link to a product list.",
      "properties": {
        "description": {
          "description": "The description of this product list.",
          "example": "Awesome Product List",
          "type": "string"
        },
        "link": {
          "description": "The target of the link.",
          "example": "www.examplelist.com/myproductlist",
          "type": "string"
        },
        "name": {
          "description": "The name of this product list.",
          "example": "Super List",
          "type": "string"
        },
        "public": {
          "description": "A flag indicating whether the owner made this product list available for access\n by other customers.",
          "example": true,
          "type": "boolean"
        },
        "title": {
          "description": "The link title.",
          "example": "My Product List",
          "type": "string"
        },
        "type": {
          "description": "The type of the product list.",
          "example": "wish_list",
          "enum": [
            "wish_list",
            "gift_registry",
            "shopping_list",
            "custom_1",
            "custom_2",
            "custom_3"
          ],
          "type": "string"
        }
      },
      "required": [
        "description",
        "link",
        "name",
        "public",
        "title",
        "type"
      ],
      "type": "object"
    },
    "ProductItem": {
      "description": "Document representing a product item.",
      "properties": {
        "adjustedTax": {
          "format": "double",
          "description": "The tax of the product item after adjustments are applied.",
          "example": 5.5,
          "type": "number"
        },
        "basePrice": {
          "format": "double",
          "description": "The base price for the line item, which is the\n price of the unit before applying adjustments, in the purchase\n currency. The base price may be net or gross of tax depending\n on the configured taxation policy.",
          "example": 29.99,
          "type": "number"
        },
        "bonusDiscountLineItemId": {
          "description": "The ID of the bonus discount line item that the bonus product relates to.",
          "example": "someId",
          "type": "string"
        },
        "bonusProductLineItem": {
          "description": "A flag indicating whether the product item is a bonus.",
          "example": false,
          "type": "boolean"
        },
        "bundledProductItems": {
          "description": "The array of bundled product items. Can be empty.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductItem"
          }
        },
        "gift": {
          "description": "Returns `true` if the item is a gift.",
          "example": true,
          "type": "boolean"
        },
        "giftMessage": {
          "description": "The gift message.",
          "example": "Enjoy the gift",
          "type": "string"
        },
        "inventoryId": {
          "maxLength": 256,
          "description": "The inventory list ID associated with this item.",
          "example": "someInventory",
          "type": "string"
        },
        "itemId": {
          "description": "The item identifier. Use this to identify an item when updating the item quantity or creating a custom price adjustment for an item.",
          "example": "simpleItemId",
          "type": "string"
        },
        "itemText": {
          "description": "The text describing the item in more detail.",
          "example": "Super Item",
          "type": "string"
        },
        "optionItems": {
          "description": "The array of option items. This array can be empty.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/OptionItem"
          }
        },
        "price": {
          "format": "double",
          "description": "The price of the line item before applying any adjustments. If the line item is based on net pricing\nthen the net price is returned. If the line item is based on gross\npricing then the gross price is returned.",
          "example": 39.99,
          "type": "number"
        },
        "priceAdjustments": {
          "description": "Array of price adjustments. Can be empty.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PriceAdjustment"
          }
        },
        "priceAfterItemDiscount": {
          "format": "double",
          "description": "The price of the product line item after applying all product-level\n adjustments. For net pricing the adjusted net price is returned. For gross pricing, the adjusted\n gross price is returned.",
          "example": 35.99,
          "type": "number"
        },
        "priceAfterOrderDiscount": {
          "format": "double",
          "description": "The price of this product line item after considering all\n dependent price adjustments and prorating all order-level\n price adjustments. For net pricing the net price is returned. For gross\n pricing, the gross price is returned.",
          "example": 35.99,
          "type": "number"
        },
        "productId": {
          "maxLength": 100,
          "description": "The ID of the product.",
          "example": "8374524",
          "type": "string"
        },
        "productListItem": {
          "description": "The product list item.",
          "$ref": "#/definitions/ProductListItemReference"
        },
        "productName": {
          "description": "The name of the product.",
          "example": "Shirt",
          "type": "string"
        },
        "quantity": {
          "minimum": 0,
          "maximum": 999,
          "format": "double",
          "description": "The quantity of products represented by this item.",
          "example": 5,
          "type": "number"
        },
        "shipmentId": {
          "description": "The ID of the shipment which includes the product item.",
          "example": "Express",
          "type": "string"
        },
        "shippingItemId": {
          "description": "The reference to the related shipping item if it exists. This is the case if, for example, when a surcharge is\n defined for individual products using a particular a shipping method.",
          "example": "Express",
          "type": "string"
        },
        "tax": {
          "format": "double",
          "description": "The tax of the product item before adjustments are applied.",
          "example": 5.5,
          "type": "number"
        },
        "taxBasis": {
          "format": "double",
          "description": "The price used to calculate the tax for this product item.",
          "example": 39.99,
          "type": "number"
        },
        "taxClassId": {
          "description": "The tax class ID for the product item, or `null`\n if no tax class ID is associated with the product item.",
          "example": "standard",
          "type": "string"
        },
        "taxRate": {
          "format": "double",
          "description": "The decimal tax rate to be applied\n to the product represented by this item.",
          "example": 12.5,
          "type": "number"
        }
      },
      "required": [
        "quantity"
      ],
      "type": "object"
    },
    "ProductPromotion": {
      "description": "Document representing a product promotion.",
      "properties": {
        "calloutMsg": {
          "description": "The localized call-out message of the promotion.",
          "example": "Super Promotion",
          "type": "string"
        },
        "promotionId": {
          "description": "The unique ID of the promotion.",
          "example": "summerBlowout",
          "type": "string"
        },
        "promotionalPrice": {
          "format": "double",
          "description": "The promotional price for this product.",
          "example": 15.99,
          "type": "number"
        }
      },
      "required": [
        "calloutMsg",
        "promotionId",
        "promotionalPrice"
      ],
      "type": "object"
    },
    "ProductType": {
      "description": "Document representing a product type.",
      "properties": {
        "bundle": {
          "description": "A flag indicating whether the product is a bundle.",
          "example": true,
          "type": "boolean"
        },
        "item": {
          "description": "A flag indicating whether the product is a standard item.",
          "example": true,
          "type": "boolean"
        },
        "master": {
          "description": "A flag indicating whether the product is a master.",
          "example": true,
          "type": "boolean"
        },
        "option": {
          "description": "A flag indicating whether the product is an option.",
          "example": true,
          "type": "boolean"
        },
        "set": {
          "description": "A flag indicating whether the product is a set.",
          "example": true,
          "type": "boolean"
        },
        "variant": {
          "description": "A flag indicating whether the product is a variant.",
          "example": true,
          "type": "boolean"
        },
        "variationGroup": {
          "description": "A flag indicating whether the product is a variation group.",
          "example": true,
          "type": "boolean"
        }
      },
      "required": [
        "bundle",
        "item",
        "master",
        "option",
        "set",
        "variant",
        "variationGroup"
      ],
      "type": "object"
    },
    "PublicProductListInfo": {
      "description": "Document representing a link to a public product list.",
      "properties": {
        "description": {
          "description": "The description of this product list.",
          "example": "Super Awesome ProductList",
          "type": "string"
        },
        "id": {
          "description": "The ID of the product-list document.",
          "example": "3958739435",
          "type": "string"
        },
        "name": {
          "description": "The name of this product list.",
          "example": "My Product List",
          "type": "string"
        },
        "title": {
          "description": "The link title.",
          "example": "Product List Title",
          "type": "string"
        },
        "type": {
          "description": "The type of the product list.",
          "example": "custom_1",
          "enum": [
            "wish_list",
            "gift_registry",
            "shopping_list",
            "custom_1",
            "custom_2",
            "custom_3"
          ],
          "type": "string"
        }
      },
      "required": [
        "id",
        "title",
        "type"
      ],
      "type": "object"
    },
    "PublicProductListResult": {
      "description": "Result document containing an array of public product list links.",
      "properties": {
        "limit": {
          "format": "int32",
          "description": "The number of returned documents.",
          "example": 10,
          "type": "integer"
        },
        "data": {
          "description": "The array of product list link documents.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PublicProductListInfo"
          }
        },
        "total": {
          "format": "int32",
          "description": "The total number of documents.",
          "example": 12,
          "type": "integer"
        }
      },
      "required": [
        "limit",
        "data",
        "total"
      ],
      "type": "object"
    },
    "PublicProductList": {
      "description": "Document representing a customer product list.",
      "properties": {
        "coRegistrant": {
          "description": "The coRegistrant of this product list.",
          "$ref": "#/definitions/ProductListRegistrant"
        },
        "creationDate": {
          "description": "Returns the value of attribute 'creationDate'.",
          "example": "9999-12-31T00:00:00.0Z",
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "description": "The description of this product list.",
          "example": "Super Product List",
          "type": "string"
        },
        "event": {
          "description": "The event of this product list.",
          "$ref": "#/definitions/ProductListEvent"
        },
        "id": {
          "minLength": 1,
          "description": "The id of this product list.",
          "example": "873465834",
          "type": "string"
        },
        "lastModified": {
          "description": "Returns the value of attribute 'lastModified'.",
          "example": "9999-12-31T00:00:00.0Z",
          "type": "string",
          "format": "date-time"
        },
        "name": {
          "description": "The name of this product list.",
          "example": "My Product List",
          "type": "string"
        },
        "productListItems": {
          "description": "The product list items",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PublicProductListItem"
          }
        },
        "productListShippingAddress": {
          "description": "The abbreviated shipping address of this product list representing what anonymous users see.",
          "$ref": "#/definitions/ProductListShippingAddress"
        },
        "public": {
          "description": "Indicates whether the owner made this product list available for access by other customers.",
          "example": true,
          "type": "boolean"
        },
        "registrant": {
          "description": "The registrant of this product list.",
          "$ref": "#/definitions/ProductListRegistrant"
        },
        "type": {
          "description": "The type of the product list.",
          "example": "gift_registry",
          "enum": [
            "wish_list",
            "gift_registry",
            "shopping_list",
            "custom_1",
            "custom_2",
            "custom_3"
          ],
          "type": "string"
        }
      },
      "required": [
        "id",
        "public",
        "type"
      ],
      "type": "object"
    },
    "PublicProductListItem": {
      "description": "Document representing a product list item.",
      "properties": {
        "id": {
          "description": "The ID of this product list item.",
          "example": "8745345",
          "type": "string"
        },
        "priority": {
          "format": "int32",
          "description": "The priority of the item.",
          "example": 2,
          "type": "integer"
        },
        "product": {
          "description": "The product item.",
          "$ref": "#/definitions/Product"
        },
        "type": {
          "description": "The type of the item.",
          "example": "product",
          "enum": [
            "product",
            "gift_certificate"
          ],
          "type": "string"
        }
      },
      "required": [
        "id",
        "priority",
        "type"
      ],
      "type": "object"
    },
    "Recommendation": {
      "description": "Document representing a product recommendation.",
      "properties": {
        "calloutMsg": {
          "description": "The localized callout message of the recommendation.",
          "example": "Buy this too",
          "type": "string"
        },
        "image": {
          "description": "The image of the recommendation.",
          "$ref": "#/definitions/Image"
        },
        "longDescription": {
          "description": "The localized long description of the recommendation.",
          "example": "Goes well with...",
          "type": "string"
        },
        "name": {
          "description": "The localized name of the recommendation.",
          "example": "Reco Product",
          "type": "string"
        },
        "recommendationType": {
          "description": "The recommendation type of the recommendation.",
          "$ref": "#/definitions/RecommendationType"
        },
        "recommendedItemId": {
          "description": "The recommended item ID of the recommendation.",
          "example": "93457893",
          "type": "string"
        },
        "recommendedItemLink": {
          "description": "The recommended item link of the recommendation.",
          "example": "Link",
          "type": "string"
        },
        "shortDescription": {
          "description": "The localized short description of the recommendation.",
          "example": "Awesome Product",
          "type": "string"
        }
      },
      "required": [
        "recommendationType"
      ],
      "type": "object"
    },
    "RecommendationType": {
      "description": "Document representing a recommendation type.",
      "properties": {
        "displayValue": {
          "description": "The localized display value of the recommendation type.",
          "example": "UpSell",
          "type": "string"
        },
        "value": {
          "format": "int32",
          "description": "The value of the recommendation type.",
          "example": 2,
          "type": "integer"
        }
      },
      "required": [
        "displayValue",
        "value"
      ],
      "type": "object"
    },
    "Shipment": {
      "description": "Document representing a shipment.",
      "properties": {
        "adjustedMerchandizeTotalTax": {
          "format": "double",
          "description": "The tax after applying discounts in the purchase currency. Adjusted merchandize prices represent the sum of\nproduct prices before services (such as shipping) have been added, but after adjustments from promotions have been added.\n\nOrder level adjustments are considered if the Discount Taxation preference is set to\n\"Tax Products and Shipping Only Based on Adjusted Price.\"",
          "example": 3.5,
          "type": "number"
        },
        "adjustedShippingTotalTax": {
          "format": "double",
          "description": "The tax of all shipping line items of the line item container, after shipping adjustments have been applied.",
          "example": 2.4,
          "type": "number"
        },
        "gift": {
          "description": "A flag indicating whether the shipment is a gift.",
          "example": true,
          "type": "boolean"
        },
        "giftMessage": {
          "description": "The gift message.",
          "example": "Enjoy the Gift",
          "type": "string"
        },
        "merchandizeTotalTax": {
          "format": "double",
          "description": "The total tax in the purchase currency. Merchandize total prices represent the sum of product prices before\n services (such as shipping), or adjustments from promotions, have been added.",
          "example": 5.5,
          "type": "number"
        },
        "productSubTotal": {
          "format": "double",
          "description": "The total price of all product items after all product discounts. Depending on taxation policy, the returned price is net or gross.",
          "example": 15.99,
          "type": "number"
        },
        "productTotal": {
          "format": "double",
          "description": "The total price of all product items after all product and order discounts. Depending on taxation policy, the returned price is net or gross.",
          "example": 25.99,
          "type": "number"
        },
        "shipmentId": {
          "description": "The order specific ID to identify the shipment.",
          "example": "384765kad",
          "type": "string"
        },
        "shipmentNo": {
          "description": "Returns the shipment number for this shipment.\n\nThis number is automatically generated.",
          "example": "38453345",
          "type": "string"
        },
        "shipmentTotal": {
          "format": "double",
          "description": "The total price of the shipment, including products, shipping, and tax.\n\nOrder level adjustments are not considered.",
          "example": 10.99,
          "type": "number"
        },
        "shippingAddress": {
          "description": "The shipping address.",
          "$ref": "#/definitions/OrderAddress"
        },
        "shippingMethod": {
          "description": "The shipping method.",
          "$ref": "#/definitions/ShippingMethod"
        },
        "shippingStatus": {
          "description": "The shipping status of the shipment.",
          "example": "shipped",
          "enum": [
            "not_shipped",
            "shipped"
          ],
          "type": "string"
        },
        "shippingTotal": {
          "format": "double",
          "description": "The total shipping price of the shipment, after all shipping discounts. Excludes tax if the taxation policy is net.\n Includes tax if the taxation policy is gross.",
          "example": 12.99,
          "type": "number"
        },
        "shippingTotalTax": {
          "format": "double",
          "description": "The tax of all shipping line items of the line item container, before shipping adjustments have been applied.",
          "example": 7.99,
          "type": "number"
        },
        "taxTotal": {
          "format": "double",
          "description": "The total tax amount of the shipment.\n\n Note that order level adjustments are considered if Discount Taxation preference is set to\n \"Tax Products and Shipping Only Based on Adjusted Price\".",
          "example": 7.99,
          "type": "number"
        },
        "trackingNumber": {
          "description": "The tracking number of the shipment.",
          "example": "3394853khbdf9sdf",
          "type": "string"
        }
      },
      "required": [
        "shippingStatus"
      ],
      "type": "object"
    },
    "ShippingItem": {
      "description": "Document representing a shipping item.",
      "properties": {
        "adjustedTax": {
          "format": "double",
          "description": "The tax of the product item after adjustments are applied.",
          "example": 5.5,
          "type": "number"
        },
        "basePrice": {
          "format": "double",
          "description": "The base price for the line item, which is the\n price of the unit before applying adjustments, in the purchase\n currency. The base price may be net or gross of tax depending\n on the configured taxation policy.",
          "example": 15.99,
          "type": "number"
        },
        "itemId": {
          "description": "The item identifier. Use this to identify an item when\nupdating the item quantity or creating a custom price adjustment for an item.",
          "example": "3984",
          "type": "string"
        },
        "itemText": {
          "description": "The text describing the item in more detail.",
          "example": "My Item",
          "type": "string"
        },
        "price": {
          "format": "double",
          "description": "The price of the line item before applying any adjustments. If the line item is based on net pricing\nthen the net price is returned. If the line item is based on gross\npricing then the gross price is returned.",
          "example": 29.99,
          "type": "number"
        },
        "priceAdjustments": {
          "description": "Array of price adjustments. Can be empty.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PriceAdjustment"
          }
        },
        "priceAfterItemDiscount": {
          "format": "double",
          "description": "The price of the product line item after applying all product-level\n adjustments. For net pricing, the adjusted net price is returned. For gross pricing, the adjusted\n gross price is returned.",
          "example": 19.99,
          "type": "number"
        },
        "shipmentId": {
          "description": "The identifier of the shipment to which this item belongs.",
          "example": "ssdf9sd34f",
          "type": "string"
        },
        "tax": {
          "format": "double",
          "description": "The tax of the product item before adjustments are applied.",
          "example": 7.99,
          "type": "number"
        },
        "taxBasis": {
          "format": "double",
          "description": "The price used to calculate the tax for this product item.",
          "example": 29.99,
          "type": "number"
        },
        "taxClassId": {
          "description": "The tax class ID for the product item, or `null`\nif no tax class ID is associated with the product item.",
          "example": "standard",
          "type": "string"
        },
        "taxRate": {
          "format": "double",
          "description": "The decimal tax rate to be applied to the product represented by this item.",
          "example": 12.5,
          "type": "number"
        }
      },
      "required": [
        "adjustedTax",
        "basePrice",
        "itemId",
        "itemText",
        "price",
        "priceAdjustments",
        "priceAfterItemDiscount",
        "shipmentId",
        "tax",
        "taxBasis",
        "taxClassId",
        "taxRate"
      ],
      "type": "object"
    },
    "ShippingMethod": {
      "description": "Document representing a shipping method.",
      "properties": {
        "description": {
          "description": "The localized description of the shipping method.",
          "example": "One Day Shipment",
          "type": "string"
        },
        "externalShippingMethod": {
          "description": "The external shipping method.",
          "example": "Air",
          "type": "string"
        },
        "id": {
          "maxLength": 256,
          "description": "The shipping method ID.",
          "example": "9wrksdf",
          "type": "string"
        },
        "name": {
          "description": "The localized name of the shipping method.",
          "example": "Ship",
          "type": "string"
        },
        "price": {
          "format": "double",
          "description": "The shipping cost total, including shipment level costs,\n product level fix, and surcharge costs.",
          "example": 12.99,
          "type": "number"
        },
        "shippingPromotions": {
          "description": "The array of active customer shipping promotions for this shipping\n method. This array can be empty.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ShippingPromotion"
          }
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "ShippingPromotion": {
      "description": "Document representing a shipping promotion.",
      "properties": {
        "calloutMsg": {
          "description": "The localized call-out message of the promotion.",
          "example": "Free Shipping",
          "type": "string"
        },
        "promotionId": {
          "description": "The unique ID of the promotion.",
          "example": "wk23459234",
          "type": "string"
        },
        "promotionName": {
          "description": "The localized promotion name.",
          "example": "Free Shipping Week",
          "type": "string"
        }
      },
      "required": [
        "calloutMsg",
        "promotionId",
        "promotionName"
      ],
      "type": "object"
    },
    "SimpleLink": {
      "description": "Document representing a link to another resource.",
      "properties": {
        "link": {
          "description": "The link to the resource.",
          "example": "www.examplelink.com",
          "type": "string"
        }
      },
      "required": [
        "link"
      ],
      "type": "object"
    },
    "Status": {
      "description": "Document representing a status of an object.",
      "properties": {
        "code": {
          "description": "The status code.",
          "example": "Success",
          "type": "string"
        },
        "message": {
          "description": "The status message.",
          "example": "Looking good",
          "type": "string"
        },
        "status": {
          "format": "int32",
          "description": "The status.\n \nFor more information on status values see, `dw.system.Status.OK` and\n`dw.system.Status.ERROR`.",
          "example": 2,
          "type": "integer"
        }
      },
      "required": [
        "code",
        "message",
        "status"
      ],
      "type": "object"
    },
    "TrustedSystemAuthRequest": {
      "description": "Document representing trusted system auth request.",
      "properties": {
        "clientId": {
          "pattern": "^(?!\\s*$).+",
          "description": "The client ID of the shopping application to be encoded in the customer JSON Web Token (JWT).\nThis is not the same as the OAuth Client ID used to authenticate the API call, as\nthe OAuth Client ID is the trusted and private ID and this is the untrusted and public ID.",
          "example": "349534859384534",
          "type": "string"
        },
        "login": {
          "pattern": "^(?!\\s*$).+",
          "description": "The customer's login.",
          "example": "loginId",
          "type": "string"
        }
      },
      "required": [
        "clientId",
        "login"
      ],
      "type": "object"
    },
    "Variant": {
      "description": "Document representing a product variation.",
      "properties": {
        "orderable": {
          "description": "A flag indicating whether the variant is orderable.",
          "example": true,
          "type": "boolean"
        },
        "price": {
          "format": "double",
          "description": "The sales price of the variant.",
          "example": 25.99,
          "type": "number"
        },
        "productId": {
          "minLength": 1,
          "maxLength": 100,
          "description": "The ID (SKU) of the variant.",
          "example": "489752348592",
          "type": "string"
        },
        "variationValues": {
          "description": "The actual variation attribute ID - value pairs.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "productId"
      ],
      "type": "object"
    },
    "VariationAttribute": {
      "description": "Document representing a variation attribute.",
      "properties": {
        "id": {
          "minLength": 1,
          "description": "The ID of the variation attribute.",
          "example": "color",
          "type": "string"
        },
        "name": {
          "description": "The localized display name of the variation attribute.",
          "example": "Color",
          "type": "string"
        },
        "values": {
          "description": "The sorted array of variation values. This array can be empty.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/VariationAttributeValue"
          }
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "VariationAttributeValue": {
      "description": "Document representing a variation attribute value.",
      "properties": {
        "description": {
          "description": "The localized description of the variation value.",
          "example": "Red",
          "type": "string"
        },
        "image": {
          "description": "The first product image for the configured viewtype and this variation value.",
          "$ref": "#/definitions/Image"
        },
        "imageSwatch": {
          "description": "The first product image for the configured viewtype and this variation value (typically the swatch image).",
          "$ref": "#/definitions/Image"
        },
        "name": {
          "description": "The localized display name of the variation value.",
          "example": "Red",
          "type": "string"
        },
        "orderable": {
          "description": "A flag indicating whether at least one variant with this variation attribute value is available to sell.",
          "example": true,
          "type": "boolean"
        },
        "value": {
          "minLength": 1,
          "description": "The actual variation value.",
          "example": "Red",
          "type": "string"
        }
      },
      "required": [
        "value"
      ],
      "type": "object"
    },
    "VariationGroup": {
      "description": "Document representing a variation group.",
      "properties": {
        "orderable": {
          "description": "A flag indicating whether the variation group is orderable.",
          "example": true,
          "type": "boolean"
        },
        "price": {
          "format": "double",
          "description": "The sales price of the variation group.",
          "example": 25.99,
          "type": "number"
        },
        "productId": {
          "minLength": 1,
          "maxLength": 100,
          "description": "The ID (SKU) of the variation group.",
          "example": "93485793",
          "type": "string"
        },
        "variationValues": {
          "description": "The actual variation attribute ID - value pairs.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "orderable",
        "price",
        "productId",
        "variationValues"
      ],
      "type": "object"
    },
    "CustomerExtProfileRequest": {
      "description": "Document representing the External Profile Request.",
      "properties": {
        "authenticationProviderId": {
          "minLength": 1,
          "description": "The authentication Provider Id",
          "example": "Google",
          "type": "string"
        },
        "email": {
          "minLength": 1,
          "description": "The Email of the customer.",
          "example": "s@gmail.com",
          "type": "string"
        },
        "externalId": {
          "minLength": 1,
          "description": "The ID of the customer.",
          "example": "jsmith@gmail.com",
          "type": "string"
        },
        "firstName": {
          "minLength": 1,
          "description": "The First Name of the customer.",
          "example": "John",
          "type": "string"
        },
        "lastName": {
          "minLength": 1,
          "description": "The Last Name of the customer.",
          "example": "Smith",
          "type": "string"
        }
      },
      "required": [
        "authenticationProviderId",
        "externalId"
      ],
      "type": "object"
    },
    "CustomerExternalProfile": {
      "description": "The Document representing the External Profile of a Customer.",
      "allOf": [
        {
          "$ref": "#/definitions/CustomerExtProfileRequest"
        },
        {
          "properties": {
            "customerId": {
              "minLength": 1,
              "description": "The Id of the Customer",
              "example": "1234",
              "type": "string"
            }
          },
          "required": [
            "customerId"
          ],
          "type": "object"
        }
      ]
    },
    "ApiStandards.Pagination.offset": {
      "default": 0,
      "minimum": 0,
      "format": "int64",
      "description": "Used to retrieve the results based on a particular resource offset.",
      "type": "integer"
    },
    "ApiStandards.Pagination.limit": {
      "default": 10,
      "minimum": 1,
      "format": "int32",
      "description": "Maximum records to retrieve per request, not to exceed the maximum defined. A limit must be at least 1 so at least one record is returned (if any match the criteria).",
      "type": "integer"
    },
    "ApiStandards.Pagination.total": {
      "default": 0,
      "minimum": 0,
      "format": "int64",
      "description": "The total number of hits that match the search's criteria. This can be greater than the number of results returned as search results are pagenated.",
      "type": "integer"
    },
    "CommerceCloudStandards.SiteId": {
      "minLength": 1,
      "description": "The identifer of the site that a request is being made in the context of. Attributes might have site specific values, and some objects may only be assigned to specific sites",
      "example": "SiteGenesis",
      "type": "string"
    }
  },
  "parameters": {
    "trait:CustomerTraits.OffsetPaginated:offset": {
      "in": "query",
      "name": "offset",
      "type": "string"
    },
    "trait:CommerceCloudStandards.SiteSpecific:siteId": {
      "in": "query",
      "name": "siteId",
      "required": true,
      "type": "string"
    }
  },
  "responses": {
    "trait:CustomerTraits.Unauthorized:401": {
      "description": "Indicates that the customerId URL parameter does not match the verified customer represented by the JWT token, which is not relevant when using OAuth, or indicates that the provided new address name is already used for the customer.\n",
      "examples": {
        "application/problem+json": {
          "title": "Invalid Access Token",
          "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/invalid-access-token",
          "detail": "The request is unauthorized, the access token is invalid.",
          "accessToken": "iI6IjEiLCJhbGciOiJIUzI1NiIsInR5cCI6Ik"
        }
      },
      "schema": {
        "$ref": "#/definitions/ErrorResponse"
      }
    },
    "trait:CustomerTraits.NotFound:404": {
      "description": "Requested Resource Not Found\n",
      "examples": {
        "application/problem+json": {
          "title": "Not Found",
          "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/not-found",
          "detail": "No customer with ID 'abfTWMDZOgi3JPzkHjv9IhmziI' could be found.",
          "customerId": "abfTWMDZOgi3JPzkHjv9IhmziI"
        }
      },
      "schema": {
        "$ref": "#/definitions/ErrorResponse"
      }
    },
    "trait:CustomerTraits.BadRequest:400": {
      "description": "CustomerId URL parameter does not match the verified customer represented by the JWT token.\n",
      "examples": {
        "application/problem+json": {
          "title": "Invalid Customer",
          "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/invalid-customer",
          "detail": "The customer is invalid."
        }
      },
      "schema": {
        "$ref": "#/definitions/ErrorResponse"
      }
    },
    "trait:CustomerTraits.CustomerExtProfileNotFound:404": {
      "description": "Requested Resource Not Found\n",
      "examples": {
        "application/problem+json": {
          "title": "Not Found",
          "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/not-found",
          "detail": "No customer with external profile with ID 'abfTWMDZOgi3JPzkHjv9IhmziI' could be found.",
          "externalId": "abfTWMDZOgi3JPzkHjv9IhmziI"
        }
      },
      "schema": {
        "$ref": "#/definitions/ErrorResponse"
      }
    },
    "trait:CustomerTraits.CustomerExtProfileBadRequest:400": {
      "description": "Customer ExternalId URL parameter is not valid.\n",
      "examples": {
        "application/problem+json": {
          "title": "Invalid Customer External Profile",
          "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/invalid-customer-external-profile",
          "detail": "The customer external profile is invalid."
        }
      },
      "schema": {
        "$ref": "#/definitions/ErrorResponse"
      }
    },
    "trait:CustomerTraits.CustomerAuthenticationFailed:401": {
      "description": "Case of type credentials the username is unknown or the password does not match. In case of type session, the session is not active anymore or the dwsecuretoken value is invalid. In both cases the customer is disabled or locked.\n",
      "examples": {
        "application/problem+json": {
          "title": "Authentication Failed",
          "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/authentication-failed",
          "detail": "Customer authentication based on JohnSmith failed.",
          "credentialType": "JohnSmith"
        }
      },
      "schema": {
        "$ref": "#/definitions/ErrorResponse"
      }
    },
    "trait:CustomerTraits.OffsetPaginated:200": {
      "description": "",
      "headers": {
        "SFDC-Pagination-Offset": {
          "description": "The starting offset returned.",
          "type": "string"
        },
        "SFDC-Pagination-Limit": {
          "maximum": null,
          "description": "The limit requested.",
          "default": "<<defaultSize>>",
          "type": "string"
        },
        "SFDC-Pagination-Total-Count": {
          "type": "string"
        },
        "SFDC-Pagination-Result-Count": {
          "format": "int64",
          "description": "The number of results included in the response.",
          "type": "number"
        }
      }
    },
    "trait:ApiStandards.RateLimited:429": {
      "description": "The user has sent too many requests in a given amount of time (\"rate limiting\")",
      "headers": {
        "Retry-After": {
          "examples": [
            120
          ],
          "type": "string"
        }
      },
      "schema": {
        "example": {
          "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/too-many-requests",
          "title": "Too Many Requests",
          "detail": "You have performed too many requests in a short period of time."
        },
        "properties": {
          "type": {
            "description": "A URI reference [RFC3986] that identifies the\nproblem type.  This specification encourages that, when\ndereferenced, it provide human-readable documentation for the\nproblem type (e.g., using HTML [W3C.REC-html5-20141028]).  When\nthis member is not present, its value is assumed to be\n\"about:blank\". It accepts relative URIs; this means\nthat they must be resolved relative to the document's base URI, as\nper [RFC3986], Section 5.\n",
            "example": "https://example.com/probs/out-of-credit",
            "type": "string"
          },
          "title": {
            "description": "A short, human-readable summary of the problem\ntype.  It will not change from occurrence to occurrence of the\nproblem, except for purposes of localization.\n",
            "example": "You do not have enough credit.",
            "type": "string"
          },
          "detail": {
            "description": "A human-readable explanation specific to this\noccurrence of the problem.\n",
            "example": "Your current balance is 30, but that costs 50.",
            "type": "string"
          },
          "instance": {
            "description": "A URI reference that identifies the specific\noccurrence of the problem.  It may or may not yield further\ninformation if dereferenced.  It accepts relative URIs; this means\nthat they must be resolved relative to the document's base URI, as\nper [RFC3986], Section 5.\n",
            "example": "/account/12345/msgs/abc",
            "type": "string"
          }
        },
        "required": [
          "type"
        ]
      }
    }
  },
  "paths": {
    "/organizations/{organizationId}/customers": {
      "post": {
        "description": "Registers a new customer. The mandatory data are the credentials, profile last name, and email. This requires a JSON Web Token (JWT) which needs to be obtained using the POST /customers/auth API with type \"guest\", or from the Shopper Login (SLAS) API.",
        "operationId": "registerCustomer",
        "produces": [
          "application/problem+json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": {
                "customer": "Can not resolve Examples/CustomerRegistrationResponse.raml"
              }
            },
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          },
          "400": {
            "$ref": "#/responses/trait:CustomerTraits.BadRequest:400"
          },
          "401": {
            "$ref": "#/responses/trait:CustomerTraits.CustomerAuthenticationFailed:401"
          },
          "429": {
            "$ref": "#/responses/trait:ApiStandards.RateLimited:429"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": "Can not resolve Examples/CustomerRegistrationRequest.raml",
              "$ref": "#/definitions/CustomerRegistration"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:CommerceCloudStandards.SiteSpecific:siteId"
          }
        ]
      },
      "parameters": [
        {
          "description": "An identifier for the organization the request is being made by.",
          "type": "string",
          "in": "path",
          "name": "organizationId",
          "required": true
        }
      ]
    },
    "/organizations/{organizationId}/customers/actions/logout": {
      "delete": {
        "description": "ðŸš¨ **DEPRECATION NOTICE**\n\nTo enhance the security and availability of Salesforce services, this endpoint is now **deprecated**, and **we plan to remove it in mid-2022**. This endpoint is not available to new customers, and we discourage existing customers from using it. Instead, we strongly recommend using the endpoints of the [Shopper Login and API Access Service](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-login:Summary) (SLAS) because they meet our rigorous standards for security and availability.\n\n---\n\nLog the user out.",
        "operationId": "invalidateCustomerAuth",
        "produces": [
          "application/problem+json"
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            }
          },
          "429": {
            "$ref": "#/responses/trait:ApiStandards.RateLimited:429"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:CommerceCloudStandards.SiteSpecific:siteId"
          }
        ]
      },
      "parameters": [
        {
          "description": "An identifier for the organization the request is being made by.",
          "type": "string",
          "in": "path",
          "name": "organizationId",
          "required": true
        }
      ]
    },
    "/organizations/{organizationId}/customers/actions/login": {
      "post": {
        "description": "ðŸš¨ **DEPRECATION NOTICE**\n\nTo enhance the security and availability of Salesforce services, this endpoint is now **deprecated**, and **we plan to remove it in mid-2022**. This endpoint is not available to new customers, and we discourage existing customers from using it. Instead, we strongly recommend using the endpoints of the [Shopper Login and API Access Service](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-login:Summary) (SLAS) because they meet our rigorous standards for security and availability.\n\n---\n\nObtains a new JSON Web Token (JWT) for a guest or registered\ncustomer. Tokens are returned as an HTTP `Authorization: Bearer` response\nheader entry. The following kinds of request are supported, as specified by the\n`type`:\n\n- `{\"type\": \"guest\"}` â†’ Creates a guest (non-authenticated) customer and returns a token for the customer.\n- `{\"type\": \"credentials\"}` â†’ Authenticates credentials passed in the `HTTP Authorization: Basic` request header and returns a token for a successfully authenticated customer (otherwise, it throws an `AuthenticationFailedException`). This type of request also updates profile attributes for the customer (for example, `last-visited`) and handles the maximum number of failed login attempts.\n- `{\"type\": \"refresh\"}` â†’ Examines the token passed in the `HTTP Authorization: Bearer` request header. If valid, a new token is returned with an updated expiry time.\n\nThe JWT contains 3 sections:\n\n1. Header: Specifies token type and algorithm used.\n2. Payload: Contains customer information, client ID, issue, and expiration time.\n3. Signature: Records the token signature.\n\nA token is created and returned to the client whenever a registered customer logs in (`credentials` type) or a guest customer requests it (`guest` type). The token is returned in the response header as `Authorization: Bearer --token--`.\n\nThe client has to include the token in the request header as `Authorization: Bearer --token--` in any follow-up request. The server declines any follow-up requests without a token. The server declines any requests that cannot be verified based on the token signature or expiration time. A token nearing its expiration time should be exchanged for a new one (`refresh` type).",
        "operationId": "authorizeCustomer",
        "produces": [
          "application/problem+json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "authorization": {
                "type": "string"
              },
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": {
                "customer": "Can not resolve Examples/guestAuthResponse.raml"
              }
            },
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          },
          "400": {
            "$ref": "#/responses/trait:CustomerTraits.BadRequest:400"
          },
          "401": {
            "$ref": "#/responses/trait:CustomerTraits.CustomerAuthenticationFailed:401"
          },
          "429": {
            "$ref": "#/responses/trait:ApiStandards.RateLimited:429"
          }
        },
        "parameters": [
          {
            "description": "Use `Authorization:Basic` for type `credentials` and use\n`Authorization:Bearer` for type `refresh`",
            "type": "string",
            "in": "header",
            "name": "Authorization"
          },
          {
            "schema": {
              "example": {
                "type": "guest"
              },
              "$ref": "#/definitions/AuthRequest"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "required": true,
            "description": "Client ID for application identification",
            "type": "string",
            "in": "query",
            "name": "clientId"
          },
          {
            "$ref": "#/parameters/trait:CommerceCloudStandards.SiteSpecific:siteId"
          }
        ]
      },
      "parameters": [
        {
          "description": "An identifier for the organization the request is being made by.",
          "type": "string",
          "in": "path",
          "name": "organizationId",
          "required": true
        }
      ]
    },
    "/organizations/{organizationId}/customers/trusted-system/actions/login": {
      "post": {
        "description": "ðŸš¨ **DEPRECATION NOTICE**\n\nTo enhance the security and availability of Salesforce services, this endpoint is now **deprecated**, and **we plan to remove it in mid-2022**. This endpoint is not available to new customers, and we discourage existing customers from using it. Instead, we strongly recommend using the endpoints of the [Shopper Login and API Access Service](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-login:Summary) (SLAS) because they meet our rigorous standards for security and availability.\n\n---\n\nObtain the JSON Web Token (JWT) for registered customers whose credentials are stored using a third party system. Accepts `loginId` and \n`clientId`, returns a customer object in the response body and the JWT generated against the `clientId` in the response header.",
        "operationId": "authorizeTrustedSystem",
        "produces": [
          "application/problem+json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "authorization": {
                "type": "string"
              },
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": {
                "customer": "Can not resolve Examples/TrustedAuthResponse.raml"
              }
            },
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          },
          "401": {
            "$ref": "#/responses/trait:CustomerTraits.CustomerAuthenticationFailed:401"
          },
          "429": {
            "$ref": "#/responses/trait:ApiStandards.RateLimited:429"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "login": "f0a43dc2-692a-43bf-b008-e10918ea935d",
                "clientId": "abdtkZzH6sqInJGIHNR1yUw90A"
              },
              "$ref": "#/definitions/TrustedSystemAuthRequest"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:CommerceCloudStandards.SiteSpecific:siteId"
          }
        ],
        "security": [
          {
            "CommerceCloudStandards.AmOAuth2": []
          }
        ]
      },
      "parameters": [
        {
          "description": "An identifier for the organization the request is being made by.",
          "type": "string",
          "in": "path",
          "name": "organizationId",
          "required": true
        }
      ]
    },
    "/organizations/{organizationId}/customers/password/actions/reset": {
      "post": {
        "description": "Reset customer password, after obtaining a reset token. This is the second step in the reset customer password flow, where a customer password is reset by providing the new credentials along with a reset token. This call should be preceded by a call to the /create-reset-token endpoint.",
        "operationId": "resetPassword",
        "produces": [
          "application/problem+json"
        ],
        "responses": {
          "204": {
            "description": "Reset password successful. No Content",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            }
          },
          "400": {
            "$ref": "#/responses/trait:CustomerTraits.BadRequest:400"
          },
          "429": {
            "$ref": "#/responses/trait:ApiStandards.RateLimited:429"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": "Can not resolve Examples/ResetPasswordRequest.raml",
              "$ref": "#/definitions/ResetPasswordRequest"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:CommerceCloudStandards.SiteSpecific:siteId"
          }
        ],
        "security": [
          {
            "CommerceCloudStandards.AmOAuth2": []
          }
        ]
      },
      "parameters": [
        {
          "description": "An identifier for the organization the request is being made by.",
          "type": "string",
          "in": "path",
          "name": "organizationId",
          "required": true
        }
      ]
    },
    "/organizations/{organizationId}/customers/password/actions/create-reset-token": {
      "post": {
        "description": "Get reset password token. This is the first step in the reset customer password flow, where a password reset token is requested for future use to reset a customer password. This call should be followed by a call to the /reset endpoint.",
        "operationId": "getResetPasswordToken",
        "produces": [
          "application/problem+json"
        ],
        "responses": {
          "200": {
            "description": "Reset password token generated and returned successfully.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": "Can not resolve Examples/ResetTokenResult.raml"
            },
            "schema": {
              "$ref": "#/definitions/ResetPasswordToken"
            }
          },
          "400": {
            "$ref": "#/responses/trait:CustomerTraits.BadRequest:400"
          },
          "429": {
            "$ref": "#/responses/trait:ApiStandards.RateLimited:429"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "login": "janedoe@test.com"
              },
              "$ref": "#/definitions/ResetPasswordTokenRequest"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:CommerceCloudStandards.SiteSpecific:siteId"
          }
        ],
        "security": [
          {
            "CommerceCloudStandards.AmOAuth2": []
          }
        ]
      },
      "parameters": [
        {
          "description": "An identifier for the organization the request is being made by.",
          "type": "string",
          "in": "path",
          "name": "organizationId",
          "required": true
        }
      ]
    },
    "/organizations/{organizationId}/customers/external-profile": {
      "post": {
        "description": "Registers a new external profile for a customer. This endpoint accepts a guest customer ShopperToken (JWT) only.",
        "operationId": "registerExternalProfile",
        "produces": [
          "application/problem+json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": "Can not resolve Examples/CustomerExternalProfile.raml"
            },
            "schema": {
              "$ref": "#/definitions/CustomerExternalProfile"
            }
          },
          "400": {
            "$ref": "#/responses/trait:CustomerTraits.BadRequest:400"
          },
          "401": {
            "$ref": "#/responses/trait:CustomerTraits.CustomerAuthenticationFailed:401"
          },
          "429": {
            "$ref": "#/responses/trait:ApiStandards.RateLimited:429"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": "Can not resolve Examples/ExternalProfileRequest.raml",
              "$ref": "#/definitions/CustomerExtProfileRequest"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:CommerceCloudStandards.SiteSpecific:siteId"
          }
        ]
      },
      "get": {
        "description": "Gets the new external profile for a customer. This endpoint accepts a registered customer ShopperToken (JWT) only.",
        "operationId": "getExternalProfile",
        "produces": [
          "application/problem+json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": "Can not resolve Examples/CustomerExternalProfile.raml"
            },
            "schema": {
              "$ref": "#/definitions/CustomerExternalProfile"
            }
          },
          "400": {
            "$ref": "#/responses/trait:CustomerTraits.CustomerExtProfileBadRequest:400"
          },
          "404": {
            "$ref": "#/responses/trait:CustomerTraits.CustomerExtProfileNotFound:404"
          },
          "429": {
            "$ref": "#/responses/trait:ApiStandards.RateLimited:429"
          }
        },
        "parameters": [
          {
            "required": true,
            "minLength": 1,
            "description": "The External ID of the customer.",
            "type": "string",
            "in": "query",
            "name": "externalId"
          },
          {
            "required": true,
            "minLength": 1,
            "description": "The authentication Provider Id.",
            "type": "string",
            "in": "query",
            "name": "authenticationProviderId"
          },
          {
            "$ref": "#/parameters/trait:CommerceCloudStandards.SiteSpecific:siteId"
          }
        ],
        "security": [
          {
            "CommerceCloudStandards.AmOAuth2": []
          }
        ]
      },
      "parameters": [
        {
          "description": "An identifier for the organization the request is being made by.",
          "type": "string",
          "in": "path",
          "name": "organizationId",
          "required": true
        }
      ]
    },
    "/organizations/{organizationId}/customers/{customerId}": {
      "get": {
        "description": "Gets a customer with all existing addresses and payment instruments associated with the requested customer. This endpoint accepts a registered customer ShopperToken (JWT) only.",
        "operationId": "getCustomer",
        "produces": [
          "application/problem+json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": "Can not resolve Examples/Customer.raml"
            },
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          },
          "400": {
            "$ref": "#/responses/trait:CustomerTraits.BadRequest:400"
          },
          "404": {
            "$ref": "#/responses/trait:CustomerTraits.NotFound:404"
          },
          "429": {
            "$ref": "#/responses/trait:ApiStandards.RateLimited:429"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:CommerceCloudStandards.SiteSpecific:siteId"
          }
        ]
      },
      "patch": {
        "description": "Updates a customer. This endpoint accepts a registered customer ShopperToken (JWT) only.",
        "operationId": "updateCustomer",
        "produces": [
          "application/problem+json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": {
                "customer": "Can not resolve Examples/UpdateCustomerResponse.raml"
              }
            },
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          },
          "400": {
            "$ref": "#/responses/trait:CustomerTraits.BadRequest:400"
          },
          "404": {
            "$ref": "#/responses/trait:CustomerTraits.NotFound:404"
          },
          "429": {
            "$ref": "#/responses/trait:ApiStandards.RateLimited:429"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "customer": "Can not resolve Examples/UpdateCustomerRequest.raml"
              },
              "$ref": "#/definitions/Customer"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:CommerceCloudStandards.SiteSpecific:siteId"
          }
        ]
      },
      "parameters": [
        {
          "minLength": 1,
          "description": "The customer ID.",
          "type": "string",
          "in": "path",
          "name": "customerId",
          "required": true
        },
        {
          "description": "An identifier for the organization the request is being made by.",
          "type": "string",
          "in": "path",
          "name": "organizationId",
          "required": true
        }
      ]
    },
    "/organizations/{organizationId}/customers/{customerId}/addresses": {
      "post": {
        "description": "Creates a new address with the given name for the given customer. This endpoint accepts a registered customer ShopperToken (JWT) only.",
        "operationId": "createCustomerAddress",
        "produces": [
          "application/problem+json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": {
                "customerAddress": "Can not resolve Examples/CustomerAddressResponse.raml"
              }
            },
            "schema": {
              "$ref": "#/definitions/CustomerAddress"
            }
          },
          "400": {
            "$ref": "#/responses/trait:CustomerTraits.BadRequest:400"
          },
          "404": {
            "$ref": "#/responses/trait:CustomerTraits.NotFound:404"
          },
          "429": {
            "$ref": "#/responses/trait:ApiStandards.RateLimited:429"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "body": "Can not resolve Examples/CustomerAddressRequest.raml"
              },
              "$ref": "#/definitions/CustomerAddress"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:CommerceCloudStandards.SiteSpecific:siteId"
          }
        ]
      },
      "parameters": [
        {
          "minLength": 1,
          "description": "The customer ID.",
          "type": "string",
          "in": "path",
          "name": "customerId",
          "required": true
        },
        {
          "description": "An identifier for the organization the request is being made by.",
          "type": "string",
          "in": "path",
          "name": "organizationId",
          "required": true
        }
      ]
    },
    "/organizations/{organizationId}/customers/{customerId}/addresses/{addressName}": {
      "get": {
        "description": "Retrieves a customer's address by address name. This endpoint accepts a registered customer ShopperToken (JWT) only.",
        "operationId": "getCustomerAddress",
        "produces": [
          "application/problem+json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": {
                "CustomerAddress": "Can not resolve Examples/CustomerAddressResponse.raml"
              }
            },
            "schema": {
              "$ref": "#/definitions/CustomerAddress"
            }
          },
          "400": {
            "$ref": "#/responses/trait:CustomerTraits.BadRequest:400"
          },
          "404": {
            "$ref": "#/responses/trait:CustomerTraits.NotFound:404"
          },
          "429": {
            "$ref": "#/responses/trait:ApiStandards.RateLimited:429"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:CommerceCloudStandards.SiteSpecific:siteId"
          }
        ]
      },
      "delete": {
        "description": "Deletes a customer's address by address name. This endpoint accepts a registered customer ShopperToken (JWT) only.",
        "operationId": "removeCustomerAddress",
        "produces": [
          "application/problem+json"
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            }
          },
          "400": {
            "$ref": "#/responses/trait:CustomerTraits.BadRequest:400"
          },
          "404": {
            "$ref": "#/responses/trait:CustomerTraits.NotFound:404"
          },
          "429": {
            "$ref": "#/responses/trait:ApiStandards.RateLimited:429"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:CommerceCloudStandards.SiteSpecific:siteId"
          }
        ]
      },
      "patch": {
        "description": "Updates a customer's address by address name. This endpoint accepts a registered customer ShopperToken (JWT) only.",
        "operationId": "updateCustomerAddress",
        "produces": [
          "application/problem+json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": {
                "customerAddress": "Can not resolve Examples/CustomerAddressRequest.raml"
              }
            },
            "schema": {
              "$ref": "#/definitions/CustomerAddress"
            }
          },
          "400": {
            "$ref": "#/responses/trait:CustomerTraits.BadRequest:400"
          },
          "404": {
            "$ref": "#/responses/trait:CustomerTraits.NotFound:404"
          },
          "429": {
            "$ref": "#/responses/trait:ApiStandards.RateLimited:429"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "body": "Can not resolve Examples/CustomerAddressResponse.raml"
              },
              "$ref": "#/definitions/CustomerAddress"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:CommerceCloudStandards.SiteSpecific:siteId"
          }
        ]
      },
      "parameters": [
        {
          "minLength": 1,
          "maxLength": 256,
          "description": "The name of the address to update.",
          "type": "string",
          "in": "path",
          "name": "addressName",
          "required": true
        },
        {
          "minLength": 1,
          "description": "The customer ID.",
          "type": "string",
          "in": "path",
          "name": "customerId",
          "required": true
        },
        {
          "description": "An identifier for the organization the request is being made by.",
          "type": "string",
          "in": "path",
          "name": "organizationId",
          "required": true
        }
      ]
    },
    "/organizations/{organizationId}/customers/{customerId}/baskets": {
      "get": {
        "description": "Gets the baskets of a customer. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.",
        "operationId": "getCustomerBaskets",
        "produces": [
          "application/problem+json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": {
                "basketsResult": "Can not resolve Examples/CustomerBasketsResult.raml"
              }
            },
            "schema": {
              "$ref": "#/definitions/BasketsResult"
            }
          },
          "400": {
            "$ref": "#/responses/trait:CustomerTraits.BadRequest:400"
          },
          "404": {
            "$ref": "#/responses/trait:CustomerTraits.NotFound:404"
          },
          "429": {
            "$ref": "#/responses/trait:ApiStandards.RateLimited:429"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:CommerceCloudStandards.SiteSpecific:siteId"
          }
        ]
      },
      "parameters": [
        {
          "minLength": 1,
          "description": "The customer ID.",
          "type": "string",
          "in": "path",
          "name": "customerId",
          "required": true
        },
        {
          "description": "An identifier for the organization the request is being made by.",
          "type": "string",
          "in": "path",
          "name": "organizationId",
          "required": true
        }
      ]
    },
    "/organizations/{organizationId}/customers/{customerId}/orders": {
      "get": {
        "description": "Returns a pageable list of all customer's orders. The default page size is 10. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.",
        "operationId": "getCustomerOrders",
        "produces": [
          "application/problem+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trait:CustomerTraits.OffsetPaginated:200"
          },
          "400": {
            "$ref": "#/responses/trait:CustomerTraits.BadRequest:400"
          },
          "404": {
            "$ref": "#/responses/trait:CustomerTraits.NotFound:404"
          },
          "429": {
            "$ref": "#/responses/trait:ApiStandards.RateLimited:429"
          }
        },
        "parameters": [
          {
            "type": "boolean",
            "in": "query",
            "name": "crossSites"
          },
          {
            "type": "string",
            "in": "query",
            "name": "from"
          },
          {
            "type": "string",
            "in": "query",
            "name": "until"
          },
          {
            "type": "string",
            "in": "query",
            "name": "status"
          },
          {
            "default": 10,
            "maximum": 50,
            "description": "Maximum records to retrieve per request, not to exceed 50. Defaults to 10.",
            "in": "query",
            "name": "limit",
            "type": "string"
          },
          {
            "$ref": "#/parameters/trait:CommerceCloudStandards.SiteSpecific:siteId"
          },
          {
            "$ref": "#/parameters/trait:CustomerTraits.OffsetPaginated:offset"
          }
        ]
      },
      "parameters": [
        {
          "minLength": 1,
          "description": "The customer ID.",
          "type": "string",
          "in": "path",
          "name": "customerId",
          "required": true
        },
        {
          "description": "An identifier for the organization the request is being made by.",
          "type": "string",
          "in": "path",
          "name": "organizationId",
          "required": true
        }
      ]
    },
    "/organizations/{organizationId}/customers/{customerId}/password": {
      "put": {
        "description": "Updates the customer's password. This endpoint accepts a registered customer ShopperToken (JWT) only.",
        "operationId": "updateCustomerPassword",
        "produces": [
          "application/problem+json"
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            }
          },
          "400": {
            "$ref": "#/responses/trait:CustomerTraits.BadRequest:400"
          },
          "404": {
            "$ref": "#/responses/trait:CustomerTraits.NotFound:404"
          },
          "429": {
            "$ref": "#/responses/trait:ApiStandards.RateLimited:429"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "currentPassword": "01dpass",
                "password": "newpass"
              },
              "$ref": "#/definitions/PasswordChangeRequest"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:CommerceCloudStandards.SiteSpecific:siteId"
          }
        ]
      },
      "parameters": [
        {
          "minLength": 1,
          "description": "The customer ID.",
          "type": "string",
          "in": "path",
          "name": "customerId",
          "required": true
        },
        {
          "description": "An identifier for the organization the request is being made by.",
          "type": "string",
          "in": "path",
          "name": "organizationId",
          "required": true
        }
      ]
    },
    "/organizations/{organizationId}/customers/{customerId}/payment-instruments": {
      "post": {
        "description": "Adds a payment instrument to the customer information. This endpoint accepts a registered customer ShopperToken (JWT) only.",
        "operationId": "createCustomerPaymentInstrument",
        "produces": [
          "application/problem+json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": {
                "customerPaymentInstrument": "Can not resolve Examples/CustomerPaymentInstrument.raml"
              }
            },
            "schema": {
              "$ref": "#/definitions/CustomerPaymentInstrument"
            }
          },
          "400": {
            "$ref": "#/responses/trait:CustomerTraits.BadRequest:400"
          },
          "404": {
            "$ref": "#/responses/trait:CustomerTraits.NotFound:404"
          },
          "429": {
            "$ref": "#/responses/trait:ApiStandards.RateLimited:429"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "customerPaymentInstrumentRequest": "Can not resolve Examples/CustomerPaymentInstrumentRequest.raml"
              },
              "$ref": "#/definitions/CustomerPaymentInstrumentRequest"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:CommerceCloudStandards.SiteSpecific:siteId"
          }
        ]
      },
      "parameters": [
        {
          "minLength": 1,
          "description": "The customer ID.",
          "type": "string",
          "in": "path",
          "name": "customerId",
          "required": true
        },
        {
          "description": "An identifier for the organization the request is being made by.",
          "type": "string",
          "in": "path",
          "name": "organizationId",
          "required": true
        }
      ]
    },
    "/organizations/{organizationId}/customers/{customerId}/payment-instruments/{paymentInstrumentId}": {
      "delete": {
        "description": "Deletes a customer's payment instrument. This endpoint accepts a registered customer ShopperToken (JWT) only.",
        "operationId": "deleteCustomerPaymentInstrument",
        "produces": [
          "application/problem+json"
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            }
          },
          "400": {
            "$ref": "#/responses/trait:CustomerTraits.BadRequest:400"
          },
          "404": {
            "$ref": "#/responses/trait:CustomerTraits.NotFound:404"
          },
          "429": {
            "$ref": "#/responses/trait:ApiStandards.RateLimited:429"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:CommerceCloudStandards.SiteSpecific:siteId"
          }
        ]
      },
      "get": {
        "description": "Retrieves a customer's payment instrument by its ID. This endpoint accepts a registered customer ShopperToken (JWT) only.",
        "operationId": "getCustomerPaymentInstrument",
        "produces": [
          "application/problem+json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": "Can not resolve Examples/CustomerPaymentInstrument.raml"
            },
            "schema": {
              "$ref": "#/definitions/CustomerPaymentInstrument"
            }
          },
          "400": {
            "$ref": "#/responses/trait:CustomerTraits.BadRequest:400"
          },
          "404": {
            "$ref": "#/responses/trait:CustomerTraits.NotFound:404"
          },
          "429": {
            "$ref": "#/responses/trait:ApiStandards.RateLimited:429"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:CommerceCloudStandards.SiteSpecific:siteId"
          }
        ]
      },
      "parameters": [
        {
          "minLength": 1,
          "description": "The ID of the payment instrument to be retrievedCustomer.",
          "type": "string",
          "in": "path",
          "name": "paymentInstrumentId",
          "required": true
        },
        {
          "minLength": 1,
          "description": "The customer ID.",
          "type": "string",
          "in": "path",
          "name": "customerId",
          "required": true
        },
        {
          "description": "An identifier for the organization the request is being made by.",
          "type": "string",
          "in": "path",
          "name": "organizationId",
          "required": true
        }
      ]
    },
    "/organizations/{organizationId}/customers/{customerId}/product-lists": {
      "get": {
        "description": "Returns all customer product lists. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.",
        "operationId": "getCustomerProductLists",
        "produces": [
          "application/problem+json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": {
                "customerProductListResult": "Can not resolve Examples/CustomerProductListResult.raml"
              }
            },
            "schema": {
              "$ref": "#/definitions/CustomerProductListResult"
            }
          },
          "400": {
            "$ref": "#/responses/trait:CustomerTraits.BadRequest:400"
          },
          "404": {
            "$ref": "#/responses/trait:CustomerTraits.NotFound:404"
          },
          "429": {
            "$ref": "#/responses/trait:ApiStandards.RateLimited:429"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:CommerceCloudStandards.SiteSpecific:siteId"
          }
        ]
      },
      "post": {
        "description": "Creates a customer product list. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.",
        "operationId": "createCustomerProductList",
        "produces": [
          "application/problem+json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": {
                "customerProductList": "Can not resolve Examples/PostCustomerProductList.raml"
              }
            },
            "schema": {
              "$ref": "#/definitions/CustomerProductList"
            }
          },
          "400": {
            "$ref": "#/responses/trait:CustomerTraits.BadRequest:400"
          },
          "404": {
            "$ref": "#/responses/trait:CustomerTraits.NotFound:404"
          },
          "429": {
            "$ref": "#/responses/trait:ApiStandards.RateLimited:429"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "customerProductList": "Can not resolve Examples/PostCustomerProductList.raml"
              },
              "$ref": "#/definitions/CustomerProductList"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:CommerceCloudStandards.SiteSpecific:siteId"
          }
        ]
      },
      "parameters": [
        {
          "minLength": 1,
          "description": "The customer ID.",
          "type": "string",
          "in": "path",
          "name": "customerId",
          "required": true
        },
        {
          "description": "An identifier for the organization the request is being made by.",
          "type": "string",
          "in": "path",
          "name": "organizationId",
          "required": true
        }
      ]
    },
    "/organizations/{organizationId}/customers/{customerId}/product-lists/{listId}": {
      "delete": {
        "description": "Deletes a customer product list. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer  ShopperToken.",
        "operationId": "deleteCustomerProductList",
        "produces": [
          "application/problem+json"
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            }
          },
          "400": {
            "$ref": "#/responses/trait:CustomerTraits.BadRequest:400"
          },
          "404": {
            "$ref": "#/responses/trait:CustomerTraits.NotFound:404"
          },
          "429": {
            "$ref": "#/responses/trait:ApiStandards.RateLimited:429"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:CommerceCloudStandards.SiteSpecific:siteId"
          }
        ]
      },
      "get": {
        "description": "Returns a customer product list of the given customer and the items in the list. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.",
        "operationId": "getCustomerProductList",
        "produces": [
          "application/problem+json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": {
                "customerProductList": "Can not resolve Examples/GetCustomerProductListByListId.raml"
              }
            },
            "schema": {
              "$ref": "#/definitions/CustomerProductList"
            }
          },
          "400": {
            "$ref": "#/responses/trait:CustomerTraits.BadRequest:400"
          },
          "404": {
            "$ref": "#/responses/trait:CustomerTraits.NotFound:404"
          },
          "429": {
            "$ref": "#/responses/trait:ApiStandards.RateLimited:429"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:CommerceCloudStandards.SiteSpecific:siteId"
          }
        ]
      },
      "patch": {
        "description": "Changes a product list. Changeable properties are the name, description, and if the list is public. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.",
        "operationId": "updateCustomerProductList",
        "produces": [
          "application/problem+json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": {
                "customerProductList": "Can not resolve Examples/UpdateCustomerProductListByListId.raml"
              }
            },
            "schema": {
              "$ref": "#/definitions/CustomerProductList"
            }
          },
          "400": {
            "$ref": "#/responses/trait:CustomerTraits.BadRequest:400"
          },
          "404": {
            "$ref": "#/responses/trait:CustomerTraits.NotFound:404"
          },
          "429": {
            "$ref": "#/responses/trait:ApiStandards.RateLimited:429"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "description": "Description"
              },
              "$ref": "#/definitions/CustomerProductList"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:CommerceCloudStandards.SiteSpecific:siteId"
          }
        ]
      },
      "parameters": [
        {
          "minLength": 1,
          "maxLength": 28,
          "description": "The product list ID.",
          "type": "string",
          "in": "path",
          "name": "listId",
          "required": true
        },
        {
          "minLength": 1,
          "description": "The customer ID.",
          "type": "string",
          "in": "path",
          "name": "customerId",
          "required": true
        },
        {
          "description": "An identifier for the organization the request is being made by.",
          "type": "string",
          "in": "path",
          "name": "organizationId",
          "required": true
        }
      ]
    },
    "/organizations/{organizationId}/customers/{customerId}/product-lists/{listId}/items": {
      "post": {
        "description": "Adds an item to the customer's product list. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.\n\nConsidered values from the request body are:\n\n- `type` â†’ The type of the item to be added to the customer's product. Must be a valid type. Mandatory.\nlist.\n- `priority` â†’ The priority of the item to be added to the customer's product list.\n- `public` â†’ The flag that determines whether the item to be added to the customer's product list is public.\n- `product_id` â†’ The ID (SKU) of the product related to the item to be added to the customer's product list. A valid product ID, used for product item type only. Must be a valid product ID; otherwise, a `ProductListProductIdMissingException` or `ProductListProductNotFoundException` is thrown. Mandatory when item type is `product`.\n- `quantity` â†’ Used for product item type only. This is the quantity of the item to be added to the customer's product list.\n\nYou can also use a custom property of the form `c_<CUSTOM_NAME>`. The custom property must correspond to a custom attribute (`<CUSTOM_NAME>`) that is defined for `ProductListItem`. The value of this property must be valid for the type of custom attribute defined for `ProductListItem`.",
        "operationId": "createCustomerProductListItem",
        "produces": [
          "application/problem+json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": {
                "customerProductListItem": "Can not resolve Examples/UpdateCustomerProductListItem.raml"
              }
            },
            "schema": {
              "$ref": "#/definitions/CustomerProductListItem"
            }
          },
          "400": {
            "$ref": "#/responses/trait:CustomerTraits.BadRequest:400"
          },
          "404": {
            "$ref": "#/responses/trait:CustomerTraits.NotFound:404"
          },
          "429": {
            "$ref": "#/responses/trait:ApiStandards.RateLimited:429"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "customerProductListItem": "Can not resolve Examples/UpdateCustomerProductListItem.raml"
              },
              "$ref": "#/definitions/CustomerProductListItem"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:CommerceCloudStandards.SiteSpecific:siteId"
          }
        ]
      },
      "parameters": [
        {
          "minLength": 1,
          "maxLength": 28,
          "description": "The product list ID.",
          "type": "string",
          "in": "path",
          "name": "listId",
          "required": true
        },
        {
          "minLength": 1,
          "description": "The customer ID.",
          "type": "string",
          "in": "path",
          "name": "customerId",
          "required": true
        },
        {
          "description": "An identifier for the organization the request is being made by.",
          "type": "string",
          "in": "path",
          "name": "organizationId",
          "required": true
        }
      ]
    },
    "/organizations/{organizationId}/customers/{customerId}/product-lists/{listId}/items/{itemId}": {
      "delete": {
        "description": "Removes an item from a customer product list. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.",
        "operationId": "deleteCustomerProductListItem",
        "produces": [
          "application/problem+json"
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            }
          },
          "404": {
            "$ref": "#/responses/trait:CustomerTraits.NotFound:404"
          },
          "429": {
            "$ref": "#/responses/trait:ApiStandards.RateLimited:429"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:CommerceCloudStandards.SiteSpecific:siteId"
          }
        ]
      },
      "get": {
        "description": "Returns an item of a customer product list and the actual product details like image, availability and price. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.",
        "operationId": "getCustomerProductListItem",
        "produces": [
          "application/problem+json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": "Can not resolve Examples/CustomerProductListItem.raml"
            },
            "schema": {
              "$ref": "#/definitions/CustomerProductListItem"
            }
          },
          "400": {
            "$ref": "#/responses/trait:CustomerTraits.BadRequest:400"
          },
          "404": {
            "$ref": "#/responses/trait:CustomerTraits.NotFound:404"
          },
          "429": {
            "$ref": "#/responses/trait:ApiStandards.RateLimited:429"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:CommerceCloudStandards.SiteSpecific:siteId"
          }
        ]
      },
      "patch": {
        "description": "Updates an item of a customer's product list. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.\nConsidered values from the request body are:\n\npriority: This is the priority of the customer's product list item.\npublic: This is the flag whether the customer's product list item is public.\nquantity: This is the quantity of\nthe customer's product list item. Used for product item type only. \ncustom properties in the form c_<CUSTOM_NAME>: The custom property\nmust correspond to a custom attribute (<CUSTOM_NAME>) defined for ProductListItem.\nThe value of this property must be valid for the type of custom attribute defined for ProductListItem.",
        "operationId": "updateCustomerProductListItem",
        "produces": [
          "application/problem+json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": "Can not resolve Examples/UpdateCustomerProductListItem.raml"
            },
            "schema": {
              "$ref": "#/definitions/CustomerProductListItem"
            }
          },
          "404": {
            "$ref": "#/responses/trait:CustomerTraits.NotFound:404"
          },
          "429": {
            "$ref": "#/responses/trait:ApiStandards.RateLimited:429"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": "Can not resolve Examples/CustomerProductListItemRequest.raml",
              "$ref": "#/definitions/CustomerProductListItem"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:CommerceCloudStandards.SiteSpecific:siteId"
          }
        ]
      },
      "parameters": [
        {
          "minLength": 1,
          "maxLength": 28,
          "description": "The ID of the product list item to update.",
          "type": "string",
          "in": "path",
          "name": "itemId",
          "required": true
        },
        {
          "minLength": 1,
          "maxLength": 28,
          "description": "The product list ID.",
          "type": "string",
          "in": "path",
          "name": "listId",
          "required": true
        },
        {
          "minLength": 1,
          "description": "The customer ID.",
          "type": "string",
          "in": "path",
          "name": "customerId",
          "required": true
        },
        {
          "description": "An identifier for the organization the request is being made by.",
          "type": "string",
          "in": "path",
          "name": "organizationId",
          "required": true
        }
      ]
    },
    "/organizations/{organizationId}/product-lists": {
      "get": {
        "description": "Retrieves all public product lists as defined by the given search term (for example, email OR first name and last name). This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.",
        "operationId": "getPublicProductListsBySearchTerm",
        "produces": [
          "application/problem+json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": {
                "publicProductListResult": "Can not resolve Examples/productLists-result-example.raml"
              }
            },
            "schema": {
              "$ref": "#/definitions/PublicProductListResult"
            }
          },
          "400": {
            "$ref": "#/responses/trait:CustomerTraits.BadRequest:400"
          },
          "401": {
            "$ref": "#/responses/trait:CustomerTraits.Unauthorized:401"
          },
          "404": {
            "$ref": "#/responses/trait:CustomerTraits.NotFound:404"
          },
          "429": {
            "$ref": "#/responses/trait:ApiStandards.RateLimited:429"
          }
        },
        "parameters": [
          {
            "description": "The email address of the customer the product lists belong to.",
            "type": "string",
            "in": "query",
            "name": "email"
          },
          {
            "description": "The first name of the customer the product lists belong to.",
            "type": "string",
            "in": "query",
            "name": "firstName"
          },
          {
            "description": "The last name of the customer the product lists belong to.",
            "type": "string",
            "in": "query",
            "name": "lastName"
          },
          {
            "$ref": "#/parameters/trait:CommerceCloudStandards.SiteSpecific:siteId"
          }
        ]
      },
      "parameters": [
        {
          "description": "An identifier for the organization the request is being made by.",
          "type": "string",
          "in": "path",
          "name": "organizationId",
          "required": true
        }
      ]
    },
    "/organizations/{organizationId}/product-lists/{listId}": {
      "get": {
        "description": "Retrieves a public product list by ID and the items under that product list. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.",
        "operationId": "getPublicProductList",
        "produces": [
          "application/problem+json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": {
                "publicProductList": "Can not resolve Examples/productListsID-result-example.raml"
              }
            },
            "schema": {
              "$ref": "#/definitions/PublicProductList"
            }
          },
          "400": {
            "$ref": "#/responses/trait:CustomerTraits.BadRequest:400"
          },
          "401": {
            "$ref": "#/responses/trait:CustomerTraits.Unauthorized:401"
          },
          "404": {
            "$ref": "#/responses/trait:CustomerTraits.NotFound:404"
          },
          "429": {
            "$ref": "#/responses/trait:ApiStandards.RateLimited:429"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:CommerceCloudStandards.SiteSpecific:siteId"
          }
        ]
      },
      "parameters": [
        {
          "minLength": 1,
          "maxLength": 28,
          "description": "The ID of the list.",
          "type": "string",
          "in": "path",
          "name": "listId",
          "required": true
        },
        {
          "description": "An identifier for the organization the request is being made by.",
          "type": "string",
          "in": "path",
          "name": "organizationId",
          "required": true
        }
      ]
    },
    "/organizations/{organizationId}/product-lists/{listId}/items/{itemId}": {
      "get": {
        "description": "Retrieves an item from a public product list and the actual product details like product, image, availability and price. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.",
        "operationId": "getProductListItem",
        "produces": [
          "application/problem+json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": {
                "PublicProductListItem": "Can not resolve Examples/PublicProductListItem.raml"
              }
            },
            "schema": {
              "$ref": "#/definitions/PublicProductListItem"
            }
          },
          "400": {
            "$ref": "#/responses/trait:CustomerTraits.BadRequest:400"
          },
          "401": {
            "$ref": "#/responses/trait:CustomerTraits.Unauthorized:401"
          },
          "404": {
            "$ref": "#/responses/trait:CustomerTraits.NotFound:404"
          },
          "429": {
            "$ref": "#/responses/trait:ApiStandards.RateLimited:429"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:CommerceCloudStandards.SiteSpecific:siteId"
          }
        ]
      },
      "parameters": [
        {
          "minLength": 1,
          "description": "The ID of the item.",
          "type": "string",
          "in": "path",
          "name": "itemId",
          "required": true
        },
        {
          "minLength": 1,
          "maxLength": 28,
          "description": "The ID of the list.",
          "type": "string",
          "in": "path",
          "name": "listId",
          "required": true
        },
        {
          "description": "An identifier for the organization the request is being made by.",
          "type": "string",
          "in": "path",
          "name": "organizationId",
          "required": true
        }
      ]
    }
  }
}