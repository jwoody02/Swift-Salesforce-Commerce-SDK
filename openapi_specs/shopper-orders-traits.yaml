{
  "swagger": "2.0",
  "info": {},
  "securityDefinitions": {
    "CommerceCloudStandards.AmOAuth2": {
      "description": "AccountManager OAuth 2.0 bearer token Authentication.\n",
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https://account.demandware.com/dwsso/oauth2/authorize",
      "tokenUrl": "https://account.demandware.com/dwsso/oauth2/access_token",
      "scopes": {}
    },
    "CommerceCloudStandards.ShopperToken": {
      "description": "`ShopperToken` authentication follows the authorization code grant flow, as defined by the OAuth 2.1 standard. Depending on the type of OAuth client (public or private), this authorization flow has further requirements. For a detailed description of the authorization flow, see the [SLAS overview](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-login:Summary).\nA shopper token allows you to access the Shopper API endpoints of both OCAPI and the B2C Commerce API. These endpoints can be used to build headless storefronts and other applications.\nThe `ShopperToken` security scheme is a parent of other security schemes, such as `ShopperTokenTsob`. A Shopper API endpoint can require a specific child scheme (`ShopperTokenTsob`, for example) that cannot be accessed with a regular shopper token.\n",
      "type": "apiKey",
      "in": "header",
      "name": "Authorization"
    },
    "CommerceCloudStandards.BearerToken": {
      "description": "A security scheme that supplements APIs secured with `AmOAuth2` to support the usage of the mocking service. Expects a valid Bearer token passed in the `Authorization` header to permit API access.",
      "type": "apiKey",
      "in": "header",
      "name": "Authorization"
    },
    "CommerceCloudStandards.ShopperTokenTsob": {
      "description": "`ShopperTokenTsob` (Tsob = trusted system on behalf) is a child of the `ShopperToken` security scheme and extends the functionality of `ShopperToken` for specific use cases. \nA token of type `ShopperTokenTsob` allows you to access Shopper API endpoints, including OCAPI and Salesforce Commerce API for headless applications. Besides endpoints that require this specific subtype, all other endpoints secured by the `ShopperToken` parent scheme can be accessed with a `ShopperTokenTsob`. \nTo learn how to get a `ShopperTokenTsob` token, see [getTrustedSystemAccessToken](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-login:getTrustedSystemAccessToken).\n",
      "type": "oauth2",
      "flow": "application",
      "tokenUrl": "https://{short-code}.api.commercecloud.salesforce.com/shopper/auth/v1/organizations/{organizationId}/oauth2/trusted-system/token",
      "scopes": {}
    },
    "CommerceCloudStandards.ShopperTokenTaob": {
      "description": "`ShopperTokenTaob` (Taob = trusted agent on behalf) is a child of the `ShopperToken` security scheme and extends the functionality of `ShopperToken` for specific use cases. \nA token of type `ShopperTokenTaob` allows you to access Shopper API endpoints, including OCAPI and Salesforce Commerce API for headless applications. Besides endpoints that require this specific subtype, all other endpoints secured by the `ShopperToken` parent scheme can be accessed with a `ShopperTokenTaob`. \nTo get a `ShopperTokenTaob` token, a `Taob` session needs to be created first (see [getTrustedAgentAuthorizationToken](https://developer.salesforce.com/docs/commerce/commerce-api/references/shopper-login?meta=getTrustedAgentAuthorizationToken)). Afterwards the `ShopperTokenTaob` token can be gained (see [getTrustedAgentAccessToken](https://developer.salesforce.com/docs/commerce/commerce-api/references/shopper-login?meta=getTrustedAgentAccessToken)).\nFor more information regarding the `Taob` flow see also [Trusted Agent Authorization](https://developer.salesforce.com/docs/commerce/commerce-api/guide/slas-trusted-agent.html).\n",
      "type": "oauth2",
      "flow": "application",
      "tokenUrl": "https://{short-code}.api.commercecloud.salesforce.com/shopper/auth/v1/organizations/{organizationId}/oauth2/trusted-agent/token",
      "scopes": {}
    }
  },
  "definitions": {
    "CommerceCloudStandards.ISO.ISOCurrency": {
      "pattern": "^[A-Z][A-Z][A-Z]$",
      "description": "A three letter uppercase currency code conforming to the [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) standard.",
      "example": "USD",
      "type": "string"
    },
    "CommerceCloudStandards.ISO.NoValue": {
      "default": "N/A",
      "description": "A specialized value indicating the lack of definition of a currency, for example, if the value of the monetary value of the currency is an undefined number.",
      "example": "N/A",
      "enum": [
        "N/A"
      ],
      "type": "string"
    },
    "CommerceCloudStandards.ISO.Currency": {
      "description": "A three letter uppercase currency code conforming to the [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) standard, or the string `N/A` indicating that a currency is not applicable.",
      "example": "USD",
      "type": "string"
    },
    "CommerceCloudStandards.ISO.MoneyMnemonic": {
      "description": "A combination of a Currency and an amount of that Currency.",
      "type": "object",
      "properties": {
        "currencyMnemonic": {
          "$ref": "#/definitions/CommerceCloudStandards.ISO.Currency"
        },
        "value": {
          "format": "double",
          "description": "The amount of money for the given currency.",
          "example": 1234.56,
          "type": "number"
        }
      }
    },
    "CommerceCloudStandards.ISO.Country": {
      "pattern": "^[A-Z][A-Z]$",
      "description": "A two letter uppercase country code conforming to the [ISO 3166-1](https://www.iso.org/iso-3166-country-codes.html) alpha-2 standard.",
      "example": "US",
      "type": "string"
    },
    "CommerceCloudStandards.ISO.Language": {
      "pattern": "^[a-z][a-z]$",
      "description": "A two letter lowercase language code conforming to the [ISO 639-1](https://www.iso.org/iso-639-language-codes.html) standard. Additionally, this may be used to submit requests with the header parameter `Accept-Language`, following [RFC 2616](https://tools.ietf.org/html/rfc2616) & [RFC 1766](https://tools.ietf.org/html/rfc1766).",
      "example": "en",
      "type": "string"
    },
    "CommerceCloudStandards.ISO.LanguageCountry": {
      "pattern": "^[a-z][a-z]-[A-Z][A-Z]$",
      "description": "A concatenated version of the standard Language and Country codes, combined with a hyphen '`-`'.",
      "example": "en-US",
      "type": "string"
    },
    "CommerceCloudStandards.ISO.Locale": {
      "description": "A descriptor for a geographical region by both a language and country code. By combining these two, regional differences in a language can be addressed, such as with the request header parameter `Accept-Language` following [RFC 2616](https://tools.ietf.org/html/rfc2616) & [RFC 1766](https://tools.ietf.org/html/rfc1766). This can also just refer to a language code, also RFC 2616/1766 compliant, as a default if there is no specific match for a country. Finally, can also be used to define default behavior if there is no locale specified.",
      "type": "string"
    },
    "CommerceCloudStandards.ISO.DefaultFallback": {
      "default": "default",
      "description": "A specialized value indicating the system default values for locales.",
      "example": "default",
      "enum": [
        "default"
      ],
      "type": "string"
    },
    "CommerceCloudStandards.ISO.L10nString": {
      "description": "A string with content that can differ by locale. Rather than being stored as an individual value, it is stored as a map of a LocaleCode and the translated value in that locale. \n\nAcceptable keys are two-character language codes, the language code followed by a hyphen and a two-character country code, or the term default, representing a fallback locale if no other locale could be resolved.",
      "example": {
        "default": "The quick brown fox jumps over the lazy dog.",
        "en": "The quick brown fox jumps over the lazy dog.",
        "en-US": "The quick brown fox jumps over the lazy dog.",
        "en-CA": "The quick brown fox jumps over the lazy dog.",
        "es": "El rápido zorro marrón salta sobre el perro perezoso."
      },
      "type": "object",
      "additionalProperties": {
        "type": "string"
      }
    },
    "CommerceCloudStandards.AdditionalProperties.NoPropertiesAllowed": {
      "description": "This type is intended as an abstract super type that indicates that no additional properties are supported for this type and its sub types. All types that do not support any additional properties should inherit from this type. This type is not allowed to be used directly in any API and should always be extended.",
      "type": "object",
      "additionalProperties": false
    },
    "CommerceCloudStandards.AdditionalProperties.SpecifiedPropertiesAllowed": {
      "description": "This type is intended as an abstract super type that indicates that additional properties are supported for this type and its sub types (unless one of those subtypes inherits from `ClosedObject`). All types that support any additional properties should inherit from this type. This type is not allowed to be used directly in any API and should always be extended.\n\nTo indicate that the properties were defined and expected to be handled as additional properties, they are expected to be prefixed with a `c_`. The type will reject any property that does not fit this pattern, only allowing additional properties beginning with the known prefix.",
      "type": "object",
      "additionalProperties": {
        "title": "Additional Property Support",
        "description": "This type supports additional properties passed along with the defined properties of this API. To indicate that the properties were defined and expected to be handled as additional properties, they are expected to be prefixed with a `c_`. The type will reject any property that does not fit this pattern, only allowing additional properties beginning with the known prefix.",
        "example": "c_faxNumber",
        "type": "string"
      }
    },
    "CommerceCloudStandards.AttributeDefinitions.AttributeDefinition": {
      "description": "A collection of metadata describing the properties of a type. This can include properties that are provided by the system, and properties that are defined by the merchant to extend the base types.",
      "$ref": "#/definitions/CommerceCloudStandards.AdditionalProperties.NoPropertiesAllowed"
    },
    "CommerceCloudStandards.AttributeDefinitions.PropertyValueDefinition": {
      "description": "Represents an actual or possible value for a property",
      "$ref": "#/definitions/CommerceCloudStandards.AdditionalProperties.NoPropertiesAllowed"
    },
    "CommerceCloudStandards.Pagination.Offset": {
      "default": 0,
      "minimum": 0,
      "format": "int64",
      "description": "Used to retrieve the results based on a particular resource offset.",
      "type": "integer"
    },
    "CommerceCloudStandards.Pagination.Limit": {
      "default": 10,
      "minimum": 1,
      "format": "int32",
      "description": "Maximum records to retrieve per request, not to exceed the maximum defined. A limit must be at least 1 so at least one record is returned (if any match the criteria).",
      "type": "integer"
    },
    "CommerceCloudStandards.Pagination.Total": {
      "default": 0,
      "minimum": 0,
      "format": "int64",
      "description": "The total number of hits that match the search's criteria. This can be greater than the number of results returned as search results are pagenated.",
      "type": "integer"
    },
    "CommerceCloudStandards.Search.BoolFilter": {
      "description": "Allows you to combine other filters into (possibly recursive) logical expression trees. A boolean filter is composed of a logical operator (`AND`, `OR`, `NOT`) and a list of filters that the operator relates to. Multiple filters can be negated with a single `NOT` operator, even when the filters are combined with the `AND` operator.",
      "example": {
        "operator": "and",
        "filters": [
          {
            "termFilter": {
              "field": "id",
              "operator": "is",
              "values": [
                "myId"
              ]
            }
          },
          {
            "termFilter": {
              "field": "couponId",
              "operator": "is",
              "values": [
                "couponOne"
              ]
            }
          }
        ]
      },
      "type": "object",
      "properties": {
        "filters": {
          "description": "A list of filters that are logically combined by an operator.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CommerceCloudStandards.Search.Filter"
          }
        },
        "operator": {
          "description": "The logical operator that is used to combine the filters.",
          "enum": [
            "and",
            "or",
            "not"
          ],
          "type": "string"
        }
      },
      "required": [
        "operator"
      ]
    },
    "CommerceCloudStandards.Search.BoolQuery": {
      "description": "A boolean query allows construction of full logical expression trees that are composed of other queries (usually term queries and text queries). A boolean query has three sets of clauses:\n  \n  - `must`, which combines as an `AND` operator.\n  - `should`, which combines as an `OR` operator.\n  - `must_not`, which combines as a `NOT` operator.\n  \nIf `must`, `mustNot`, or `should` appear in the same boolean query, they are combined logically using the `AND` operator. For example:\n\n    (must-1 AND must-1 AND ...)\n      AND (should-1 OR should-2 OR ...)\n      AND NOT (must_not-1 OR must_not-2 OR ...)\n",
      "type": "object",
      "example": {
        "must": [
          {
            "textQuery": {
              "fields": [
                "couponId"
              ],
              "searchPhrase": "DEAL"
            }
          }
        ],
        "should": [
          {
            "textQuery": {
              "fields": [
                "couponId"
              ],
              "searchPhrase": "DEAL"
            }
          },
          {
            "textQuery": {
              "fields": [
                "couponId",
                "description"
              ],
              "searchPhrase": "sale"
            }
          }
        ],
        "must_not": [
          {
            "textQuery": {
              "fields": [
                "description"
              ],
              "searchPhrase": "Big bargain"
            }
          }
        ]
      },
      "properties": {
        "must": {
          "description": "List of queries to be evaluated as an `AND` operator.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CommerceCloudStandards.Search.Query"
          }
        },
        "mustNot": {
          "description": "List of queries to be evaluated as a `NOT` operator.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CommerceCloudStandards.Search.Query"
          }
        },
        "should": {
          "description": "List of queries to be evaluated as an `OR` operator.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CommerceCloudStandards.Search.Query"
          }
        }
      }
    },
    "CommerceCloudStandards.Search.Filter": {
      "minProperties": 1,
      "maxProperties": 1,
      "description": "Contains a set of objects that define criteria used to select records. A filter can contain one of the following:\n  * `TermFilter`\n   - Matches records where a field (or fields) exactly matches some simple value (including `null`).\n  * `RangeFilter`\n   - Matches records where a field value lies within a specified range.\n  * `Range2Filter`\n   - Matches records in a specified range across fields.\n  * `QueryFilter`\n   - Matches records based on a query.\n  * `BoolFilter`\n   - Provides filtering of records using a set of filters combined using a logical operator.",
      "example": {
        "termFilter": {
          "field": "enabled",
          "operator": "is",
          "values": [
            false
          ]
        }
      },
      "type": "object",
      "properties": {
        "boolFilter": {
          "$ref": "#/definitions/CommerceCloudStandards.Search.BoolFilter"
        },
        "queryFilter": {
          "$ref": "#/definitions/CommerceCloudStandards.Search.QueryFilter"
        },
        "range2Filter": {
          "$ref": "#/definitions/CommerceCloudStandards.Search.Range2Filter"
        },
        "rangeFilter": {
          "$ref": "#/definitions/CommerceCloudStandards.Search.RangeFilter"
        },
        "termFilter": {
          "$ref": "#/definitions/CommerceCloudStandards.Search.TermFilter"
        }
      }
    },
    "CommerceCloudStandards.Search.FilteredQuery": {
      "description": "Allows to filter the result of a possibly complex query using a possibly complex filter.",
      "example": {
        "query": {
          "textQuery": {
            "fields": [
              "couponId"
            ],
            "searchPhrase": "disabled"
          }
        },
        "filter": {
          "termFilter": {
            "field": "enabled",
            "operator": "is",
            "values": [
              false
            ]
          }
        }
      },
      "type": "object",
      "properties": {
        "filter": {
          "description": "The possibly complex filter object.",
          "$ref": "#/definitions/CommerceCloudStandards.Search.Filter"
        },
        "query": {
          "description": "The query object.",
          "$ref": "#/definitions/CommerceCloudStandards.Search.Query"
        }
      },
      "required": [
        "filter",
        "query"
      ]
    },
    "CommerceCloudStandards.Search.MatchAllQuery": {
      "description": "Matches all documents (namespace and document type). This query comes in handy if you just want to filter a search result or really do not have any constraints.",
      "type": "object"
    },
    "CommerceCloudStandards.Search.NestedQuery": {
      "description": "Allows you to query nested documents that are part of a larger document. Say, for example, that you have a main product with variations in one big document, and you want to constrain a search to main products that have variations that match multiple constraints. \n\nA `NestedQuery` is only supported by some Commerce APIs. For more details, see the endpoint descriptions in the API documentation.\n",
      "example": {
        "path": "order.shippingAddresses",
        "query": {
          "boolQuery": {
            "must": [
              {
                "boolQuery": {
                  "must": [
                    {
                      "termQuery": {
                        "fields": [
                          "order.shippingAddresses.firstName"
                        ],
                        "operator": "is",
                        "values": [
                          "John"
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "boolQuery": {
                  "must": [
                    {
                      "termQuery": {
                        "fields": [
                          "order.shippingAddresses.lastName"
                        ],
                        "operator": "is",
                        "values": [
                          "Doe"
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        "scoreMode": "avg"
      },
      "type": "object",
      "properties": {
        "path": {
          "description": "The path to the nested document.",
          "type": "string"
        },
        "query": {
          "description": "The query to run on the nested document.",
          "$ref": "#/definitions/CommerceCloudStandards.Search.Query"
        },
        "scoreMode": {
          "description": "Indicates how scores for matching child objects affect the root parent document’s relevance score.",
          "enum": [
            "avg",
            "total",
            "max",
            "none"
          ],
          "type": "string"
        }
      },
      "required": [
        "path",
        "query"
      ]
    },
    "CommerceCloudStandards.Search.Query": {
      "minProperties": 1,
      "maxProperties": 1,
      "description": "A set of objects that define criteria used to select records. A query can contain one of the following:\n* `MatchAllQuery`\n - Matches all documents.\n* `TermQuery`\n - Matches one or more documents against one or more document fields.\n* `TextQuery`\n - Matches text against one or more fields.\n* `BoolQuery`\n - Allows construction of a logical expression of multiple queries.\n* `FilteredQuery`\n - Allows a filter to be applied to a query.\n* `NestedQuery`\n - Allows you to query on nested documents.\n - _Only supported by some Commerce APIs. For more details, see the endpoint descriptions in the API documentation._",
      "example": {
        "filteredQuery": {
          "query": {
            "textQuery": {
              "fields": [
                "couponId"
              ],
              "searchPhrase": "disabled"
            }
          },
          "filter": {
            "termFilter": {
              "field": "enabled",
              "operator": "is",
              "values": [
                false
              ]
            }
          }
        }
      },
      "type": "object",
      "properties": {
        "boolQuery": {
          "$ref": "#/definitions/CommerceCloudStandards.Search.BoolQuery"
        },
        "filteredQuery": {
          "$ref": "#/definitions/CommerceCloudStandards.Search.FilteredQuery"
        },
        "matchAllQuery": {
          "$ref": "#/definitions/CommerceCloudStandards.Search.MatchAllQuery"
        },
        "nestedQuery": {
          "$ref": "#/definitions/CommerceCloudStandards.Search.NestedQuery"
        },
        "termQuery": {
          "$ref": "#/definitions/CommerceCloudStandards.Search.TermQuery"
        },
        "textQuery": {
          "$ref": "#/definitions/CommerceCloudStandards.Search.TextQuery"
        }
      }
    },
    "CommerceCloudStandards.Search.QueryFilter": {
      "description": "Wraps any query and allows it to be used as a filter.",
      "example": {
        "query": {
          "termQuery": {
            "fields": [
              "enabled",
              "active"
            ],
            "operator": "is",
            "values": [
              false
            ]
          }
        }
      },
      "type": "object",
      "properties": {
        "query": {
          "description": "The query to use as a filter.",
          "$ref": "#/definitions/CommerceCloudStandards.Search.Query"
        }
      },
      "required": [
        "query"
      ]
    },
    "CommerceCloudStandards.Search.Range2Filter": {
      "description": "Allows you to restrict a search result to hits where a range defined by specified attributes has a certain relationship to a specified range.\n\nThe first range (R1) is defined by a pair of attributes (`fromField` and `toField`) that specify the extent of a range, such as attributes `validFrom` and `validTo`.\n\nThe second range (R2) is defined by `fromValue` and `toValue`.\n\nThe filter mode specifies the method used to compare the two ranges:\n\n* `overlap`: R1 overlaps fully or partially with R2.\n* `containing`: R1 contains R2.\n* `contained`: R1 is contained in R2.\n\nThe range filter supports several value types, and relies on the natural sorting of the value type for range interpretation. Value ranges can be open-ended, but only at one end of the range. You can configure whether the lower bounds and upper bounds are inclusive or exclusive.\n\nA range 2 filter is useful for general restrictions that can be shared between searches (like a static date range) because the filter result is cached in memory. Range filters are not appropriate if the range is expected to be different for every query (for example, if the user controls the date range down to the hour via a UI control). Range filters are inclusive by default.",
      "example": {
        "fromField": "validFrom",
        "toField": "validTo",
        "filterMode": "overlap",
        "fromValue": "2007-01-01T00:00:00.000Z",
        "toValue": "2017-01-01T00:00:00.000Z"
      },
      "type": "object",
      "properties": {
        "filterMode": {
          "default": "overlap",
          "description": "Compare mode: overlap, containing, or contained.",
          "enum": [
            "overlap",
            "containing",
            "contained"
          ],
          "type": "string"
        },
        "fromField": {
          "description": "The field name of the field that starts the first range.",
          "type": "string"
        },
        "fromInclusive": {
          "default": true,
          "description": "A flag indicating if the lower bound of the second range is inclusive. To make the lower bound exclusive, set to `false`.",
          "type": "boolean"
        },
        "fromValue": {
          "description": "The lower bound of the second range. If not specified, the range is open-ended with respect to the lower bound. You can't leave both the lower and upper bounds open-ended.",
          "type": "string"
        },
        "toField": {
          "description": "The field name of the field that ends the first range.",
          "type": "string"
        },
        "toInclusive": {
          "default": true,
          "description": "A flag indicating if the upper bound of the second range is inclusive. To make the lower bound exclusive, set to `false`.",
          "type": "boolean"
        },
        "toValue": {
          "description": "The upper bound of the second range. If not specified, the range is open-ended with respect to the upper bound. You can't leave both the upper and lower bounds open-ended.",
          "type": "string"
        }
      },
      "required": [
        "fromField",
        "toField"
      ]
    },
    "CommerceCloudStandards.Search.RangeFilter": {
      "description": "Allows you to restrict a search result to hits that have values for a given attribute that fall within a given value range. The range filter supports several value types and relies on the natural sorting of the value type for range interpretation. Value ranges can be open-ended, but only at one end of the range. You can configure whether the lower bounds and upper bounds are inclusive or exclusive.\n\nA range filter is useful for general restrictions that can be shared between searches (like a static date range) because the filter result is cached in memory. Range filters are not appropriate if the range is expected to be different for every query (for example, if the user controls the date range down to the hour via a UI control). Range filters are inclusive by default.",
      "example": {
        "field": "redemptionCount",
        "from": 0,
        "to": 10,
        "fromInclusive": false
      },
      "type": "object",
      "properties": {
        "field": {
          "description": "The search field.",
          "type": "string"
        },
        "from": {
          "description": "The lower bound of the filter range. If not specified, the range is open-ended with respect to the lower bound. You can't leave both the lower and upper bounds open-ended.",
          "type": "string"
        },
        "fromInclusive": {
          "default": true,
          "description": "A flag indicating if the lower bound of the range is inclusive. To make the lower bound exclusive, set to `false`.",
          "type": "boolean"
        },
        "to": {
          "description": "The upper bound of the filter range. If not specified, the range is open-ended with respect to the upper bound. You can't leave both the upper and lower bounds open-ended.",
          "type": "string"
        },
        "toInclusive": {
          "default": true,
          "description": "A flag indicating if the upper bound of the range is inclusive. To make the upper bound exclusive, set to `false`.",
          "type": "boolean"
        }
      },
      "required": [
        "field"
      ]
    },
    "CommerceCloudStandards.Search.SearchRequestBase": {
      "description": "Document representing a search request for retrieving items within the Data API. The query is a potentially complex set of expressions. The fields and expands that each query supports are defined within the search resource.",
      "example": {
        "limit": 4,
        "query": {
          "textQuery": {
            "fields": [
              "id",
              "description"
            ],
            "searchPhrase": "campaign"
          }
        },
        "offset": 2
      },
      "type": "object",
      "properties": {
        "limit": {
          "description": "Maximum records to retrieve per request, not to exceed 200.",
          "$ref": "#/definitions/CommerceCloudStandards.Pagination.Limit"
        },
        "query": {
          "description": "The search query. See the description of the search endpoint for a list of queryable attributes.\n",
          "$ref": "#/definitions/CommerceCloudStandards.Search.Query"
        },
        "sorts": {
          "description": "The list of sort clauses configured for the search request. Sort clauses are optional. See the description of the search endpoint for details on the default sorting behavior that is used when explicit sorts are not passed.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CommerceCloudStandards.Search.Sort"
          }
        },
        "offset": {
          "$ref": "#/definitions/CommerceCloudStandards.Pagination.Offset"
        }
      },
      "required": [
        "query"
      ]
    },
    "CommerceCloudStandards.Search.PaginatedSearchResultBase": {
      "description": "Document representing a generic search result. Each search resource should extend this to define what is returned in the `hits`.",
      "example": {
        "limit": 1,
        "hits": [
          {
            "couponId": "MyCoupon",
            "creationDate": "2019-10-20T12:00:00Z",
            "description": "This coupon is used to give 10% off stuff.",
            "enabled": false,
            "exportedCodeCount": 0,
            "lastModified": "2019-10-30T04:23:59Z",
            "redemptionCount": 3,
            "redemptionLimits": {
              "limitPerCode": 1,
              "limitPerCustomer": 1,
              "limitPerTimeFrame": {
                "limit": 2,
                "redemptionTimeFrame": 24
              }
            },
            "singleCode": "MyCode",
            "systemCodesConfig": {
              "codePrefix": "SG",
              "numberOfCodes": 500000
            },
            "totalCodesCount": 50,
            "type": "single_code"
          }
        ],
        "query": {
          "textQuery": {
            "fields": [
              "id",
              "description"
            ],
            "searchPhrase": "stuff"
          }
        },
        "sorts": [
          {
            "field": "couponId",
            "sortOrder": "desc"
          }
        ],
        "offset": 2,
        "total": 8
      },
      "$ref": "#/definitions/CommerceCloudStandards.Search.SimpleSearchResultBase"
    },
    "CommerceCloudStandards.Search.SimpleSearchResultBase": {
      "description": "Document representing a generic search result. Each search resource should extend this to define what is returned in the `hits`.",
      "example": {
        "limit": 1,
        "hits": [
          {
            "couponId": "MyCoupon",
            "creationDate": "2019-10-20T12:00:00Z",
            "description": "This coupon is used to give 10% off stuff.",
            "enabled": false,
            "exportedCodeCount": 0,
            "lastModified": "2019-10-30T04:23:59Z",
            "redemptionCount": 3,
            "redemptionLimits": {
              "limitPerCode": 1,
              "limitPerCustomer": 1,
              "limitPerTimeFrame": {
                "limit": 2,
                "redemptionTimeFrame": 24
              }
            },
            "singleCode": "MyCode",
            "systemCodesConfig": {
              "codePrefix": "SG",
              "numberOfCodes": 500000
            },
            "totalCodesCount": 50,
            "type": "single_code"
          }
        ],
        "offset": 2,
        "total": 8
      },
      "type": "object",
      "properties": {
        "limit": {
          "description": "Maximum records to retrieve per request, not to exceed 200.",
          "$ref": "#/definitions/CommerceCloudStandards.Pagination.Limit"
        },
        "hits": {
          "description": "The sorted array of search hits. Can be empty.",
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "offset": {
          "$ref": "#/definitions/CommerceCloudStandards.Pagination.Offset"
        },
        "total": {
          "$ref": "#/definitions/CommerceCloudStandards.Pagination.Total"
        }
      },
      "required": [
        "limit",
        "offset",
        "total"
      ]
    },
    "CommerceCloudStandards.Search.Sort": {
      "description": "Document representing a sort request. Each API has a different default sort configuration that can be modified in the request.",
      "example": {
        "field": "couponId",
        "sortOrder": "desc"
      },
      "type": "object",
      "properties": {
        "field": {
          "description": "The name of the field to sort on.",
          "type": "string"
        },
        "sortOrder": {
          "default": "asc",
          "description": "The sort order to be applied when sorting. When omitted, the default sort order (asc) is used.",
          "enum": [
            "asc",
            "desc"
          ],
          "type": "string"
        }
      },
      "required": [
        "field"
      ]
    },
    "CommerceCloudStandards.Search.TermFilter": {
      "description": "Allows you to restrict a search result to hits that match exactly one of the values configured for the filter. A term filter is useful for general restrictions that can be shared between searches. Use term filters whenever the criteria you filter on is a shared property of multiple searches (for example, like filtering by an order status). Use term filters for fields that have a discrete and small set of values only.",
      "example": {
        "field": "id",
        "operator": "is",
        "values": [
          "myId"
        ]
      },
      "type": "object",
      "properties": {
        "field": {
          "description": "The filter field.",
          "type": "string"
        },
        "operator": {
          "description": "The operator used to compare the field's values with the given values.",
          "enum": [
            "is",
            "one_of",
            "is_null",
            "is_not_null",
            "less",
            "greater",
            "not_in",
            "neq"
          ],
          "type": "string"
        },
        "values": {
          "description": "The filter values.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "field",
        "operator"
      ]
    },
    "CommerceCloudStandards.Search.TermQuery": {
      "description": "A term query matches one or more values against one or more document fields. A document is considered a hit if one of the values matches exactly with at least one of the given fields. The operator `is` can only take one value, while `one_of` can take multiple values. If multiple fields are specified, they are combined using a logical `OR` operator.\n\n**Limitations:**\n\n* The `greater` and `less` operators are not supported under certain conditions. Both operators are permitted unless the API documentation states otherwise.\n* A subset of Commerce APIs handle queries with multiple fields differently. If the query has multiple fields, the query is internally handled as a logical `OR` of `DisjointMaxQueries` (with the dismax matching a value against all fields). The dismax makes sure that a document carrying a single term in multiple fields does not get higher scores than a document matching multiple terms in multiple fields.",
      "example": {
        "fields": [
          "enabled"
        ],
        "operator": "is",
        "values": [
          false
        ]
      },
      "type": "object",
      "properties": {
        "fields": {
          "minItems": 1,
          "description": "The document fields that the values are matched against, combined with the operator.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "operator": {
          "description": "Returns the operator to use for the term query.",
          "enum": [
            "is",
            "one_of",
            "is_null",
            "is_not_null",
            "less",
            "greater",
            "not_in",
            "neq"
          ],
          "type": "string"
        },
        "values": {
          "description": "The values that the fields are compared against, combined with the operator.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "fields",
        "operator"
      ]
    },
    "CommerceCloudStandards.Search.TextQuery": {
      "description": "A text query is used to match some text (for example, a search phrase possibly consisting of multiple terms) against one or more fields. When multiple fields are provided, the phrase conceptually forms a logical `OR` over the fields. In this case, the terms of the phrase basically have to match within the text, that would result in concatenating all given fields.",
      "example": {
        "fields": [
          "couponId"
        ],
        "searchPhrase": "limit"
      },
      "type": "object",
      "properties": {
        "fields": {
          "minItems": 1,
          "description": "The document fields that the search phrase matches against.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "searchPhrase": {
          "description": "A search phrase, which can include multiple terms separated by spaces.",
          "type": "string"
        }
      },
      "required": [
        "fields",
        "searchPhrase"
      ]
    },
    "CommerceCloudStandards.SiteId": {
      "minLength": 1,
      "description": "The identifer of the site that a request is being made in the context of. Attributes might have site specific values, and some objects may only be assigned to specific sites",
      "example": "SiteGenesis",
      "type": "string"
    },
    "CommerceCloudStandards.SearchRequest": {
      "$ref": "#/definitions/CommerceCloudStandards.Search.SearchRequestBase"
    },
    "CommerceCloudStandards.PaginatedSearchResult": {
      "$ref": "#/definitions/CommerceCloudStandards.Search.PaginatedSearchResultBase"
    },
    "CommerceCloudStandards.SimpleSearchResult": {
      "$ref": "#/definitions/CommerceCloudStandards.Search.SimpleSearchResultBase"
    },
    "CommerceCloudStandards.CurrencyCode": {
      "$ref": "#/definitions/CommerceCloudStandards.ISO.Currency"
    },
    "CommerceCloudStandards.Money": {
      "$ref": "#/definitions/CommerceCloudStandards.ISO.MoneyMnemonic"
    },
    "CommerceCloudStandards.LanguageCode": {
      "$ref": "#/definitions/CommerceCloudStandards.ISO.Language"
    },
    "CommerceCloudStandards.CountryCode": {
      "$ref": "#/definitions/CommerceCloudStandards.ISO.Country"
    },
    "CommerceCloudStandards.LocaleCode": {
      "$ref": "#/definitions/CommerceCloudStandards.ISO.Locale"
    },
    "CommerceCloudStandards.LocalizedString": {
      "$ref": "#/definitions/CommerceCloudStandards.ISO.L10nString"
    },
    "CommerceCloudStandards.PropertyDefinition": {
      "$ref": "#/definitions/CommerceCloudStandards.AttributeDefinitions.AttributeDefinition"
    },
    "CommerceCloudStandards.ClosedObject": {
      "$ref": "#/definitions/CommerceCloudStandards.AdditionalProperties.NoPropertiesAllowed"
    },
    "CommerceCloudStandards.OpenObject": {
      "$ref": "#/definitions/CommerceCloudStandards.AdditionalProperties.SpecifiedPropertiesAllowed"
    }
  },
  "parameters": {
    "trait:LocaleSpecific:locale": {
      "description": "A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.\nBelow are some valid examples:\n- en-US\n- de-AT\n- de\n- default",
      "in": "query",
      "name": "locale",
      "type": "string"
    },
    "trait:CommerceCloudStandards.QueryParamsLimit:limit": {
      "in": "query",
      "name": "limit",
      "type": "string"
    },
    "trait:CommerceCloudStandards.QueryParamsOffset:offset": {
      "in": "query",
      "name": "offset",
      "type": "string"
    },
    "trait:CommerceCloudStandards.SiteSpecific:siteId": {
      "in": "query",
      "name": "siteId",
      "required": true,
      "type": "string"
    }
  },
  "paths": {}
}