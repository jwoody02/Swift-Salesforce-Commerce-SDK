{
  "swagger": "2.0",
  "info": {
    "title": "Shopper Baskets",
    "description": "# API Overview\n\nUse the Shopper Baskets API to create a basket in the B2C Commerce system and populate it with all the data required to ready the basket for checkout.\n\nTo create a basket, start with the [Create basket](https://developer.salesforce.com/docs/commerce/commerce-api/references/shopper-baskets?meta=createBasket) endpoint. The endpoint creates the basket in the B2C Commerce system and returns a JSON representation of the basket with a `basketId` property.\n\nIf you provide the JSON for a prepopulated basket to the [Create basket](https://developer.salesforce.com/docs/commerce/commerce-api/references/shopper-baskets?meta=createBasket) endpoint, you can create a basket using a single API request.\n\nYou can also create a basket and gradually populate it with data using subsequent API requests that reference the same `basketId`. The gradual approach allows you to validate the input data as you go.\n\nThe Shopper Baskets API includes endpoints to populate each part of a basket separately, including:\n\n-   Billing address\n-   Customer information\n-   Line items\n    -   Products\n    -   Coupons\n    -   Gift certificates\n-   Payment methods\n-   Price books\n-   Shipments\n-   Taxation (for items and the basket itself)\n\nIn addition to creating a basket, the main `/baskets` resource offers endpoints to get, transfer, merge, and delete baskets, depending on the HTTP method that you use and the parameters that you supply. These endpoints can you help you handle a variety of complex scenarios, such as when a user starts shopping as a guest and then logs in before checkout.\n\nYou can also use the main `/baskets` resource to add custom properties to your basket, prefixed with `c_` (example: `c_faxNumber`).\n\nWhen your basket is fully populated, you can use its `basketId` property to create an order with the [Shopper Orders API](https://developer.salesforce.com/docs/commerce/commerce-api/references/shopper-orders?meta=Summary).\n\n## Authentication & Authorization\n\nThe client requesting the basket information must have access to the `/baskets` resource. The Shopper Baskets API requires a shopper access token from the Shopper Login and API Access Service (SLAS).\n\nFor details on how to request a shopper access token from SLAS, see the guest user flows for [public clients](https://developer.salesforce.com/docs/commerce/commerce-api/guide/slas-public-client.html#guest-user) and [private clients](https://developer.salesforce.com/docs/commerce/commerce-api/guide/slas-private-client.html#guest-user) in the SLAS guides.\n\nThe following resources require an Account Manager OAuth token with a client ID:\n\n-   `/baskets/{basketId}/taxes`\n-   `/baskets/{basketId}/items/{itemId}/taxes`\n-   `/baskets/{basketId}/price-books`\n\n## Basket Calculation\n\nUnless you’re using [hooks](https://developer.salesforce.com/docs/commerce/commerce-api/guide/extensibility_via_hooks.html), each modification to a basket triggers the following calculations:\n\n1.  Calculate product prices:\n    -   Iterate through the product line items and determine the base price of each using its price model. If multiple price books apply to a product, the lowest price is used.\n    -   Calculate product option line item prices using the product option model.\n    -   For bonus products, check dependent adjustments in the basket to determine the price.\n2.  Iterate through the gift certificate line items and calculate the price of each by multiplying the base price by the quantity.\n3.  Recalculate for all promotions, adding and removing them as appropriate.\n4.  Apply product-specific shipping costs.\n5.  Calculate the total shipping cost.\n6.  Recalculate for all promotions, adding and removing them as appropriate.\n7.  Calculate prices for products added by the promotion engine.\n8.  Calculate taxes using line item tax class codes.\n    -   For internal tax mode, use the tax tables.\n    -   For external tax mode, use the tax rates returned by the tax API endpoints.\n9.  Calculate the order’s net, tax, and gross totals by adding up the line totals.\n\n## External Taxation\n\nThe B2C Commerce API calculates taxes internally using tax tables. If you want to integrate with a third-party tax provider, or calculate tax on your own, you can use the external taxation feature to add a taxation rate and optional taxation value. When setting a taxation rate, the taxation is calculated for this specific rate. If you pass a value, this value is used as taxation value, as well, without recalculation. To use this feature, set the `taxMode` parameter to `external` when creating the basket.\n\n**Important**: To use external tax calculation, [hooks](https://developer.salesforce.com/docs/commerce/commerce-api/guide/extensibility_via_hooks.html) must not be enabled in Business Manager.\n\nWhen using external taxation, you must set a tax rate either in one request to the `/baskets/{basketId}/taxes` or with separate requests for each line item, using `/baskets/{basketId}/items/{lineItemId}/taxes`.\n\nIf the tax mode of a basket is set to `external`, a tax item is required for all line items even for zero-tax items to avoid oversights.\n",
    "version": "v1"
  },
  "x-basePath": "{shortCode}.api.commercecloud.salesforce.com/checkout/shopper-baskets/{version}",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "definitions": {
    "ErrorResponse": {
      "$ref": "#/definitions/ApiStandards.ErrorResponse"
    },
    "ApiStandards.ErrorResponse": {
      "$ref": "#/definitions/ApiStandards.Error.Error"
    },
    "ApiStandards.Error.Error": {
      "description": "Errors reported by all APIs correspond to this error document format. \nThis format follows the RFC [IETF rfc7807](https://tools.ietf.org/html/rfc7807). \nThis may include additional properties as necessary to provide additional details \nregarding the error message.",
      "type": "object",
      "additionalProperties": true,
      "properties": {
        "type": {
          "description": "A URI reference [RFC3986] that identifies the\nproblem type.  This specification encourages that, when\ndereferenced, it provide human-readable documentation for the\nproblem type (e.g., using HTML [W3C.REC-html5-20141028]).  When\nthis member is not present, its value is assumed to be\n\"about:blank\". It accepts relative URIs; this means\nthat they must be resolved relative to the document's base URI, as\nper [RFC3986], Section 5.\n",
          "example": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/not-found",
          "type": "string"
        },
        "title": {
          "description": "A short, human-readable summary of the problem\ntype.  It will not change from occurrence to occurrence of the\nproblem, except for purposes of localization.\n",
          "example": "Not Found.",
          "type": "string"
        },
        "detail": {
          "description": "A human-readable explanation specific to this\noccurrence of the problem.\n",
          "example": "The requested resource was not found.",
          "type": "string"
        },
        "instance": {
          "description": "A URI reference that identifies the specific\noccurrence of the problem.  It may or may not yield further\ninformation if dereferenced.  It accepts relative URIs; this means\nthat they must be resolved relative to the document's base URI, as\nper [RFC3986], Section 5.\n",
          "example": "/account/12345/msgs/abc",
          "type": "string"
        }
      },
      "required": [
        "type"
      ]
    },
    "dataTypes.Basket": {
      "description": "Document representing a basket.",
      "allOf": [
        {
          "$ref": "#/definitions/CommerceCloudStandards.OpenObject"
        },
        {
          "properties": {
            "adjustedMerchandizeTotalTax": {
              "format": "double",
              "description": "The total tax on products in the shipment, including item-level price adjustments but not\nincluding service charges such as shipping. If the Discount Taxation preference is set to Tax \nProducts and Shipping Only Based on Adjusted Price, this amount also includes prorated \norder-level price adjustments.",
              "example": 4.95,
              "type": "number"
            },
            "adjustedShippingTotalTax": {
              "format": "double",
              "description": "The total tax on shipping charges in the shipment, including shipping price adjustments.",
              "example": 0.3,
              "type": "number"
            },
            "agentBasket": {
              "description": "Is the basket created by an agent?",
              "example": true,
              "type": "boolean"
            },
            "basketId": {
              "description": "The unique identifier for the basket.",
              "example": "e78aa5646a8efebdd9cdd38be7",
              "type": "string"
            },
            "billingAddress": {
              "description": "The billing address.",
              "$ref": "#/definitions/dataTypes.OrderAddress"
            },
            "bonusDiscountLineItems": {
              "description": "The bonus discount line items.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/dataTypes.BonusDiscountLineItem"
              }
            },
            "channelType": {
              "description": "The sales channel.",
              "example": "storefront",
              "enum": [
                "storefront",
                "callcenter",
                "marketplace",
                "dss",
                "store",
                "pinterest",
                "twitter",
                "facebookads",
                "subscriptions",
                "onlinereservation",
                "customerservicecenter",
                "instagramcommerce",
                "tiktok",
                "snapchat",
                "google",
                "whatsapp",
                "youtube"
              ],
              "type": "string"
            },
            "couponItems": {
              "description": "The coupon items.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/dataTypes.CouponItem"
              }
            },
            "creationDate": {
              "description": "The timestamp when the basket was created.",
              "example": "2015-05-19T15:23:18.000Z",
              "type": "string",
              "format": "date-time"
            },
            "currency": {
              "description": "The ISO 4217 mnemonic code of the currency.",
              "example": "USD",
              "type": "string"
            },
            "customerInfo": {
              "description": "The customer information, if the customer is logged in.",
              "$ref": "#/definitions/dataTypes.CustomerInfo"
            },
            "giftCertificateItems": {
              "description": "The gift certificate line items.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/dataTypes.GiftCertificateItem"
              }
            },
            "inventoryReservationExpiry": {
              "description": "The expiration datetime of the inventory reservation.",
              "example": "2015-05-19T15:30:18.000Z",
              "type": "string",
              "format": "date-time"
            },
            "lastModified": {
              "description": "The timestamp when the basket was last modified.",
              "example": "2015-05-19T15:25:18.000Z",
              "type": "string",
              "format": "date-time"
            },
            "merchandizeTotalTax": {
              "format": "double",
              "description": "The total products tax in the purchase currency.\nMerchandise total price represents the sum of the product prices before\nservices (such as shipping) or adjustments from promotions have\nbeen added.",
              "example": 4.95,
              "type": "number"
            },
            "notes": {
              "description": "The notes.",
              "$ref": "#/definitions/dataTypes.SimpleLink"
            },
            "orderPriceAdjustments": {
              "description": "The order-level price adjustments.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/dataTypes.PriceAdjustment"
              }
            },
            "orderTotal": {
              "format": "double",
              "description": "The total price, including products, shipping and tax.",
              "example": 110.24,
              "type": "number"
            },
            "paymentInstruments": {
              "description": "The payment instruments list.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/dataTypes.OrderPaymentInstrument"
              }
            },
            "productItems": {
              "description": "The product items.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/dataTypes.ProductItem"
              }
            },
            "productSubTotal": {
              "format": "double",
              "description": "The total price of all products including item-level adjustments, but not including order-level adjustments or shipping \ncharges. If the taxation policy is net, it doesn't include tax. If the taxation policy is gross, it includes tax.",
              "example": 99,
              "type": "number"
            },
            "productTotal": {
              "format": "double",
              "description": "The total price of all products including adjustments, but not including shipping charges. If the taxation policy is net,\nit doesn't include tax. If the taxation policy is gross, it includes tax.",
              "example": 88,
              "type": "number"
            },
            "shipments": {
              "description": "The shipments.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/dataTypes.Shipment"
              }
            },
            "shippingItems": {
              "description": "The shipping items.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/dataTypes.ShippingItem"
              }
            },
            "shippingTotal": {
              "format": "double",
              "description": "The total price of all shipping charges, including shipping adjustments. If the taxation policy is net, it doesn't\ninclude tax. If the taxation policy is gross, it includes tax.",
              "example": 5.99,
              "type": "number"
            },
            "shippingTotalTax": {
              "format": "double",
              "description": "The total tax on all shipping charges, not including shipping adjustments.",
              "example": 0.3,
              "type": "number"
            },
            "sourceCode": {
              "description": "The source code assigned to the basket.",
              "example": "OUTDOOR1",
              "type": "string"
            },
            "taxTotal": {
              "format": "double",
              "description": "The total tax amount.",
              "example": 5.25,
              "type": "number"
            },
            "taxation": {
              "description": "The taxation policy (gross or net).",
              "example": "net",
              "enum": [
                "gross",
                "net"
              ],
              "type": "string"
            }
          },
          "type": "object"
        }
      ]
    },
    "dataTypes.BasketPaymentInstrumentRequest": {
      "description": "Document representing a basket payment instrument request.",
      "allOf": [
        {
          "$ref": "#/definitions/CommerceCloudStandards.OpenObject"
        },
        {
          "properties": {
            "amount": {
              "format": "double",
              "description": "The payment transaction amount.",
              "example": 130.88,
              "type": "number"
            },
            "bankRoutingNumber": {
              "maxLength": 256,
              "description": "The bank routing number.",
              "example": "12030000",
              "type": "string"
            },
            "giftCertificateCode": {
              "maxLength": 256,
              "description": "The gift certificate code.",
              "example": "AFGRTUZ",
              "type": "string"
            },
            "paymentCard": {
              "description": "The payment card.",
              "$ref": "#/definitions/dataTypes.OrderPaymentCardRequest"
            },
            "paymentMethodId": {
              "maxLength": 256,
              "description": "The payment method ID.",
              "example": "CREDIT_CARD",
              "type": "string"
            }
          },
          "type": "object"
        }
      ]
    },
    "dataTypes.BonusDiscountLineItem": {
      "description": "Document representing a bonus discount line item.",
      "allOf": [
        {
          "$ref": "#/definitions/CommerceCloudStandards.OpenObject"
        },
        {
          "properties": {
            "bonusProducts": {
              "description": "The bonus products the customer can choose from.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/dataTypes.ProductDetailsLink"
              }
            },
            "couponCode": {
              "description": "The coupon code that triggered the promotion, if applicable.",
              "example": "5ties",
              "type": "string"
            },
            "id": {
              "description": "The ID of the line item.",
              "example": "91f4dd8bfa0653d58b7783b04f",
              "type": "string"
            },
            "maxBonusItems": {
              "format": "int32",
              "description": "The maximum number of bonus items the user can select for this promotion.",
              "type": "integer"
            },
            "promotionId": {
              "description": "The ID of the promotion that triggered the creation of the line item.",
              "example": "Buy1Get2",
              "type": "string"
            }
          },
          "type": "object"
        }
      ]
    },
    "dataTypes.CouponItem": {
      "description": "Document representing a coupon item.",
      "allOf": [
        {
          "$ref": "#/definitions/CommerceCloudStandards.OpenObject"
        },
        {
          "properties": {
            "code": {
              "maxLength": 256,
              "description": "The coupon code.",
              "example": "5ties",
              "type": "string"
            },
            "couponItemId": {
              "description": "The coupon item ID.",
              "example": "d4c9c0141e9c74c150225580f3",
              "type": "string"
            },
            "statusCode": {
              "description": "The status of the coupon item.",
              "example": "no_applicable_promotion",
              "enum": [
                "coupon_code_already_in_basket",
                "coupon_code_already_redeemed",
                "coupon_code_unknown",
                "coupon_disabled",
                "redemption_limit_exceeded",
                "customer_redemption_limit_exceeded",
                "timeframe_redemption_limit_exceeded",
                "no_active_promotion",
                "coupon_already_in_basket",
                "no_applicable_promotion",
                "applied",
                "adhoc"
              ],
              "type": "string"
            },
            "valid": {
              "description": "A flag indicating whether the coupon item is valid. A coupon line item is valid if\nthe status code is \"applied\" or \"no_applicable_promotion\".",
              "example": true,
              "type": "boolean"
            }
          },
          "required": [
            "code"
          ],
          "type": "object"
        }
      ]
    },
    "dataTypes.CustomerInfo": {
      "description": "The customer information for guest or logged-in customers.",
      "allOf": [
        {
          "$ref": "#/definitions/CommerceCloudStandards.OpenObject"
        },
        {
          "properties": {
            "customerId": {
              "maxLength": 100,
              "description": "The customer ID.",
              "example": "abMKqMaNYOBMnNdDNzyC5oNTi5",
              "type": "string"
            },
            "customerName": {
              "description": "The customer name.",
              "example": "Max Mustermann",
              "type": "string"
            },
            "customerNo": {
              "maxLength": 100,
              "description": "The customer number.",
              "example": "0002352",
              "type": "string"
            },
            "email": {
              "description": "The customer's email address.",
              "example": "no-reply@salesforce.com",
              "type": "string"
            }
          },
          "required": [
            "email"
          ],
          "type": "object"
        }
      ]
    },
    "dataTypes.Discount": {
      "description": "Document representing a discount.",
      "allOf": [
        {
          "$ref": "#/definitions/CommerceCloudStandards.OpenObject"
        },
        {
          "properties": {
            "amount": {
              "format": "double",
              "description": "The discount amount for discount types that define specific discount amounts.",
              "example": 130.88,
              "type": "number"
            },
            "percentage": {
              "format": "double",
              "description": "The discount percent for discount types that define percentage discounts.",
              "example": 0.19,
              "type": "number"
            },
            "priceBookId": {
              "description": "The price book ID that is used with some types.",
              "example": "usd-sale-prices",
              "type": "string"
            },
            "type": {
              "description": "The type of discount.",
              "example": "fixed_price",
              "enum": [
                "percentage",
                "fixed_price",
                "amount",
                "free",
                "price_book_price",
                "bonus",
                "total_fixed_price",
                "bonus_choice",
                "percentage_off_options"
              ],
              "type": "string"
            }
          },
          "required": [
            "type"
          ],
          "type": "object"
        }
      ]
    },
    "dataTypes.DiscountRequest": {
      "description": "Request that represents a discount to be applied to a custom price adjustment. ",
      "allOf": [
        {
          "$ref": "#/definitions/CommerceCloudStandards.ClosedObject"
        },
        {
          "properties": {
            "type": {
              "description": "The type of discount.\n- `amount` describes a (unit) price discount, and its corresponding value (positive) defines the amount each unit is to be reduced by. Example: For a $10 discount, set `type` to `amount` and `value` to `10.00`.\n- `percentage` describes a percentage discount, and its corresponding value (positive) defines the percentage reduction. Example: For a 5% discount, set `type` to `percentage` and `value` to `5.00`.\n- `fixed_price` describes a fixed price discount, and its corresponding value (positive) defines the resulting fixed price for the item. Only one `fixed_price` discount can be set for each item. Example: To set a fixed price of $15, set `type` to `fixed_price` and `value` to `15.00`. **Important**: Setting `type` to `fixed_price` is not supported when `level` is set to `order`.",
              "example": "percentage",
              "enum": [
                "percentage",
                "fixed_price",
                "amount"
              ],
              "type": "string"
            },
            "value": {
              "format": "double",
              "description": "The amount of the discount.",
              "example": 20,
              "type": "number"
            }
          },
          "required": [
            "type",
            "value"
          ],
          "type": "object"
        }
      ]
    },
    "dataTypes.GiftCertificateItem": {
      "description": "A gift certificate item.",
      "allOf": [
        {
          "$ref": "#/definitions/CommerceCloudStandards.OpenObject"
        },
        {
          "properties": {
            "amount": {
              "format": "double",
              "description": "The gift certificate item amount.",
              "example": 20,
              "type": "number"
            },
            "giftCertificateItemId": {
              "description": "The item ID.",
              "example": "629dea6e7b61e58da629b57b21",
              "type": "string"
            },
            "message": {
              "maxLength": 4000,
              "description": "The gift certificate message.",
              "example": "Birthday present.",
              "type": "string"
            },
            "recipientEmail": {
              "minLength": 1,
              "description": "The recipient email.",
              "example": "no-reply@salesforce.com",
              "type": "string"
            },
            "recipientName": {
              "description": "The recipient's name.",
              "example": "Daniel Mustermann",
              "type": "string"
            },
            "senderName": {
              "description": "The sender's name.",
              "example": "Max Mustermann",
              "type": "string"
            },
            "shipmentId": {
              "description": "The ID of the shipment this item belongs to.",
              "example": "me",
              "type": "string"
            }
          },
          "required": [
            "amount",
            "recipientEmail"
          ],
          "type": "object"
        }
      ]
    },
    "dataTypes.OptionItem": {
      "description": "An option item represents an optional purchase related to a product item, and is always associated with that parent product\nitem. An option item can have different values from which to select. For example, a refrigerator item can have an option item representing an extended warranty, with a set of option item values representing different warranty lengths. When a shopper purchases the warranty option item together with the parent refrigerator item, they select one of the available warranty option item values.",
      "allOf": [
        {
          "$ref": "#/definitions/CommerceCloudStandards.OpenObject"
        },
        {
          "properties": {
            "adjustedTax": {
              "format": "double",
              "description": "The tax on the line item, including any adjustments.",
              "example": 19,
              "type": "number"
            },
            "basePrice": {
              "format": "double",
              "description": "The base price of the line item, which is the unit price not including adjustments. \nIf the taxation policy is net, it doesn't include tax. If the taxation policy is gross, it includes tax.",
              "example": 50,
              "type": "number"
            },
            "bonusDiscountLineItemId": {
              "description": "The ID of the bonus discount line item this bonus product relates to.",
              "example": "ba248414e3eee797f062162f8b",
              "type": "string"
            },
            "bonusProductLineItem": {
              "description": "A flag indicating whether the product item is a bonus.",
              "example": false,
              "type": "boolean"
            },
            "bundledProductItems": {
              "description": "The bundled product items.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/dataTypes.ProductItem"
              }
            },
            "gift": {
              "description": "Returns true if the item is a gift.",
              "example": false,
              "type": "boolean"
            },
            "giftMessage": {
              "description": "The gift message.",
              "example": "Happy Birthday",
              "type": "string"
            },
            "inventoryId": {
              "maxLength": 256,
              "description": "The inventory list ID associated with this item.",
              "example": "inventory",
              "type": "string"
            },
            "itemId": {
              "description": "The product item ID. Use it to identify this item when updating its quantity or creating a custom price adjustment for it.",
              "example": "430ef5aad3a24de59378458434",
              "type": "string"
            },
            "itemText": {
              "description": "The text describing the item.",
              "example": "The item text.",
              "type": "string"
            },
            "optionId": {
              "maxLength": 256,
              "description": "The ID of the option.",
              "example": "consoleWarranty",
              "type": "string"
            },
            "optionItems": {
              "description": "The option items.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/dataTypes.OptionItem"
              }
            },
            "optionValueId": {
              "maxLength": 256,
              "description": "The ID of the option value.",
              "example": "000",
              "type": "string"
            },
            "price": {
              "format": "double",
              "description": "The price of the line item before applying any adjustments. If the taxation policy is net, it doesn't include tax. \nIf the taxation policy is gross, it includes tax.",
              "example": 150.99,
              "type": "number"
            },
            "priceAdjustments": {
              "description": "The price adjustments.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/dataTypes.PriceAdjustment"
              }
            },
            "priceAfterItemDiscount": {
              "format": "double",
              "description": "The price of the product line item including item-level adjustments, but not including order-level adjustments or\nshipping charges. If the taxation policy is net, it doesn't include tax. If the taxation policy is gross, it includes tax.",
              "example": 50.99,
              "type": "number"
            },
            "priceAfterOrderDiscount": {
              "format": "double",
              "description": "The price of the product line item including item-level adjustments and prorated order-level adjustments, but not \nincluding shipping charges. If the taxation policy is net, it doesn't include tax. If the taxation policy is gross, it\nincludes tax.",
              "example": 40.5,
              "type": "number"
            },
            "productId": {
              "maxLength": 100,
              "description": "The ID of the product.",
              "example": "nintendo-ds-console",
              "type": "string"
            },
            "productListItem": {
              "description": "If this product line item was added from a product list, this value is a reference to the corresponding product list item.",
              "$ref": "#/definitions/dataTypes.ProductListItemReference"
            },
            "productName": {
              "description": "The name of the product.",
              "example": "Nintendo DS Game Console",
              "type": "string"
            },
            "quantity": {
              "minimum": 0,
              "maximum": 999,
              "format": "double",
              "description": "The ordered quantity of the products represented by this item.",
              "example": 1,
              "type": "number"
            },
            "shipmentId": {
              "description": "The ID of the shipment this item belongs to.",
              "example": "me",
              "type": "string"
            },
            "shippingItemId": {
              "description": "If the product line item has a related shipping item, this value is its ID. A related shipping item represents a \nsurcharge applied to individual products using a particular shipping method.",
              "example": "006490dcc338feeafc71c964bf",
              "type": "string"
            },
            "tax": {
              "format": "double",
              "description": "The tax on the line item before applying any adjustments.",
              "example": 0,
              "type": "number"
            },
            "taxBasis": {
              "format": "double",
              "description": "The amount used to calculate the tax for this item.",
              "example": 50,
              "type": "number"
            },
            "taxClassId": {
              "description": "The tax class ID for the product item, or null\nif no tax class ID is associated with the product item.",
              "type": "string"
            },
            "taxRate": {
              "format": "double",
              "description": "The tax rate, which is the decimal tax rate to be applied\nto the product represented by this item.",
              "example": 0.19,
              "type": "number"
            }
          },
          "required": [
            "optionId",
            "optionValueId"
          ],
          "type": "object"
        }
      ]
    },
    "dataTypes.OrderAddress": {
      "description": "Document representing an order address.",
      "allOf": [
        {
          "$ref": "#/definitions/CommerceCloudStandards.OpenObject"
        },
        {
          "properties": {
            "address1": {
              "description": "The first address line.",
              "example": "45 Main Rd.",
              "type": "string"
            },
            "address2": {
              "description": "The second address line.",
              "example": "Apartment 204",
              "type": "string"
            },
            "city": {
              "description": "The city.",
              "example": "Boston",
              "type": "string"
            },
            "companyName": {
              "description": "The company name.",
              "example": "Salesforce",
              "type": "string"
            },
            "countryCode": {
              "description": "The ISO Country Code.",
              "example": "US",
              "$ref": "#/definitions/CommerceCloudStandards.CountryCode"
            },
            "firstName": {
              "description": "The first name.",
              "example": "Max",
              "type": "string"
            },
            "fullName": {
              "description": "The full name.",
              "example": "Max Mustermann",
              "type": "string"
            },
            "id": {
              "description": "The ID of the address.",
              "example": "me",
              "type": "string"
            },
            "jobTitle": {
              "description": "The job title.",
              "example": "Software Engineer",
              "type": "string"
            },
            "lastName": {
              "description": "The last name.",
              "example": "Mustermann",
              "type": "string"
            },
            "phone": {
              "description": "The phone number.",
              "example": "6175555555",
              "type": "string"
            },
            "postBox": {
              "description": "The post office box.",
              "example": "PO BOX 109",
              "type": "string"
            },
            "postalCode": {
              "description": "The postal code.",
              "example": "05408",
              "type": "string"
            },
            "salutation": {
              "description": "The salutation.",
              "example": "Mr",
              "type": "string"
            },
            "secondName": {
              "description": "The second name.",
              "type": "string"
            },
            "stateCode": {
              "description": "The state code.",
              "example": "MA",
              "type": "string"
            },
            "suffix": {
              "description": "The suffix.",
              "example": "Sr",
              "type": "string"
            },
            "suite": {
              "description": "The suite.",
              "example": "24A",
              "type": "string"
            },
            "title": {
              "description": "The title.",
              "example": "Dr.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ]
    },
    "dataTypes.OrderPaymentCardRequest": {
      "description": "Document representing an order payment card request.",
      "allOf": [
        {
          "$ref": "#/definitions/CommerceCloudStandards.ClosedObject"
        },
        {
          "properties": {
            "cardType": {
              "maxLength": 256,
              "description": "The payment card type (for example: Visa).",
              "example": "Visa",
              "type": "string"
            },
            "creditCardToken": {
              "description": "A credit card token. If a credit card is tokenized, the token can be used to look up the credit card data\nin the token store.",
              "example": "E67TY8GQ27X",
              "type": "string"
            },
            "expirationMonth": {
              "format": "int32",
              "description": "The month when the payment card expires.",
              "example": 3,
              "type": "integer"
            },
            "expirationYear": {
              "format": "int32",
              "description": "The year when the payment card expires.",
              "example": 2025,
              "type": "integer"
            },
            "holder": {
              "maxLength": 256,
              "description": "The payment card holder.",
              "example": "Max Mustermann",
              "type": "string"
            },
            "issueNumber": {
              "maxLength": 256,
              "description": "The payment card issue number.",
              "example": "2",
              "type": "string"
            },
            "maskedNumber": {
              "pattern": "^[0-9 -]{0,7}\\D{6,15}\\d{0,4}$",
              "maxLength": 25,
              "description": "The masked payment card number.",
              "example": "*********4422",
              "type": "string"
            },
            "validFromMonth": {
              "minimum": 1,
              "maximum": 12,
              "format": "int32",
              "description": "The month the payment card is valid from.",
              "example": 5,
              "type": "integer"
            },
            "validFromYear": {
              "format": "int32",
              "description": "The year the payment card is valid from.",
              "example": 2019,
              "type": "integer"
            }
          },
          "type": "object"
        }
      ]
    },
    "dataTypes.OrderPaymentInstrument": {
      "description": "Document representing an order payment instrument.",
      "properties": {
        "amount": {
          "format": "double",
          "description": "The payment transaction amount.",
          "example": 130.88,
          "type": "number"
        },
        "authorizationStatus": {
          "description": "The authorization status of the payment transaction.",
          "$ref": "#/definitions/dataTypes.Status"
        },
        "bankRoutingNumber": {
          "maxLength": 256,
          "description": "The bank routing number.",
          "example": "12030000",
          "type": "string"
        },
        "maskedGiftCertificateCode": {
          "description": "The gift certificate code with the last 4 characters not masked.",
          "example": "******Gzzy",
          "type": "string"
        },
        "paymentCard": {
          "description": "The payment card.",
          "$ref": "#/definitions/dataTypes.PaymentCard"
        },
        "paymentInstrumentId": {
          "description": "The payment instrument ID.",
          "example": "ba248424e3eee797f062162f8b",
          "type": "string"
        },
        "paymentMethodId": {
          "maxLength": 256,
          "description": "The payment method ID.",
          "example": "CREDIT_CARD",
          "type": "string"
        }
      },
      "type": "object"
    },
    "dataTypes.PaymentCard": {
      "description": "Document representing a payment card.",
      "allOf": [
        {
          "$ref": "#/definitions/CommerceCloudStandards.ClosedObject"
        },
        {
          "properties": {
            "cardType": {
              "maxLength": 256,
              "description": "The payment card type.",
              "example": "Visa",
              "type": "string"
            },
            "creditCardExpired": {
              "description": "A flag indicating if the credit card is expired.",
              "example": true,
              "type": "boolean"
            },
            "creditCardToken": {
              "description": "A credit card token. If a credit card is tokenized, the token can be used to look up the credit card data\nin the token store.",
              "example": "E67TY8GQ27X",
              "type": "string"
            },
            "expirationMonth": {
              "format": "int32",
              "description": "The month when the payment card expires.",
              "example": 3,
              "type": "integer"
            },
            "expirationYear": {
              "format": "int32",
              "description": "The year when the payment card expires.",
              "example": 2025,
              "type": "integer"
            },
            "holder": {
              "maxLength": 256,
              "description": "The payment card holder.",
              "example": "Max Mustermann",
              "type": "string"
            },
            "issueNumber": {
              "maxLength": 256,
              "description": "The payment card issue number.",
              "example": "2",
              "type": "string"
            },
            "maskedNumber": {
              "maxLength": 4000,
              "description": "The masked payment card number.",
              "example": "*********4422",
              "type": "string"
            },
            "numberLastDigits": {
              "maxLength": 4000,
              "description": "The last digits of the payment card number.",
              "example": "4422",
              "type": "string"
            },
            "validFromMonth": {
              "minimum": 1,
              "maximum": 12,
              "format": "int32",
              "description": "The month the payment card is valid from.",
              "example": 5,
              "type": "integer"
            },
            "validFromYear": {
              "format": "int32",
              "description": "The year the payment card is valid from.",
              "example": 2015,
              "type": "integer"
            }
          },
          "type": "object"
        }
      ]
    },
    "dataTypes.PaymentCardSpec": {
      "description": "Document representing the specification for a payment card.",
      "allOf": [
        {
          "$ref": "#/definitions/CommerceCloudStandards.OpenObject"
        },
        {
          "properties": {
            "cardType": {
              "description": "The payment card type.",
              "example": "Visa",
              "type": "string"
            },
            "checksumVerificationEnabled": {
              "description": "A flag indicating whether the card number is verified using the Luhn checksum algorithm.",
              "example": true,
              "type": "boolean"
            },
            "description": {
              "description": "The localized description of the payment card.",
              "type": "string"
            },
            "image": {
              "description": "The URL to the image that represents the payment card.",
              "type": "string"
            },
            "name": {
              "description": "The localized name of the payment card.",
              "type": "string"
            },
            "numberLengths": {
              "description": "The sorted list of number lengths (individual lengths as well as\nlength ranges).",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "numberPrefixes": {
              "description": "The sorted list of number prefixes (individual prefixes as well\nas prefix ranges).",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "securityCodeLength": {
              "format": "int32",
              "description": "The length of the security code for this card.",
              "type": "integer"
            }
          },
          "type": "object"
        }
      ]
    },
    "dataTypes.PaymentMethod": {
      "description": "Document representing a payment method.",
      "allOf": [
        {
          "$ref": "#/definitions/CommerceCloudStandards.OpenObject"
        },
        {
          "properties": {
            "cards": {
              "description": "The sorted array of payment cards (included only when the system payment method is CREDIT_CARD).",
              "type": "array",
              "items": {
                "$ref": "#/definitions/dataTypes.PaymentCardSpec"
              }
            },
            "description": {
              "description": "The localized description of the payment method or card.",
              "type": "string"
            },
            "id": {
              "maxLength": 256,
              "description": "The ID of the payment method or card.",
              "type": "string"
            },
            "image": {
              "description": "The URL to the image that represents the payment method or card.",
              "type": "string"
            },
            "name": {
              "description": "The localized name of the payment method or card.",
              "type": "string"
            },
            "paymentProcessorId": {
              "description": "The payment processor ID.",
              "type": "string"
            }
          },
          "required": [
            "id"
          ],
          "type": "object"
        }
      ]
    },
    "dataTypes.PaymentMethodResult": {
      "description": "Result document of payment methods applicable for a basket.",
      "properties": {
        "applicablePaymentMethods": {
          "description": "The applicable payment methods.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/dataTypes.PaymentMethod"
          }
        }
      },
      "type": "object"
    },
    "dataTypes.PriceAdjustment": {
      "description": "Document representing a price adjustment within a basket or order. Price adjustments\ncan be assigned at the order, product, or shipping level.",
      "allOf": [
        {
          "$ref": "#/definitions/CommerceCloudStandards.OpenObject"
        },
        {
          "properties": {
            "appliedDiscount": {
              "description": "Details describing the discount this price adjustment is based on. For adjustments\nnot based on a discount, this value is null.",
              "$ref": "#/definitions/dataTypes.Discount"
            },
            "couponCode": {
              "description": "The coupon code of the coupon this price adjustment is based on. For adjustments \nnot based on a coupon, this value is null.",
              "example": "5ties",
              "type": "string"
            },
            "createdBy": {
              "description": "The user who created the price adjustment.",
              "example": "Support",
              "type": "string"
            },
            "creationDate": {
              "description": "The timestamp when the price adjustment was created.",
              "example": "2015-05-19T15:23:18.000Z",
              "type": "string",
              "format": "date-time"
            },
            "custom": {
              "description": "A flag indicating whether this price adjustment was created by custom logic. This \nflag is set to true unless the price adjustment was created by the promotion \nengine.",
              "example": true,
              "type": "boolean"
            },
            "itemText": {
              "description": "The text describing the item.",
              "type": "string"
            },
            "lastModified": {
              "description": "The timestamp when the price adjustment was last modified.",
              "example": "2021-02-25T09:58:08.715Z",
              "type": "string",
              "format": "date-time"
            },
            "manual": {
              "description": "A flag indicating whether this price adjustment was created by a manual process.\nIf the price adjustment was created by the promotion engine, this value is always\nfalse.",
              "example": true,
              "type": "boolean"
            },
            "price": {
              "format": "double",
              "description": "The adjustment price.",
              "example": 120.88,
              "type": "number"
            },
            "priceAdjustmentId": {
              "description": "The price adjustment ID.",
              "example": "ba248424e3eee797f062161f8b",
              "type": "string"
            },
            "promotionId": {
              "description": "The ID of the related promotion. Custom price adjustments\ncan be assigned any promotion ID so long it is not\nused by a price adjustment belonging to the same item,\nand is not used by a promotion defined in the promotion engine.\nIf not specified, a promotion ID is generated.",
              "type": "string"
            },
            "promotionLink": {
              "description": "The URL addressing the related promotion.",
              "type": "string"
            },
            "reasonCode": {
              "description": "The reason for the price adjustment.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ]
    },
    "dataTypes.PriceAdjustmentRequest": {
      "description": "Request that represents a price adjustment.",
      "allOf": [
        {
          "$ref": "#/definitions/CommerceCloudStandards.OpenObject"
        },
        {
          "properties": {
            "discount": {
              "description": "A discount that can be specified instead of a price.",
              "$ref": "#/definitions/dataTypes.DiscountRequest"
            },
            "itemId": {
              "description": "The item to which the price adjustment should be added, depending on the specified level. If the level is ´order´, item id is not needed. If `shipping`, specify the UUID of the shipping item. If `product`, specify the UUID of the product item.",
              "example": "93196fae953cbedbe54d67e760",
              "type": "string"
            },
            "itemText": {
              "description": "The text describing the item in more detail.",
              "example": "A discounted item",
              "type": "string"
            },
            "level": {
              "description": "The level at which the adjustment is applied.\n- `order` indicates that the price adjustment should be added directly to basket. \n- `product` indicates that the price adjustment should be added to the product item.\n- `shipping` indicates that the price adjustment is added to the shipping item.",
              "example": "order",
              "enum": [
                "product",
                "shipping",
                "order"
              ],
              "type": "string"
            },
            "promotionId": {
              "description": "The ID of the related promotion. Custom price adjustments can be assigned any promotion ID as long as it's not used by a price adjustment belonging to the same item and isn't used by a promotion defined in the promotion engine. If not specified, a promotion ID is generated.",
              "example": "Shipping100",
              "type": "string"
            },
            "reasonCode": {
              "description": "The reason for the price adjustment.",
              "example": "Shipping promotion on order above $1,000 USD",
              "type": "string"
            }
          },
          "required": [
            "level"
          ],
          "type": "object"
        }
      ]
    },
    "dataTypes.PriceBookIds": {
      "maxItems": 10,
      "description": "Array of price book IDs to use for the basket calculation.",
      "type": "array",
      "items": {
        "maxLength": 256,
        "type": "string"
      }
    },
    "dataTypes.ProductDetailsLink": {
      "description": "Document representing a link to the resource for product details.",
      "allOf": [
        {
          "$ref": "#/definitions/CommerceCloudStandards.ClosedObject"
        },
        {
          "properties": {
            "productDescription": {
              "description": "The description of the product.",
              "example": "Nintendo DS revolutionizes handheld gameplay.",
              "type": "string"
            },
            "productId": {
              "description": "The ID of the product.",
              "example": "nintendo-ds-console",
              "type": "string"
            },
            "productName": {
              "description": "The name of the product.",
              "example": "Nintendo DS Game Console",
              "type": "string"
            },
            "title": {
              "description": "The link title.",
              "example": "Nintendo DS Game Console",
              "type": "string"
            }
          },
          "required": [
            "productId"
          ],
          "type": "object"
        }
      ]
    },
    "dataTypes.ProductItem": {
      "description": "Document representing a product item.",
      "allOf": [
        {
          "$ref": "#/definitions/CommerceCloudStandards.OpenObject"
        },
        {
          "properties": {
            "adjustedTax": {
              "format": "double",
              "description": "The tax on the line item, including any adjustments.",
              "example": 19,
              "type": "number"
            },
            "basePrice": {
              "format": "double",
              "description": "The base price of the line item, which is the unit price not including \nadjustments. If the taxation policy is net, it doesn't include tax. If the\ntaxation policy is gross, it includes tax.",
              "example": 130,
              "type": "number"
            },
            "bonusDiscountLineItemId": {
              "description": "The ID of the bonus discount line item this bonus product relates to.",
              "type": "string"
            },
            "bonusProductLineItem": {
              "description": "A flag indicating whether the product item is a bonus.",
              "example": true,
              "type": "boolean"
            },
            "bundledProductItems": {
              "description": "The bundled product items.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/dataTypes.ProductItem"
              }
            },
            "gift": {
              "description": "Returns true if the item is a gift.",
              "example": true,
              "type": "boolean"
            },
            "giftMessage": {
              "description": "The gift message.",
              "example": "Happy Birthday",
              "type": "string"
            },
            "inventoryId": {
              "maxLength": 256,
              "description": "The inventory list ID associated with this item.",
              "example": "inventory",
              "type": "string"
            },
            "itemId": {
              "description": "The product item ID. Use it to identify this item when updating its quantity or \ncreating a custom price adjustment for it.",
              "example": "430ef5aad3a24de59378458434",
              "type": "string"
            },
            "itemText": {
              "description": "The text describing the item.",
              "type": "string"
            },
            "optionItems": {
              "description": "The option items.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/dataTypes.OptionItem"
              }
            },
            "price": {
              "format": "double",
              "description": "The price of the line item before applying any adjustments. If the line item is based on net pricing\nthen the net price is returned. If the line item is based on gross\npricing then the gross price is returned.",
              "type": "number"
            },
            "priceAdjustments": {
              "description": "The price adjustments.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/dataTypes.PriceAdjustment"
              }
            },
            "priceAfterItemDiscount": {
              "format": "double",
              "description": "The price of the product line item including item-level adjustments, but not \nincluding order-level adjustments or shipping charges. If the taxation policy is \nnet, it doesn't include tax. If the taxation policy is gross, it includes tax.",
              "example": 20.99,
              "type": "number"
            },
            "priceAfterOrderDiscount": {
              "format": "double",
              "description": "The price of the product line item including item-level adjustments and prorated\norder-level adjustments, but not including shipping charges. If the taxation \npolicy is net, it doesn't include tax. If the taxation policy is gross, it \nincludes tax.",
              "example": 15.5,
              "type": "number"
            },
            "productId": {
              "maxLength": 100,
              "description": "The ID of the product.",
              "example": "nintendo-ds-console",
              "type": "string"
            },
            "productListItem": {
              "description": "If this product line item was added from a product list, this value is a reference\nto the corresponding product list item.",
              "$ref": "#/definitions/dataTypes.ProductListItemReference"
            },
            "productName": {
              "description": "The name of the product.",
              "example": "Nintendo DS Game Console",
              "type": "string"
            },
            "quantity": {
              "minimum": 0,
              "maximum": 999,
              "format": "double",
              "description": "The quantity of the products represented by this item.",
              "example": 1,
              "type": "number"
            },
            "shipmentId": {
              "description": "The ID of the shipment this item belongs to.",
              "example": "me",
              "type": "string"
            },
            "shippingItemId": {
              "description": "If the product line item has a related shipping item, this value is its ID. A \nrelated shipping item represents a surcharge applied to individual products using\na particular shipping method.",
              "example": "006490dcc338feeafc71c964bf",
              "type": "string"
            },
            "tax": {
              "format": "double",
              "description": "The tax for the product item, not including price adjustments.",
              "example": 0.3,
              "type": "number"
            },
            "taxBasis": {
              "format": "double",
              "description": "The price used to calculate the tax for this product item.",
              "example": 30,
              "type": "number"
            },
            "taxClassId": {
              "description": "The tax class ID for the product item, or null\nif no tax class ID is associated with the product item.",
              "type": "string"
            },
            "taxRate": {
              "format": "double",
              "description": "The tax rate, which is the decimal tax rate to be applied\nto the product represented by this item.",
              "example": 0.9,
              "type": "number"
            }
          },
          "type": "object"
        }
      ]
    },
    "dataTypes.ProductListItemReference": {
      "description": "Document representing product list item details.",
      "allOf": [
        {
          "$ref": "#/definitions/CommerceCloudStandards.ClosedObject"
        },
        {
          "properties": {
            "id": {
              "description": "The ID of the product list item.",
              "example": "ba248424e3fee797f062162f8b",
              "type": "string"
            },
            "priority": {
              "format": "int32",
              "description": "The priority of the product list item.",
              "example": 1,
              "type": "integer"
            },
            "productDetailsLink": {
              "$ref": "#/definitions/dataTypes.ProductDetailsLink"
            },
            "productList": {
              "description": "A reference to the associated product list.",
              "$ref": "#/definitions/dataTypes.ProductListLink"
            },
            "public": {
              "example": false,
              "type": "boolean"
            },
            "purchasedQuantity": {
              "format": "double",
              "description": "The total quantity of this item purchased from the product list.",
              "example": 0,
              "type": "number"
            },
            "quantity": {
              "minimum": 0,
              "format": "double",
              "description": "The number of products or gift certificates that get shipped when purchasing this product list item.",
              "example": 1,
              "type": "number"
            },
            "type": {
              "description": "Specifies whether the item is a product or a gift certificate.",
              "example": "product",
              "enum": [
                "product",
                "gift_certificate"
              ],
              "type": "string"
            }
          },
          "required": [
            "id"
          ],
          "type": "object"
        }
      ]
    },
    "dataTypes.ProductListLink": {
      "description": "Document representing a link to a product list.",
      "properties": {
        "description": {
          "description": "The description of this product list.",
          "type": "string"
        },
        "name": {
          "description": "The name of this product list.",
          "type": "string"
        },
        "public": {
          "description": "A flag indicating whether the owner made this product list available for access\nby other customers.",
          "example": true,
          "type": "boolean"
        },
        "title": {
          "description": "The link title.",
          "type": "string"
        },
        "type": {
          "description": "The type of the product list.",
          "example": "shopping_list",
          "enum": [
            "wish_list",
            "gift_registry",
            "shopping_list",
            "custom_1",
            "custom_2",
            "custom_3"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "dataTypes.Shipment": {
      "description": "Document representing a shipment.",
      "allOf": [
        {
          "$ref": "#/definitions/CommerceCloudStandards.OpenObject"
        },
        {
          "properties": {
            "adjustedMerchandizeTotalTax": {
              "format": "double",
              "description": "The total tax on products in the shipment, including item-level price adjustments but not including\nservice charges such as shipping. If the Discount Taxation preference is set to Tax Products and \nShipping Only Based on Adjusted Price, this amount also includes prorated order-level price adjustments.",
              "example": 4.95,
              "type": "number"
            },
            "adjustedShippingTotalTax": {
              "format": "double",
              "description": "The total tax on shipping charges in the shipment, including shipping price adjustments.",
              "example": 0.3,
              "type": "number"
            },
            "gift": {
              "description": "A flag indicating whether the shipment is a gift.",
              "example": true,
              "type": "boolean"
            },
            "giftMessage": {
              "description": "The gift message.",
              "example": "Happy Birthday",
              "type": "string"
            },
            "merchandizeTotalTax": {
              "format": "double",
              "description": "The total tax on products in the shipment, not including price adjustments or service charges such as \nshipping.",
              "example": 4.95,
              "type": "number"
            },
            "productSubTotal": {
              "format": "double",
              "description": "The total price of all products in the shipment, including item-level adjustments, but not including\norder-level adjustments or shipping charges. If the taxation policy is net, it doesn't include tax. If\nthe taxation policy is gross, it includes tax.",
              "example": 99,
              "type": "number"
            },
            "productTotal": {
              "format": "double",
              "description": "The total price of all products in the shipment including item-level adjustments and prorated \norder-level adjustments, but not including shipping charges. If the taxation policy is net, it doesn't\ninclude tax. If the taxation policy is gross, it includes tax.",
              "example": 99,
              "type": "number"
            },
            "shipmentId": {
              "description": "The order-specific ID of the shipment. The default value is 'me'.",
              "example": "me",
              "type": "string"
            },
            "shipmentNo": {
              "description": "The shipment number of this shipment. This number is automatically generated.",
              "type": "string"
            },
            "shipmentTotal": {
              "format": "double",
              "description": "The total price of all products in the shipment including item-level adjustments, shipping charges, \nand tax.",
              "example": 39.99,
              "type": "number"
            },
            "shippingAddress": {
              "description": "The shipping address.",
              "$ref": "#/definitions/dataTypes.OrderAddress"
            },
            "shippingMethod": {
              "description": "The shipping method.",
              "$ref": "#/definitions/dataTypes.ShippingMethod"
            },
            "shippingStatus": {
              "description": "The shipping status of the shipment.",
              "example": "shipped",
              "enum": [
                "not_shipped",
                "shipped"
              ],
              "type": "string"
            },
            "shippingTotal": {
              "format": "double",
              "description": "The total price of all shipping charges in the shipment, including shipping adjustments. If the \ntaxation policy is net, it doesn't include tax. If the taxation policy is gross, it includes tax.",
              "example": 5.99,
              "type": "number"
            },
            "shippingTotalTax": {
              "format": "double",
              "description": "The total tax on shipping charges in the shipment, not including shipping price adjustments.",
              "example": 0.3,
              "type": "number"
            },
            "taxTotal": {
              "format": "double",
              "description": "The total tax on the shipment, including item-level price adjustments and service charges such as\nshipping. If the Discount Taxation preference is set to Tax Products and Shipping Only Based on \nAdjusted Price, this amount also includes prorated order-level price adjustments.",
              "example": 1.8,
              "type": "number"
            },
            "trackingNumber": {
              "description": "The tracking number of the shipment.",
              "example": "1Z204E380338943508",
              "type": "string"
            }
          },
          "type": "object"
        }
      ]
    },
    "dataTypes.ShippingItem": {
      "description": "Document representing a shipping item.",
      "allOf": [
        {
          "$ref": "#/definitions/CommerceCloudStandards.OpenObject"
        },
        {
          "properties": {
            "adjustedTax": {
              "format": "double",
              "description": "The tax for the shipping item, including price adjustments.",
              "example": 19,
              "type": "number"
            },
            "basePrice": {
              "format": "double",
              "description": "The base price of the shipping item, which is the unit price not including adjustments. \nIf the taxation policy is net, it doesn't include tax. If the taxation policy is gross, it includes tax.",
              "example": 50,
              "type": "number"
            },
            "itemId": {
              "description": "The shipping item ID. Use it to identify this shipping item when updating its quantity or creating a\ncustom price adjustment for it.",
              "example": "430ef5aad3a24de59378458434",
              "type": "string"
            },
            "itemText": {
              "description": "The text describing the shipping item.",
              "example": "Shipping",
              "type": "string"
            },
            "price": {
              "format": "double",
              "description": "The price of the line item before applying any adjustments. If the line item is based on net pricing\nthen the net price is returned. If the line item is based on gross\npricing then the gross price is returned.",
              "type": "number"
            },
            "priceAdjustments": {
              "description": "The price adjustments.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/dataTypes.PriceAdjustment"
              }
            },
            "priceAfterItemDiscount": {
              "format": "double",
              "description": "The price of the shipping item including item-level adjustments, but not including order-level\nadjustments or shipping charges. If the taxation policy is net, it doesn't include tax. \nIf the taxation policy is gross, it includes tax.",
              "type": "number"
            },
            "shipmentId": {
              "description": "The identifier of the shipment to which this item belongs.",
              "example": "me",
              "type": "string"
            },
            "tax": {
              "format": "double",
              "description": "The tax on the product item, not including adjustments.",
              "example": 0.19,
              "type": "number"
            },
            "taxBasis": {
              "format": "double",
              "description": "The price used to calculate the tax for this shipping item.",
              "type": "number"
            },
            "taxClassId": {
              "description": "The tax class ID for the product item, or null\nif no tax class ID is associated with the product item.",
              "type": "string"
            },
            "taxRate": {
              "format": "double",
              "description": "The tax rate applicable to this product line item. For a 10% tax rate, the value is 0.1.",
              "type": "number"
            }
          },
          "type": "object"
        }
      ]
    },
    "dataTypes.ShippingMethod": {
      "description": "Document representing a shipping method.",
      "allOf": [
        {
          "$ref": "#/definitions/CommerceCloudStandards.OpenObject"
        },
        {
          "properties": {
            "description": {
              "description": "The localized description of the shipping method.",
              "example": "Order received within 7-10 business days",
              "type": "string"
            },
            "externalShippingMethod": {
              "description": "The external shipping method.",
              "type": "string"
            },
            "id": {
              "maxLength": 256,
              "description": "The shipping method ID.",
              "example": "001",
              "type": "string"
            },
            "name": {
              "description": "The localized name of the shipping method.",
              "example": "Ground",
              "type": "string"
            },
            "price": {
              "format": "double",
              "description": "The shipping cost total, including shipment level costs,\nproduct level fix, and surcharge costs.",
              "example": 15,
              "type": "number"
            },
            "shippingPromotions": {
              "description": "The array of active customer shipping promotions for this shipping\nmethod. This array can be empty.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/dataTypes.ShippingPromotion"
              }
            }
          },
          "required": [
            "id"
          ],
          "type": "object"
        }
      ]
    },
    "dataTypes.ShippingMethodResult": {
      "description": "Result document containing shipping methods.",
      "properties": {
        "applicableShippingMethods": {
          "description": "The applicable shipping method documents.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/dataTypes.ShippingMethod"
          }
        },
        "defaultShippingMethodId": {
          "description": "The default shipping method.",
          "example": "me",
          "type": "string"
        }
      },
      "type": "object"
    },
    "dataTypes.ShippingPromotion": {
      "description": "Document representing a shipping promotion.",
      "allOf": [
        {
          "$ref": "#/definitions/CommerceCloudStandards.OpenObject"
        },
        {
          "properties": {
            "calloutMsg": {
              "description": "The localized callout message of the promotion.",
              "example": "$30 Fixed Shipping Amount Above 150",
              "type": "string"
            },
            "promotionId": {
              "description": "The unique ID of the promotion.",
              "example": "$30FixedShippingAmountAbove150",
              "type": "string"
            },
            "promotionName": {
              "description": "The localized promotion name.",
              "example": "$30 Fixed Shipping Amount Above 150",
              "type": "string"
            }
          },
          "type": "object"
        }
      ]
    },
    "dataTypes.SimpleLink": {
      "description": "Document representing a link to another resource.",
      "$ref": "#/definitions/CommerceCloudStandards.ClosedObject"
    },
    "dataTypes.Status": {
      "description": "Document representing an object status.",
      "allOf": [
        {
          "$ref": "#/definitions/CommerceCloudStandards.ClosedObject"
        },
        {
          "properties": {
            "code": {
              "description": "The status code.",
              "type": "string"
            },
            "message": {
              "description": "The status message.",
              "type": "string"
            },
            "status": {
              "format": "int32",
              "description": "The status.\nFor more information on the status values see Status.OK and Status.ERROR.",
              "type": "integer"
            }
          },
          "type": "object"
        }
      ]
    },
    "dataTypes.Taxes": {
      "description": "Document representing the tax rates and (optionally) amounts for all items in a basket.",
      "allOf": [
        {
          "$ref": "#/definitions/CommerceCloudStandards.ClosedObject"
        },
        {
          "properties": {
            "taxes": {
              "description": "Map containing the TaxItems for the line item ids: Map<LineItemId, TaxItems []>",
              "additionalProperties": {
                "$ref": "#/definitions/dataTypes.TaxItems"
              },
              "type": "string"
            }
          },
          "required": [
            "taxes"
          ],
          "type": "object"
        }
      ]
    },
    "dataTypes.TaxItems": {
      "description": "Taxation for a line item.",
      "properties": {
        "taxItems": {
          "description": "The list of tax items.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/dataTypes.TaxItem"
          }
        }
      },
      "type": "object"
    },
    "dataTypes.TaxItem": {
      "description": "Object representing the taxation.",
      "allOf": [
        {
          "$ref": "#/definitions/CommerceCloudStandards.ClosedObject"
        },
        {
          "properties": {
            "id": {
              "description": "The taxation identifier.",
              "type": "string"
            },
            "rate": {
              "format": "double",
              "description": "The taxation rate.",
              "example": 0.13,
              "type": "number"
            },
            "value": {
              "format": "double",
              "description": "The tax amount. Will be computed if not set.",
              "type": "number"
            }
          },
          "required": [
            "id",
            "rate"
          ],
          "type": "object"
        }
      ]
    },
    "CommerceCloudStandards.ISO.Country": {
      "pattern": "^[A-Z][A-Z]$",
      "description": "A two letter uppercase country code conforming to the [ISO 3166-1](https://www.iso.org/iso-3166-country-codes.html) alpha-2 standard.",
      "example": "US",
      "type": "string"
    },
    "CommerceCloudStandards.ISO.Locale": {
      "description": "A descriptor for a geographical region by both a language and country code. By combining these two, regional differences in a language can be addressed, such as with the request header parameter `Accept-Language` following [RFC 2616](https://tools.ietf.org/html/rfc2616) & [RFC 1766](https://tools.ietf.org/html/rfc1766). This can also just refer to a language code, also RFC 2616/1766 compliant, as a default if there is no specific match for a country. Finally, can also be used to define default behavior if there is no locale specified.",
      "type": "string"
    },
    "CommerceCloudStandards.AdditionalProperties.NoPropertiesAllowed": {
      "description": "This type is intended as an abstract super type that indicates that no additional properties are supported for this type and its sub types. All types that do not support any additional properties should inherit from this type. This type is not allowed to be used directly in any API and should always be extended.",
      "type": "object",
      "additionalProperties": false
    },
    "CommerceCloudStandards.AdditionalProperties.SpecifiedPropertiesAllowed": {
      "description": "This type is intended as an abstract super type that indicates that additional properties are supported for this type and its sub types (unless one of those subtypes inherits from `ClosedObject`). All types that support any additional properties should inherit from this type. This type is not allowed to be used directly in any API and should always be extended.\n\nTo indicate that the properties were defined and expected to be handled as additional properties, they are expected to be prefixed with a `c_`. The type will reject any property that does not fit this pattern, only allowing additional properties beginning with the known prefix.",
      "type": "object",
      "additionalProperties": {
        "title": "Additional Property Support",
        "description": "This type supports additional properties passed along with the defined properties of this API. To indicate that the properties were defined and expected to be handled as additional properties, they are expected to be prefixed with a `c_`. The type will reject any property that does not fit this pattern, only allowing additional properties beginning with the known prefix.",
        "example": "c_faxNumber",
        "type": "string"
      }
    },
    "CommerceCloudStandards.SiteId": {
      "minLength": 1,
      "description": "The identifer of the site that a request is being made in the context of. Attributes might have site specific values, and some objects may only be assigned to specific sites",
      "example": "SiteGenesis",
      "type": "string"
    },
    "CommerceCloudStandards.CountryCode": {
      "$ref": "#/definitions/CommerceCloudStandards.ISO.Country"
    },
    "CommerceCloudStandards.LocaleCode": {
      "$ref": "#/definitions/CommerceCloudStandards.ISO.Locale"
    },
    "CommerceCloudStandards.ClosedObject": {
      "$ref": "#/definitions/CommerceCloudStandards.AdditionalProperties.NoPropertiesAllowed"
    },
    "CommerceCloudStandards.OpenObject": {
      "$ref": "#/definitions/CommerceCloudStandards.AdditionalProperties.SpecifiedPropertiesAllowed"
    }
  },
  "parameters": {
    "trait:CommerceCloudStandards.SiteSpecific:siteId": {
      "in": "query",
      "name": "siteId",
      "required": true,
      "type": "string"
    },
    "trait:BasketTraits.LocaleSpecific:locale": {
      "description": "A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.\nBelow are some valid examples:\n- en-US\n- de-AT\n- de\n- default",
      "in": "query",
      "name": "locale",
      "type": "string"
    }
  },
  "responses": {
    "trait:ApiStandards.RateLimited:429": {
      "description": "The user has sent too many requests in a given amount of time (\"rate limiting\")",
      "headers": {
        "Retry-After": {
          "examples": [
            120
          ],
          "type": "string"
        }
      },
      "schema": {
        "example": {
          "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/too-many-requests",
          "title": "Too Many Requests",
          "detail": "You have performed too many requests in a short period of time."
        },
        "properties": {
          "type": {
            "description": "A URI reference [RFC3986] that identifies the\nproblem type.  This specification encourages that, when\ndereferenced, it provide human-readable documentation for the\nproblem type (e.g., using HTML [W3C.REC-html5-20141028]).  When\nthis member is not present, its value is assumed to be\n\"about:blank\". It accepts relative URIs; this means\nthat they must be resolved relative to the document's base URI, as\nper [RFC3986], Section 5.\n",
            "example": "https://example.com/probs/out-of-credit",
            "type": "string"
          },
          "title": {
            "description": "A short, human-readable summary of the problem\ntype.  It will not change from occurrence to occurrence of the\nproblem, except for purposes of localization.\n",
            "example": "You do not have enough credit.",
            "type": "string"
          },
          "detail": {
            "description": "A human-readable explanation specific to this\noccurrence of the problem.\n",
            "example": "Your current balance is 30, but that costs 50.",
            "type": "string"
          },
          "instance": {
            "description": "A URI reference that identifies the specific\noccurrence of the problem.  It may or may not yield further\ninformation if dereferenced.  It accepts relative URIs; this means\nthat they must be resolved relative to the document's base URI, as\nper [RFC3986], Section 5.\n",
            "example": "/account/12345/msgs/abc",
            "type": "string"
          }
        },
        "required": [
          "type"
        ]
      }
    }
  },
  "paths": {
    "/organizations/{organizationId}/baskets": {
      "post": {
        "description": "Creates a new basket.\n\nThe created basket is initialized with default values. Optional JSON data provided in the request body is populated into the created basket. It can be updated with other endpoints offered by the Shopper Baskets API.\n\nEach customer can have just one open basket. When a basket is created, it is said to be open. It remains open until either an order is created from it or it is deleted.",
        "operationId": "createBasket",
        "produces": [
          "application/problem+json"
        ],
        "responses": {
          "200": {
            "description": "The initialized basket.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": {
                "dataTypes.Basket": "Can not resolve examples/basket/basket-post-response.raml"
              }
            },
            "schema": {
              "$ref": "#/definitions/dataTypes.Basket"
            }
          },
          "400": {
            "description": "Possible reasons:\n- the provided payment method is invalid or not applicable.\n- the customerId URL parameter does not match the verified customer\nrepresented by the JSON Web Token (JWT).\n- a new basket cannot be created because the maximum number\nof baskets per customer would be exceeded.\n- the same shipment ID appeared twice in the body.\n- the coupon number is not provided.\n- a fixed price adjustment was added at order level which is disallowed.\n- a promotion ID was\nused twice, while attempting to add a price adjustment.\n- a system promotion\nID was used as a manual promotion ID, while attempting to add a price adjustment.\n- more than one hundred price adjustments would have been\ncreated.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/problem+json": {
                "dataTypes.ErrorResponse": {
                  "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/bad-request",
                  "title": "Bad Request",
                  "detail": "Decoding of the property with path '$.failedExample.[1].intProperty' failed because the expected type is 'Integer|Decimal' but the actual type was 'String'."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Thrown if the shipment with the given shipment ID is unknown.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/problem+json": {
                "dataTypes.ErrorResponse": {
                  "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/shipment-not-found",
                  "title": "Shipment Not Found",
                  "detail": "The shipping method with ID '123' is unknown or can't be applied to the basket."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "Thrown if Salesforce Commerce API Hook Execution is enabled with taxMode external.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": {
                "dataTypes.ErrorResponse": {
                  "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/unsupported-request-if-scapi-hooks-enabled",
                  "title": "Unsupported Request If SCAPI Hooks Enabled",
                  "detail": "You can't call this endpoint because Salesforce Commerce API hook execution is enabled."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "$ref": "#/responses/trait:ApiStandards.RateLimited:429"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "dataTypes.Basket": "Can not resolve examples/basket/basket-post-request.raml"
              },
              "$ref": "#/definitions/dataTypes.Basket"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "default": "internal",
            "description": "Determines how taxes are calculated. \n\nThe default value is `internal` where the tax calculation is done automatically based on internal tax tables. Setting `taxMode` to `external` allows manual modification of the tax rates and values. External tax data is mandatory for product line items, option line items, shipping line items, coupon line items, and bonus discount line item. Gift certificate line items are optional and use zero tax rate by default, which can be overwritten. Price adjustments cannot be set because they are either calculated or inherited. Depending on the type, the tax rate is either obtained from the related line item or computed as a prorate of the basket.",
            "enum": [
              "internal",
              "external"
            ],
            "type": "string",
            "in": "query",
            "name": "taxMode"
          },
          {
            "$ref": "#/parameters/trait:CommerceCloudStandards.SiteSpecific:siteId"
          },
          {
            "$ref": "#/parameters/trait:BasketTraits.LocaleSpecific:locale"
          }
        ]
      },
      "parameters": [
        {
          "description": "An identifier for the organization the request is being made by.",
          "type": "string",
          "in": "path",
          "name": "organizationId",
          "required": true
        }
      ]
    },
    "/organizations/{organizationId}/baskets/actions/transfer": {
      "post": {
        "description": "Transfer the previous shopper's basket to the current shopper by updating the basket's owner. No other values change. You must obtain the shopper authorization token via SLAS and you must provide the ‘guest usid‘ in both the ‘/oauth2/login‘ and ‘/oauth2/token‘ calls while fetching the registered user JWT token.\n\nA success response contains the transferred basket.\n\nIf the current shopper has an active basket, and the `overrideExisting` request parameter is `false`, then the transfer request returns a BasketTransferException (HTTP status 409). You can proceed with one of these options:\n- Keep the current shopper's active basket.\n- Merge the previous and current shoppers' baskets by calling the `baskets/merge` endpoint.\n- Force the transfer by calling the `baskets/transfer` endpoint again, with the parameter `overrideExisting=true`. Forcing the transfer deletes the current shopper's active basket.",
        "operationId": "transferBasket",
        "produces": [
          "application/problem+json"
        ],
        "responses": {
          "200": {
            "description": "The transferred basket.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": {
                "dataTypes.Basket": "Can not resolve examples/basket/basket-post-response.raml"
              }
            },
            "schema": {
              "$ref": "#/definitions/dataTypes.Basket"
            }
          },
          "403": {
            "description": "The call returns this error if no SLAS token for a registered shopper is available.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": {
                "SLASJWTException": "Can not resolve examples/error/slas-jwt-exception.raml"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "The call returns this response in either of these cases:\n- The previous shopper has no active basket.\n- The current shopper has an active basket and the `overrideExisting` query parameter was `false` (default value).",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/problem+json": {
                "SourceBasketException": "Can not resolve examples/error/source-basket-exception.raml",
                "BasketTransferException": "Can not resolve examples/error/basket-transfer-exception.raml"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "$ref": "#/responses/trait:ApiStandards.RateLimited:429"
          }
        },
        "parameters": [
          {
            "default": false,
            "description": "If the current shopper has no active basket, this parameter is ignored. If the current shopper has an active basket, this parameter controls the behavior:\n- `false` (default): Return a BasketTransferException (HTTP status 409). The basket owner doesn't change.\n- `true`: Force the transfer by deleting the current shopper's active basket and making the current shopper the owner of the previous shopper's basket. Returns the transferred basket (HTTP status 200).",
            "type": "boolean",
            "in": "query",
            "name": "overrideExisting"
          },
          {
            "$ref": "#/parameters/trait:CommerceCloudStandards.SiteSpecific:siteId"
          },
          {
            "$ref": "#/parameters/trait:BasketTraits.LocaleSpecific:locale"
          }
        ]
      },
      "parameters": [
        {
          "description": "An identifier for the organization the request is being made by.",
          "type": "string",
          "in": "path",
          "name": "organizationId",
          "required": true
        }
      ]
    },
    "/organizations/{organizationId}/baskets/actions/merge": {
      "post": {
        "description": "Merge data from the previous shopper's basket into the current shopper's active basket and delete the previous shopper's basket. This endpoint doesn't merge Personally Identifiable Information (PII). You must obtain the shopper authorization token via SLAS and you must provide the ‘guest usid‘ in both the ‘/oauth2/login‘ and ‘/oauth2/token‘ calls while fetching the registered user JWT token. After the merge, all basket amounts are recalculated and totaled, including lookups for prices, taxes, shipping, and promotions.\n\nThe following information is merged:\n- custom attributes on the basket and on all copied records\n- product items\n- gift certificate items\n- coupon items\n- shipments\n- ad-hoc price adjustments\n\nTo control the merging of products that exist in both baskets, use the `productItemMergeMode` parameter. By default, the higher of the two basket quantities is used for each product. Products in both baskets are considered to be the same when all of the following values match (if one product doesn't have a value, the other product is a match only if it also doesn't have that value):\n- shipment\n- productId\n- option values\n- wishlist reference\n- inventory list id\n- gift flag & message\n- ad-hoc price adjustments\n\nIf any of the listed values don't match, then the item in the previous shopper's basket is copied to a new line item in the current shopper's basket. If the listed values all match, but the matching products have different values for any custom attribute, the merged line item keeps the custom attribute value from the current shopper's basket.\n\nA success response contains the current shopper's active basket. The previous guest shopper's active basket is deleted.\n\nIf the current shopper doesn't have an active basket, and the createDestinationBasket request parameter is false, then the merge request returns a BasketMergeException (HTTP status 409). You can proceed with one of these options:\n- Transfer the previous shopper's active basket to the current logged-in shopper by calling the `baskets/transfer` endpoint.\n- Force the merge by calling the `baskets/merge` endpoint again, with the parameter `createDestinationBasket=true`. Forcing the merge creates a new basket for the current shopper and copies information from the previous shopper's basket into it. Because the merge doesn't copy all basket data, a forced merge is not the same as a transfer. For example, the new basket doesn't contain any Personally Identifiable Information (PII) from the previous basket.\n\n### before merge\n| Previous Shopper's Basket, SKU: Quantity, Custom Attributes | Current Shopper's Basket, SKU: Quantity, Custom Attributes  |\n|-------------------------------------------------------------|-------------------------------------------------------------|\n| SKU_A: 5<br> SKU_B: 3<br> SKU_C: 4<br> c_customAttr_1: 'ABC' <br> c_customAttr_2: 'DEF'   | SKU_A: 2<br> SKU_D: 6<br> SKU_E: 7<br> c_customAttr_1: 'UVW' <br> c_customAttr_3: 'XYZ'   |\n\n### after merge - (previous shopper's basket is deleted)\n| productItemMergeMode | Current Shopper's Basket - SKU: Quantity, Custom Attributes  |\n|----------------------|--------------------------------------------------------------|\n| sum_quantities         | SKU_A: 7<br> SKU_B: 3<br> SKU_C: 4<br> SKU_D: 6<br> SKU_E: 7<br> c_customAttr_1: 'UVW' <br> c_customAttr_2: 'DEF' <br> c_customAttr_3: 'XYZ'              |\n| higher_quantity      | SKU_A: 5<br> SKU_B: 3<br> SKU_C: 4<br> SKU_D: 6<br> SKU_E: 7<br> c_customAttr_1: 'UVW' <br> c_customAttr_2: 'DEF' <br> c_customAttr_3: 'XYZ'              |\n| saved_quantity       | SKU_A: 2<br> SKU_B: 3<br> SKU_C: 4<br> SKU_D: 6<br> SKU_E: 7<br> c_customAttr_1: 'UVW' <br> c_customAttr_2: 'DEF' <br> c_customAttr_3: 'XYZ'              |\n| separate_item        | SKU_A: 5<br> SKU_B: 3<br> SKU_C: 4<br> SKU_A: 2<br> SKU_D: 6<br> SKU_E: 7<br> c_customAttr_1: 'UVW' <br> c_customAttr_2: 'DEF' <br> c_customAttr_3: 'XYZ' |",
        "operationId": "mergeBasket",
        "produces": [
          "application/problem+json"
        ],
        "responses": {
          "200": {
            "description": "The current shopper's active basket, including items merged from the previous shopper's basket.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": {
                "dataTypes.Basket": "Can not resolve examples/basket/basket-post-response.raml"
              }
            },
            "schema": {
              "$ref": "#/definitions/dataTypes.Basket"
            }
          },
          "403": {
            "description": "The call returns this error if no SLAS token for a registered shopper is available.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": {
                "SLASJWTException": "Can not resolve examples/error/slas-jwt-exception.raml"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "The call returns this response in either of these cases:\n- The previous shopper has no active basket.\n- The current shopper has no active basket and the `createDestinationBasket` query parameter was `false` (default value).",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/problem+json": {
                "SourceBasketException": "Can not resolve examples/error/source-basket-exception.raml",
                "BasketMergeException": "Can not resolve examples/error/basket-merge-exception.raml"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "$ref": "#/responses/trait:ApiStandards.RateLimited:429"
          }
        },
        "parameters": [
          {
            "default": false,
            "description": "If the current shopper has an active basket, this parameter is ignored. If the current shopper has no active basket, this parameter controls the behavior:\n- `false` (default): Return a BasketMergeException (HTTP status 409).\n- `true`: Force the merge by creating a basket for the current shopper and copying information from the previous shopper's basket into it. Return success (HTTP status 200).",
            "type": "boolean",
            "in": "query",
            "name": "createDestinationBasket"
          },
          {
            "default": "higher_quantity",
            "description": "This parameter controls the quantity calculation for products that exist in both baskets.\n- higher_quantity (default): Compare the product's quantities in each basket, and use the higher value.\n- sum_quantities: Use the sum of the product's quantities from both baskets.\n- saved_quantity: Use the product's quantity in the current shopper's active basket. Ignore the quantity from the previous shopper's basket.\n- separate_item: Add a separate product item to the current shopper's basket for the quantity in the previous shopper's basket.",
            "enum": [
              "higher_quantity",
              "sum_quantities",
              "saved_quantity",
              "separate_item"
            ],
            "type": "string",
            "in": "query",
            "name": "productItemMergeMode"
          },
          {
            "$ref": "#/parameters/trait:CommerceCloudStandards.SiteSpecific:siteId"
          },
          {
            "$ref": "#/parameters/trait:BasketTraits.LocaleSpecific:locale"
          }
        ]
      },
      "parameters": [
        {
          "description": "An identifier for the organization the request is being made by.",
          "type": "string",
          "in": "path",
          "name": "organizationId",
          "required": true
        }
      ]
    },
    "/organizations/{organizationId}/baskets/{basketId}": {
      "delete": {
        "description": "Removes a basket.",
        "operationId": "deleteBasket",
        "produces": [
          "application/problem+json"
        ],
        "responses": {
          "204": {
            "description": "Success, without a body.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            }
          },
          "400": {
            "description": "The customer assigned to the basket does not\nmatch the verified customer represented by the JSON Web Token (JWT).",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/problem+json": {
                "dataTypes.ErrorResponse": {
                  "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/bad-request",
                  "title": "Bad Request",
                  "detail": "The customer is invalid."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "The basket with the given basket ID is unknown.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/problem+json": {
                "dataTypes.ErrorResponse": {
                  "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/basket-not-found",
                  "title": "Basket Not Found",
                  "detail": "No basket with ID '123' could be found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "$ref": "#/responses/trait:ApiStandards.RateLimited:429"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:CommerceCloudStandards.SiteSpecific:siteId"
          }
        ]
      },
      "get": {
        "description": "Gets a basket.",
        "operationId": "getBasket",
        "produces": [
          "application/problem+json"
        ],
        "responses": {
          "200": {
            "description": "Success, the response body contains the retrieved basket.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": {
                "dataTypes.Basket": "Can not resolve examples/basket/basket-get-response.raml"
              }
            },
            "schema": {
              "$ref": "#/definitions/dataTypes.Basket"
            }
          },
          "400": {
            "description": "The customer assigned to the basket does not match the verified\ncustomer represented by the JSON Web Token (JWT).",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/problem+json": {
                "dataTypes.ErrorResponse": {
                  "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/bad-request",
                  "title": "Bad Request",
                  "detail": "The customer is invalid."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "The basket with the given basket ID is unknown.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/problem+json": {
                "dataTypes.ErrorResponse": {
                  "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/basket-not-found",
                  "title": "Basket Not Found",
                  "detail": "No basket with ID '123' could be found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "$ref": "#/responses/trait:ApiStandards.RateLimited:429"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:CommerceCloudStandards.SiteSpecific:siteId"
          },
          {
            "$ref": "#/parameters/trait:BasketTraits.LocaleSpecific:locale"
          }
        ]
      },
      "patch": {
        "description": "Updates a basket. Only the currency of the basket, source code, the custom\nproperties of the basket, and the shipping items will be considered.",
        "operationId": "updateBasket",
        "produces": [
          "application/problem+json"
        ],
        "responses": {
          "200": {
            "description": "Success, the response body contains the updated basket.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": {
                "Basket": "Can not resolve examples/basket/basket-patch-response.raml"
              }
            },
            "schema": {
              "$ref": "#/definitions/dataTypes.Basket"
            }
          },
          "400": {
            "description": "Possible reasons:\n- the customer assigned to the basket does not\nmatch the verified customer represented by the JSON Web Token (JWT).\n- the basket cannot be updated because the\nrequested currency is not supported by the site.\n- the given shipping item ID is null or empty.\n- a few shipping items with the same item ID are\nprovided.\n- the provided code is not currently active.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/problem+json": {
                "dataTypes.ErrorResponse": {
                  "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/bad-request",
                  "title": "Bad Request",
                  "detail": "Decoding of the property with path '$.failedExample.[1].intProperty' failed because the expected type is 'Integer|Decimal' but the actual type was 'String'."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Possible reasons:\n- the basket with the given basket ID is unknown.\n- the shipping item with the given item ID is\nunknown for the basket.\n- the provided code was not found.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/problem+json": {
                "dataTypes.ErrorResponse": {
                  "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/basket-not-found",
                  "title": "Basket Not Found",
                  "detail": "No basket with ID '123' could be found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "$ref": "#/responses/trait:ApiStandards.RateLimited:429"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "dataTypes.Basket": "Can not resolve examples/basket/basket-patch-request.raml"
              },
              "$ref": "#/definitions/dataTypes.Basket"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:CommerceCloudStandards.SiteSpecific:siteId"
          },
          {
            "$ref": "#/parameters/trait:BasketTraits.LocaleSpecific:locale"
          }
        ]
      },
      "parameters": [
        {
          "minLength": 1,
          "description": "The ID of the basket to be modified.",
          "type": "string",
          "in": "path",
          "name": "basketId",
          "required": true
        },
        {
          "description": "An identifier for the organization the request is being made by.",
          "type": "string",
          "in": "path",
          "name": "organizationId",
          "required": true
        }
      ]
    },
    "/organizations/{organizationId}/baskets/{basketId}/agent": {
      "put": {
        "description": "Marks a basket as an agent basket.",
        "operationId": "updateAsAgentBasket",
        "produces": [
          "application/problem+json"
        ],
        "responses": {
          "200": {
            "description": "Success, the response body contains basket that is set as an agent basket.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": {
                "dataTypes.Basket": "Can not resolve examples/basket/basket-put-agent-response.raml"
              }
            },
            "schema": {
              "$ref": "#/definitions/dataTypes.Basket"
            }
          },
          "400": {
            "description": "Marking this basket as an agent basket would exceed the open agent basket limit for the basket customer.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/problem+json": {
                "datatypes.ErrorResponse": "Can not resolve examples/error/customer-basket-quota-exceeded-exception.raml"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "The basket with the given basket ID is unknown.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/problem+json": {
                "dataTypes.ErrorResponse": {
                  "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/basket-not-found",
                  "title": "Basket Not Found",
                  "detail": "No basket with ID '123' could be found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "$ref": "#/responses/trait:ApiStandards.RateLimited:429"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:CommerceCloudStandards.SiteSpecific:siteId"
          },
          {
            "$ref": "#/parameters/trait:BasketTraits.LocaleSpecific:locale"
          }
        ]
      },
      "parameters": [
        {
          "description": "An identifier for the organization the request is being made by.",
          "type": "string",
          "in": "path",
          "name": "organizationId",
          "required": true
        },
        {
          "minLength": 1,
          "description": "The ID of the basket to be modified.",
          "type": "string",
          "in": "path",
          "name": "basketId",
          "required": true
        }
      ]
    },
    "/organizations/{organizationId}/baskets/{basketId}/billing-address": {
      "put": {
        "description": "Sets the billing address of a basket.",
        "operationId": "updateBillingAddressForBasket",
        "produces": [
          "application/problem+json"
        ],
        "responses": {
          "200": {
            "description": "Success, the response body contains basket with the added billing address.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": {
                "dataTypes.Basket": "Can not resolve examples/basket/billing-address-put-response.raml"
              }
            },
            "schema": {
              "$ref": "#/definitions/dataTypes.Basket"
            }
          },
          "400": {
            "description": "The customer assigned to the basket does not\nmatch the verified customer represented by the JSON Web Token (JWT).",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/problem+json": {
                "dataTypes.ErrorResponse": {
                  "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/bad-request",
                  "title": "Bad Request",
                  "detail": "Decoding of the property with path '$.failedExample.[1].intProperty' failed because the expected type is 'Integer|Decimal' but the actual type was 'String'."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "The basket with the given basket ID is unknown.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/problem+json": {
                "dataTypes.ErrorResponse": {
                  "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/basket-not-found",
                  "title": "Basket Not Found",
                  "detail": "No basket with ID '123' could be found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "$ref": "#/responses/trait:ApiStandards.RateLimited:429"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "dataTypes.OrderAddress": "Can not resolve examples/basket/billing-address-put-request.raml"
              },
              "$ref": "#/definitions/dataTypes.OrderAddress"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "type": "boolean",
            "in": "query",
            "name": "useAsShipping"
          },
          {
            "default": true,
            "description": "Changing the billing/shipping address can trigger tax recalculation. If the basket's tax mode is internal, the tax is automatically recalculated using tax tables. If the basket's tax mode is external, this query parameter controls tax recalculation as follows:\n- true: (default) The basket's tax values are set to null and must be recalculated.\n- false: The basket's tax values don't change. Use this setting to prevent an unnecessary external tax call when the billing/shipping address change doesn't affect the tax calculation.          ",
            "type": "boolean",
            "in": "query",
            "name": "removeExternalTax"
          },
          {
            "$ref": "#/parameters/trait:CommerceCloudStandards.SiteSpecific:siteId"
          },
          {
            "$ref": "#/parameters/trait:BasketTraits.LocaleSpecific:locale"
          }
        ]
      },
      "parameters": [
        {
          "description": "An identifier for the organization the request is being made by.",
          "type": "string",
          "in": "path",
          "name": "organizationId",
          "required": true
        },
        {
          "minLength": 1,
          "description": "The ID of the basket to be modified.",
          "type": "string",
          "in": "path",
          "name": "basketId",
          "required": true
        }
      ]
    },
    "/organizations/{organizationId}/baskets/{basketId}/coupons": {
      "post": {
        "description": "Adds a coupon to an existing basket.",
        "operationId": "addCouponToBasket",
        "produces": [
          "application/problem+json"
        ],
        "responses": {
          "200": {
            "description": "Success, the response body contains the basket with the added coupon.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": {
                "dataTypes.Basket": "Can not resolve examples/basket/coupon-code-post-response.raml"
              }
            },
            "schema": {
              "$ref": "#/definitions/dataTypes.Basket"
            }
          },
          "400": {
            "description": "Possible Reasons:\n- the customer assigned to the basket does not\nmatch the verified customer represented by the JSON Web Token (JWT).\n- the coupon number is not provided.\n- the coupon code specified is invalid.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/problem+json": {
                "dataTypes.ErrorResponse": {
                  "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/bad-request",
                  "title": "Bad Request",
                  "detail": "Decoding of the property with path '$.failedExample.[1].intProperty' failed because the expected type is 'Integer|Decimal' but the actual type was 'String'."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "The basket with the given basket ID is unknown.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/problem+json": {
                "dataTypes.ErrorResponse": {
                  "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/basket-not-found",
                  "title": "Basket Not Found",
                  "detail": "No basket with ID '123' could be found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "$ref": "#/responses/trait:ApiStandards.RateLimited:429"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "dataTypes.CouponItem": "Can not resolve examples/basket/coupon-code-post-request.raml"
              },
              "$ref": "#/definitions/dataTypes.CouponItem"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:CommerceCloudStandards.SiteSpecific:siteId"
          },
          {
            "$ref": "#/parameters/trait:BasketTraits.LocaleSpecific:locale"
          }
        ]
      },
      "parameters": [
        {
          "description": "An identifier for the organization the request is being made by.",
          "type": "string",
          "in": "path",
          "name": "organizationId",
          "required": true
        },
        {
          "minLength": 1,
          "description": "The ID of the basket to be modified.",
          "type": "string",
          "in": "path",
          "name": "basketId",
          "required": true
        }
      ]
    },
    "/organizations/{organizationId}/baskets/{basketId}/coupons/{couponItemId}": {
      "delete": {
        "description": "Removes a coupon from the basket.",
        "operationId": "removeCouponFromBasket",
        "produces": [
          "application/problem+json"
        ],
        "responses": {
          "200": {
            "description": "Success, the response body contains the basket without the deleted coupon.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": {
                "dataTypes.Basket": "Can not resolve examples/basket/basket-post-response.raml"
              }
            },
            "schema": {
              "$ref": "#/definitions/dataTypes.Basket"
            }
          },
          "400": {
            "description": "The customer assigned to the basket does not\nmatch the verified customer represented by the JSON Web Token (JWT).",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/problem+json": {
                "dataTypes.ErrorResponse": {
                  "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/bad-request",
                  "title": "Bad Request",
                  "detail": "The customer is invalid."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Possible reasons:\n- the basket with the given basket ID is unknown.\n- the couponItemId URL parameter does not match any\ncoupon item ID in the basket.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/problem+json": {
                "dataTypes.ErrorResponse": {
                  "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/basket-not-found",
                  "title": "Basket Not Found",
                  "detail": "No basket with ID '123' could be found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "$ref": "#/responses/trait:ApiStandards.RateLimited:429"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:CommerceCloudStandards.SiteSpecific:siteId"
          },
          {
            "$ref": "#/parameters/trait:BasketTraits.LocaleSpecific:locale"
          }
        ]
      },
      "parameters": [
        {
          "minLength": 1,
          "description": "The ID of the coupon item to be removed.",
          "type": "string",
          "in": "path",
          "name": "couponItemId",
          "required": true
        },
        {
          "description": "An identifier for the organization the request is being made by.",
          "type": "string",
          "in": "path",
          "name": "organizationId",
          "required": true
        },
        {
          "minLength": 1,
          "description": "The ID of the basket to be modified.",
          "type": "string",
          "in": "path",
          "name": "basketId",
          "required": true
        }
      ]
    },
    "/organizations/{organizationId}/baskets/{basketId}/customer": {
      "put": {
        "description": "Sets customer information for an existing basket.",
        "operationId": "updateCustomerForBasket",
        "produces": [
          "application/problem+json"
        ],
        "responses": {
          "200": {
            "description": "Success, the response body contains the basket with the added customer information.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": {
                "dataTypes.Basket": "Can not resolve examples/basket/customer-put-response.raml"
              }
            },
            "schema": {
              "$ref": "#/definitions/dataTypes.Basket"
            }
          },
          "400": {
            "description": "Possible reasons:\n- the customer assigned to the basket does not match the verified\ncustomer represented by the JSON Web Token (JWT).\n- the customer cannot be set to the basket because the\nmax number of baskets per customer would be exceeded.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/problem+json": {
                "dataTypes.ErrorResponse": {
                  "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/bad-request",
                  "title": "Bad Request",
                  "detail": "The customer is invalid."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Possible reasons:\n- the customer with the given customer number is unknown.\n- the basket with the given basket ID is unknown.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/problem+json": {
                "dataTypes.ErrorResponse": {
                  "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/basket-not-found",
                  "title": "Basket Not Found",
                  "detail": "No basket with ID '123' could be found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "$ref": "#/responses/trait:ApiStandards.RateLimited:429"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "dataTypes.CustomerInfo": "Can not resolve examples/basket/customer-put-request.raml"
              },
              "$ref": "#/definitions/dataTypes.CustomerInfo"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:CommerceCloudStandards.SiteSpecific:siteId"
          },
          {
            "$ref": "#/parameters/trait:BasketTraits.LocaleSpecific:locale"
          }
        ]
      },
      "parameters": [
        {
          "description": "An identifier for the organization the request is being made by.",
          "type": "string",
          "in": "path",
          "name": "organizationId",
          "required": true
        },
        {
          "minLength": 1,
          "description": "The ID of the basket to be modified.",
          "type": "string",
          "in": "path",
          "name": "basketId",
          "required": true
        }
      ]
    },
    "/organizations/{organizationId}/baskets/{basketId}/gift-certificate-items": {
      "post": {
        "description": "Adds a gift certificate item to an existing basket.",
        "operationId": "addGiftCertificateItemToBasket",
        "produces": [
          "application/problem+json"
        ],
        "responses": {
          "200": {
            "description": "Success, the response body contains the basket with the added gift certificate.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": {
                "Basket": "Can not resolve examples/basket/gift-cert-post-response.raml"
              }
            },
            "schema": {
              "$ref": "#/definitions/dataTypes.Basket"
            }
          },
          "400": {
            "description": "The gift certificate item amount is negative.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/problem+json": {
                "dataTypes.ErrorResponse": {
                  "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/bad-request",
                  "title": "Bad Request",
                  "detail": "Decoding of the property with path '$.failedExample.[1].intProperty' failed because the expected type is 'Integer|Decimal' but the actual type was 'String'."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Possible reasons:\n- the basket with the given basket ID is unknown.\n- the shipment with the given shipment ID is\nunknown.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/problem+json": {
                "dataTypes.ErrorResponse": {
                  "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/basket-not-found",
                  "title": "Basket Not Found",
                  "detail": "No basket with ID '123' could be found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "$ref": "#/responses/trait:ApiStandards.RateLimited:429"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "dataTypes.GiftCertificateItem": "Can not resolve examples/basket/gift-cert-post-request.raml"
              },
              "$ref": "#/definitions/dataTypes.GiftCertificateItem"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:CommerceCloudStandards.SiteSpecific:siteId"
          },
          {
            "$ref": "#/parameters/trait:BasketTraits.LocaleSpecific:locale"
          }
        ]
      },
      "parameters": [
        {
          "description": "An identifier for the organization the request is being made by.",
          "type": "string",
          "in": "path",
          "name": "organizationId",
          "required": true
        },
        {
          "minLength": 1,
          "description": "The ID of the basket to be modified.",
          "type": "string",
          "in": "path",
          "name": "basketId",
          "required": true
        }
      ]
    },
    "/organizations/{organizationId}/baskets/{basketId}/gift-certificate-items/{giftCertificateItemId}": {
      "delete": {
        "description": "Deletes a gift certificate item from an existing basket.",
        "operationId": "removeGiftCertificateItemFromBasket",
        "produces": [
          "application/problem+json"
        ],
        "responses": {
          "200": {
            "description": "Success, the response body contains the basket without the deleted gift certificate.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": {
                "dataTypes.Basket": "Can not resolve examples/basket/basket-post-response.raml"
              }
            },
            "schema": {
              "$ref": "#/definitions/dataTypes.Basket"
            }
          },
          "404": {
            "description": "Possible reasons:\n- the basket with the given basket ID is unknown.\n- the gift certificate item with the given gift certificate item ID is unknown.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/problem+json": {
                "dataTypes.ErrorResponse": {
                  "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/basket-not-found",
                  "title": "Basket Not Found",
                  "detail": "No basket with ID '123' could be found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "$ref": "#/responses/trait:ApiStandards.RateLimited:429"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:CommerceCloudStandards.SiteSpecific:siteId"
          },
          {
            "$ref": "#/parameters/trait:BasketTraits.LocaleSpecific:locale"
          }
        ]
      },
      "patch": {
        "description": "Updates a gift certificate item of an existing basket.",
        "operationId": "updateGiftCertificateItemInBasket",
        "produces": [
          "application/problem+json"
        ],
        "responses": {
          "200": {
            "description": "Success, the response body contains the basket with the updated gift certificate.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": {
                "dataTypes.Basket": "Can not resolve examples/basket/gift-cert-patch-response.raml"
              }
            },
            "schema": {
              "$ref": "#/definitions/dataTypes.Basket"
            }
          },
          "400": {
            "description": "The gift certificate item amount is negative.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/problem+json": {
                "dataTypes.ErrorResponse": {
                  "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/bad-request",
                  "title": "Bad Request",
                  "detail": "Decoding of the property with path '$.failedExample.[1].intProperty' failed because the expected type is 'Integer|Decimal' but the actual type was 'String'."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Possible reasons:\n- the basket with the given basket ID is unknown.\n- the gift certificate item with the given gift certificate item ID is unknown.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/problem+json": {
                "dataTypes.ErrorResponse": {
                  "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/basket-not-found",
                  "title": "Basket Not Found",
                  "detail": "No basket with ID '123' could be found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "$ref": "#/responses/trait:ApiStandards.RateLimited:429"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "dataTypes.GiftCertificateItem": "Can not resolve examples/basket/gift-cert-patch-request.raml"
              },
              "$ref": "#/definitions/dataTypes.GiftCertificateItem"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:CommerceCloudStandards.SiteSpecific:siteId"
          },
          {
            "$ref": "#/parameters/trait:BasketTraits.LocaleSpecific:locale"
          }
        ]
      },
      "parameters": [
        {
          "minLength": 1,
          "description": "the ID of the gift certificate item to be updated.",
          "type": "string",
          "in": "path",
          "name": "giftCertificateItemId",
          "required": true
        },
        {
          "description": "An identifier for the organization the request is being made by.",
          "type": "string",
          "in": "path",
          "name": "organizationId",
          "required": true
        },
        {
          "minLength": 1,
          "description": "The ID of the basket to be modified.",
          "type": "string",
          "in": "path",
          "name": "basketId",
          "required": true
        }
      ]
    },
    "/organizations/{organizationId}/baskets/{basketId}/items": {
      "post": {
        "description": "Adds new items to a basket. The added items are associated with the\nspecified shipment. If no shipment id is specified, the added items are associated with the default shipment.\nConsidered values from the request body, for each item are:\n\n- productId: a valid product ID. This is the ID of the product to be added to the basket. If the\nproduct is already in the basket, the API either increments the quantity of the existing product line item or\ncreates a new product line item, based on the site preference 'Add Product Behavior'. For option products and\nproduct bundles containing variation masters, the API creates a new product line item regardless of the site\npreference.\n- shipmentId: a valid shipment ID (optional). This is the ID of the shipment in which the product item\nis created.\n- quantity: a number between 0.01 and 999. This is the quantity of the product to order.\n- inventoryId: a valid inventory ID (optional). This is the ID of the inventory from which the item is\nallocated.\n- bonusDiscountLineItemId: a valid bonus discount line item ID (optional). This is the ID of the\nbonus discount line item for which the added product is a selected bonus product.\n- optionItems/optionValueId: a valid option value ID. This is an option value for an option item of\nan option product.  This is only possible if the product item is an option\nproduct. To set option values, you must specify a collection of option items in the optionItems\nproperty. These option items must contain optionId and optionValueId. Also,\nthe values you specify must be valid for the option product that this product item represents. Otherwise, the\nserver throws an InvalidProductOptionItemException or an\nInvalidProductOptionValueItemException.\n- custom properties in the form c_<CUSTOM_NAME>: the custom property must correspond to a custom\nattribute (<CUSTOM_NAME>) defined for ProductLineItem. The value of this property must be valid for the\ntype of custom attribute defined for ProductLineItem.",
        "operationId": "addItemToBasket",
        "produces": [
          "application/problem+json"
        ],
        "responses": {
          "200": {
            "description": "Success, the response body contains the basket with the added items.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": {
                "dataTypes.Basket": "Can not resolve examples/basket/item-post-response.raml"
              }
            },
            "schema": {
              "$ref": "#/definitions/dataTypes.Basket"
            }
          },
          "400": {
            "description": "Possible reasons:\n- the given product ID is null or invalid.\n- the product with the given product ID is unknown, offline or\nnot assigned to site catalog or the given product item quantity is null or invalid.\n- a null quantity value.\n- the requested product quantity is not available.\n- the product cannot be added to the basket because of its type.\n- an option with the specified option ID is unknown.\n- an option with the specified option value ID is\nunknown.\n- the maximum allowed number of products added to the basket,\nhas been exceeded.\n- the customer assigned to the basket does not match the verified\ncustomer represented by the JSON Web Token (JWT).\n- the provided bonus discount line item ID is not\npresent in the current basket.\n- the quantity of the product to be added will result in the\nnumber of selected bonus choice products to exceed the amount that the user is permitted to select.\n- the selected bonus product is not an applicable product for\nthe bonus discount line item provided.\nbody:\napplication/problem+json:\n    type: ErrorResponse\n    examples:\n      dataTypes.ErrorResponse: !include exchange_modules/893f605e-10e2-423a-bdb4-f952f56eb6d8/checkout-data-types/1.0.67/examples/error/bad-request-example.raml",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            }
          },
          "404": {
            "description": "Possible reasons:\n- the basket with the given basket ID is unknown.\n- the basket does not contain a shipment with the given shipment ID.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/problem+json": {
                "dataTypes.ErrorResponse": {
                  "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/basket-not-found",
                  "title": "Basket Not Found",
                  "detail": "No basket with ID '123' could be found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "$ref": "#/responses/trait:ApiStandards.RateLimited:429"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "dataTypes.ProductItem": "Can not resolve examples/basket/item-post-request.raml"
              },
              "type": "array",
              "items": {
                "$ref": "#/definitions/dataTypes.ProductItem"
              }
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:CommerceCloudStandards.SiteSpecific:siteId"
          },
          {
            "$ref": "#/parameters/trait:BasketTraits.LocaleSpecific:locale"
          }
        ]
      },
      "parameters": [
        {
          "description": "An identifier for the organization the request is being made by.",
          "type": "string",
          "in": "path",
          "name": "organizationId",
          "required": true
        },
        {
          "minLength": 1,
          "description": "The ID of the basket to be modified.",
          "type": "string",
          "in": "path",
          "name": "basketId",
          "required": true
        }
      ]
    },
    "/organizations/{organizationId}/baskets/{basketId}/items/{itemId}": {
      "delete": {
        "description": "Removes a product item from the basket.",
        "operationId": "removeItemFromBasket",
        "produces": [
          "application/problem+json"
        ],
        "responses": {
          "200": {
            "description": "Success, the response body contains the basket without the deleted item.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": {
                "dataTypes.Basket": "Can not resolve examples/basket/basket-post-response.raml"
              }
            },
            "schema": {
              "$ref": "#/definitions/dataTypes.Basket"
            }
          },
          "400": {
            "description": "The customer assigned to the basket doesn't\nmatch the verified customer represented by the JSON Web Token (JWT).",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/problem+json": {
                "dataTypes.ErrorResponse": {
                  "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/bad-request",
                  "title": "Bad Request",
                  "detail": "The customer is invalid."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "The basket with the given basket ID is unknown.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/problem+json": {
                "dataTypes.ErrorResponse": {
                  "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/basket-not-found",
                  "title": "Basket Not Found",
                  "detail": "No basket with ID '123' could be found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "$ref": "#/responses/trait:ApiStandards.RateLimited:429"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:CommerceCloudStandards.SiteSpecific:siteId"
          },
          {
            "$ref": "#/parameters/trait:BasketTraits.LocaleSpecific:locale"
          }
        ]
      },
      "patch": {
        "description": "Updates an item in a basket. The\nfollowing values in the request body are considered by the server:\n\n- productId: a valid product ID. The purpose of this\nvalue is to exchange a variation of a variation product.\n- shipmentId: a valid shipment ID. The purpose of\nthis value is to move a product item to another shipment.\n- quantity: a number between 0 and 999. The purpose of\nthis value is to change quantity of the product item. If quantity is 0,\nthe product item is removed.\n- optionItems/optionValueId: a valid option value\nID. The purpose of this value is to exchange an option value for an\noption item of an option product.\nThis is only possible if the product item is an option product. To change\noption values a collection of option items to be changed need to be\nprovided in property optionItems. Those\noptionItems need to contain optionId\nand optionValueId. The provided values must be valid\nfor the option product that this product item represents. Otherwise\nInvalidProductOptionItemException or\nInvalidProductOptionValueItemException will be thrown.\ncustom properties c_<CUSTOM_NAME>: a\nvalue corresponding to the type defined for custom attribute\n<CUSTOM_NAME> of ProductLineItem. The purpose of this value is to\nadd or change the value of a custom attribute defined for\nProductLineItem.",
        "operationId": "updateItemInBasket",
        "produces": [
          "application/problem+json"
        ],
        "responses": {
          "200": {
            "description": "Success, the response body contains the basket with the updated item.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": {
                "dataTypes.Basket": "Can not resolve examples/basket/item-patch-response.raml"
              }
            },
            "schema": {
              "$ref": "#/definitions/dataTypes.Basket"
            }
          },
          "400": {
            "description": "Possible reasons:\n- no product item with given item ID was found for the basket.\n- the product with the given product ID in the\nrequest body is invalid.\n- a null quantity value.\n- an option with the specified option id is unknown.\n- an option with the specified option value id is unknown.\n- the given shipment ID is invalid.\n- the customer assigned to the basket does not.\nmatch the verified customer represented by the JWT token.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/problem+json": {
                "dataTypes.ErrorResponse": {
                  "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/bad-request",
                  "title": "Bad Request",
                  "detail": "Decoding of the property with path '$.failedExample.[1].intProperty' failed because the expected type is 'Integer|Decimal' but the actual type was 'String'."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Possible reasons:\n- the basket with the given basket ID is unknown.\n- a shipment with it's given ID is unknown.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/problem+json": {
                "dataTypes.ErrorResponse": {
                  "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/basket-not-found",
                  "title": "Basket Not Found",
                  "detail": "No basket with ID '123' could be found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "$ref": "#/responses/trait:ApiStandards.RateLimited:429"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "dataTypes.ProductItem": "Can not resolve examples/basket/item-patch-request.raml"
              },
              "$ref": "#/definitions/dataTypes.ProductItem"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "default": true,
            "description": "Updating the quantity of the product item can trigger tax recalculation. If the basket's tax mode is internal, the tax is automatically recalculated using tax tables. If the basket's tax mode is external, this query parameter controls tax recalculation as follows:\n- true: (default) The tax values for the product item are set to null and must be recalculated.\n- false: The tax value for the product item will be updated based on the external tax rate (if no tax value was externally computed). Use this setting to prevent an unnecessary external tax call. ",
            "type": "boolean",
            "in": "query",
            "name": "removeExternalTax"
          },
          {
            "$ref": "#/parameters/trait:CommerceCloudStandards.SiteSpecific:siteId"
          },
          {
            "$ref": "#/parameters/trait:BasketTraits.LocaleSpecific:locale"
          }
        ]
      },
      "parameters": [
        {
          "minLength": 1,
          "description": "The ID of the item to be updated.",
          "type": "string",
          "in": "path",
          "name": "itemId",
          "required": true
        },
        {
          "description": "An identifier for the organization the request is being made by.",
          "type": "string",
          "in": "path",
          "name": "organizationId",
          "required": true
        },
        {
          "minLength": 1,
          "description": "The ID of the basket to be modified.",
          "type": "string",
          "in": "path",
          "name": "basketId",
          "required": true
        }
      ]
    },
    "/organizations/{organizationId}/baskets/{basketId}/items/{itemId}/taxes": {
      "put": {
        "description": "This method allows you to apply external taxation data to an existing basket to be able to pass tax rates and optional values for a specific taxable line item. This endpoint can be called only if external taxation mode was used for basket creation. See POST /baskets for more information.",
        "operationId": "addTaxesForBasketItem",
        "produces": [
          "application/problem+json"
        ],
        "responses": {
          "204": {
            "description": "Success, without body.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            }
          },
          "404": {
            "description": "Possible reasons:\n- The basket with the given basket ID is unknown.\n- The item with the given item ID is unknown. ",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/problem+json": {
                "dataTypes.ErrorResponse": {
                  "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/basket-not-found",
                  "title": "Basket Not Found",
                  "detail": "No basket with ID '123' could be found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "Possible Reasons:\n- The tax mode of the referenced basket is not set to EXTERNAL. \n- Salesforce Commerce API Hook Execution is enabled.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/problem+json": {
                "dataTypes.UnsupportedRequest": {
                  "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/unsupported-request-if-scapi-hooks-enabled",
                  "title": "Unsupported Request If SCAPI Hooks Enabled",
                  "detail": "You can't call this endpoint because Salesforce Commerce API hook execution is enabled."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "$ref": "#/responses/trait:ApiStandards.RateLimited:429"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "dataTypes.TaxItems": "Can not resolve examples/basket/basket-item-tax-put-request.raml"
              },
              "$ref": "#/definitions/dataTypes.TaxItems"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:CommerceCloudStandards.SiteSpecific:siteId"
          }
        ]
      },
      "parameters": [
        {
          "description": "An identifier for the organization the request is being made by.",
          "type": "string",
          "in": "path",
          "name": "organizationId",
          "required": true
        },
        {
          "minLength": 1,
          "description": "The ID of the item to be updated.",
          "type": "string",
          "in": "path",
          "name": "itemId",
          "required": true
        },
        {
          "minLength": 1,
          "description": "The ID of the basket to be modified.",
          "type": "string",
          "in": "path",
          "name": "basketId",
          "required": true
        }
      ]
    },
    "/organizations/{organizationId}/baskets/{basketId}/payment-instruments": {
      "post": {
        "description": "Adds a payment instrument to a basket.",
        "operationId": "addPaymentInstrumentToBasket",
        "produces": [
          "application/problem+json"
        ],
        "responses": {
          "200": {
            "description": "Success, the response body contains the basket with the added payment instrument.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": {
                "dataTypes.Basket": "Can not resolve examples/basket/payment-instrument-post-response.raml"
              }
            },
            "schema": {
              "$ref": "#/definitions/dataTypes.Basket"
            }
          },
          "400": {
            "description": "Possible reasons:\n- the provided payment method is invalid or not applicable.\n- the customer assigned to the basket does not match the verified\ncustomer represented by the JSON Web Token (JWT).",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/problem+json": {
                "dataTypes.ErrorResponse": {
                  "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/bad-request",
                  "title": "Bad Request",
                  "detail": "Decoding of the property with path '$.failedExample.[1].intProperty' failed because the expected type is 'Integer|Decimal' but the actual type was 'String'."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "The basket with the given basket ID is unknown.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/problem+json": {
                "dataTypes.ErrorResponse": {
                  "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/basket-not-found",
                  "title": "Basket Not Found",
                  "detail": "No basket with ID '123' could be found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "$ref": "#/responses/trait:ApiStandards.RateLimited:429"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "dataTypes.BasketPaymentInstrumentRequest": "Can not resolve examples/basket/payment-instrument-post-request.raml"
              },
              "$ref": "#/definitions/dataTypes.BasketPaymentInstrumentRequest"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:CommerceCloudStandards.SiteSpecific:siteId"
          },
          {
            "$ref": "#/parameters/trait:BasketTraits.LocaleSpecific:locale"
          }
        ]
      },
      "parameters": [
        {
          "description": "An identifier for the organization the request is being made by.",
          "type": "string",
          "in": "path",
          "name": "organizationId",
          "required": true
        },
        {
          "minLength": 1,
          "description": "The ID of the basket to be modified.",
          "type": "string",
          "in": "path",
          "name": "basketId",
          "required": true
        }
      ]
    },
    "/organizations/{organizationId}/baskets/{basketId}/payment-instruments/{paymentInstrumentId}": {
      "delete": {
        "description": "Removes a payment instrument of a basket.",
        "operationId": "removePaymentInstrumentFromBasket",
        "produces": [
          "application/problem+json"
        ],
        "responses": {
          "200": {
            "description": "Success, the response body contains the basket without the deleted payment instrument.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": {
                "dataTypes.Basket": "Can not resolve examples/basket/basket-post-response.raml"
              }
            },
            "schema": {
              "$ref": "#/definitions/dataTypes.Basket"
            }
          },
          "400": {
            "description": "The customer assigned to the basket does not match the verified\ncustomer represented by the JSON Web Token (JWT).",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/problem+json": {
                "dataTypes.ErrorResponse": {
                  "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/bad-request",
                  "title": "Bad Request",
                  "detail": "The customer is invalid."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Possible reasons:\n- the basket with the given basket ID is unknown.\n- the payment instrument with the given basket payment\ninstrument ID is unknown.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/problem+json": {
                "dataTypes.ErrorResponse": {
                  "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/basket-not-found",
                  "title": "Basket Not Found",
                  "detail": "No basket with ID '123' could be found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "$ref": "#/responses/trait:ApiStandards.RateLimited:429"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:CommerceCloudStandards.SiteSpecific:siteId"
          },
          {
            "$ref": "#/parameters/trait:BasketTraits.LocaleSpecific:locale"
          }
        ]
      },
      "patch": {
        "description": "Updates payment instrument of an existing basket.",
        "operationId": "updatePaymentInstrumentInBasket",
        "produces": [
          "application/problem+json"
        ],
        "responses": {
          "200": {
            "description": "Success, the response body contains the basket with the updated payment instrument.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": {
                "dataTypes.Basket": "Can not resolve examples/basket/payment-instrument-patch-response.raml"
              }
            },
            "schema": {
              "$ref": "#/definitions/dataTypes.Basket"
            }
          },
          "400": {
            "description": "Possible reasons:\n- the provided payment method is invalid or not applicable.\n- the basket payment intsrument with the given id is already permanently masked.\n- The customer assigned to the basket does not match the\nverified customer represented by the JSON Web Token (JWT).",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": {
                "dataTypes.ErrorResponse": {
                  "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/bad-request",
                  "title": "Bad Request",
                  "detail": "Decoding of the property with path '$.failedExample.[1].intProperty' failed because the expected type is 'Integer|Decimal' but the actual type was 'String'."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Possible reasons:\n- the basket with the given basket ID is unknown.\n- the payment instrument item with the given payment instrument ID is unknown.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/problem+json": {
                "dataTypes.ErrorResponse": {
                  "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/basket-not-found",
                  "title": "Basket Not Found",
                  "detail": "No basket with ID '123' could be found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "$ref": "#/responses/trait:ApiStandards.RateLimited:429"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "dataTypes.OrderPaymentInstrument": "Can not resolve examples/basket/payment-instrument-patch-request.raml"
              },
              "$ref": "#/definitions/dataTypes.OrderPaymentInstrument"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "default": true,
            "description": "Updating the payment instrument can trigger tax recalculation. If the basket's tax mode is internal, the tax is automatically recalculated using tax tables. If the basket's tax mode is external, this query parameter controls tax recalculation as follows:\n- true: (default) The basket's tax values are set to null and must be recalculated.\n- false: The basket's tax values don't change. Use this setting to prevent an unnecessary external tax call when the payment instrument change doesn't affect the tax calculation. ",
            "type": "boolean",
            "in": "query",
            "name": "removeExternalTax"
          },
          {
            "$ref": "#/parameters/trait:CommerceCloudStandards.SiteSpecific:siteId"
          },
          {
            "$ref": "#/parameters/trait:BasketTraits.LocaleSpecific:locale"
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "paymentInstrumentId",
          "required": true
        },
        {
          "description": "An identifier for the organization the request is being made by.",
          "type": "string",
          "in": "path",
          "name": "organizationId",
          "required": true
        },
        {
          "minLength": 1,
          "description": "The ID of the basket to be modified.",
          "type": "string",
          "in": "path",
          "name": "basketId",
          "required": true
        }
      ]
    },
    "/organizations/{organizationId}/baskets/{basketId}/payment-methods": {
      "get": {
        "description": "Gets applicable payment methods for an existing basket considering the open payment amount only.",
        "operationId": "getPaymentMethodsForBasket",
        "produces": [
          "application/problem+json"
        ],
        "responses": {
          "200": {
            "description": "Success, the response body contains the applicable payment methods for the basket.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": {
                "dataTypes.PaymentMethodResult": "Can not resolve examples/basket/payment-methods-get-response.raml"
              }
            },
            "schema": {
              "$ref": "#/definitions/dataTypes.PaymentMethodResult"
            }
          },
          "400": {
            "description": "The customer assigned to the basket does not match the\nverified customer represented by the JSON Web Token (JWT).",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/problem+json": {
                "dataTypes.ErrorResponse": {
                  "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/bad-request",
                  "title": "Bad Request",
                  "detail": "The customer is invalid."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "The basket with the given basket ID is unknown.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/problem+json": {
                "dataTypes.ErrorResponse": {
                  "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/basket-not-found",
                  "title": "Basket Not Found",
                  "detail": "No basket with ID '123' could be found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "$ref": "#/responses/trait:ApiStandards.RateLimited:429"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:CommerceCloudStandards.SiteSpecific:siteId"
          },
          {
            "$ref": "#/parameters/trait:BasketTraits.LocaleSpecific:locale"
          }
        ]
      },
      "parameters": [
        {
          "description": "An identifier for the organization the request is being made by.",
          "type": "string",
          "in": "path",
          "name": "organizationId",
          "required": true
        },
        {
          "minLength": 1,
          "description": "The ID of the basket to be modified.",
          "type": "string",
          "in": "path",
          "name": "basketId",
          "required": true
        }
      ]
    },
    "/organizations/{organizationId}/baskets/{basketId}/price-adjustments": {
      "post": {
        "description": "Adds a custom manual price adjustment to the basket.",
        "operationId": "addPriceAdjustmentToBasket",
        "produces": [
          "application/problem+json"
        ],
        "responses": {
          "200": {
            "description": "Success, the response body contains the basket with added price adjustment.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": {
                "dataTypes.Basket": "Can not resolve examples/basket/price-adjustment-post-response.raml"
              }
            },
            "schema": {
              "$ref": "#/definitions/dataTypes.Basket"
            }
          },
          "400": {
            "description": "Possible reasons:\n- a fixed price adjustment was already created for the given level.\n- a fixed price adjustment was added at `order` level.\n- a promotion ID was used twice.\n- a system promotion ID was used as a manual promotion ID.\n- more than one hundred price adjustments would have been created.\n- the price adjustment limit had exceeded.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/problem+json": {
                "dataTypes.ErrorResponse": {
                  "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/bad-request",
                  "title": "Bad Request",
                  "detail": "The customer is invalid."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "The basket with the given basket ID is unknown.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/problem+json": {
                "dataTypes.ErrorResponse": {
                  "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/basket-not-found",
                  "title": "Basket Not Found",
                  "detail": "No basket with ID '123' could be found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "$ref": "#/responses/trait:ApiStandards.RateLimited:429"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "dataTypes.PriceAdjustmentRequest": "Can not resolve examples/basket/price-adjustment-post-request.raml"
              },
              "$ref": "#/definitions/dataTypes.PriceAdjustmentRequest"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:CommerceCloudStandards.SiteSpecific:siteId"
          },
          {
            "$ref": "#/parameters/trait:BasketTraits.LocaleSpecific:locale"
          }
        ]
      },
      "parameters": [
        {
          "description": "An identifier for the organization the request is being made by.",
          "type": "string",
          "in": "path",
          "name": "organizationId",
          "required": true
        },
        {
          "minLength": 1,
          "description": "The ID of the basket to be modified.",
          "type": "string",
          "in": "path",
          "name": "basketId",
          "required": true
        }
      ]
    },
    "/organizations/{organizationId}/baskets/{basketId}/price-adjustments/{priceAdjustmentId}": {
      "delete": {
        "description": "Removes a custom manual price adjustment from the basket.",
        "operationId": "removePriceAdjustmentFromBasket",
        "produces": [
          "application/problem+json"
        ],
        "responses": {
          "200": {
            "description": "Success, the response body contains the basket without the deleted price adjustment.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": {
                "dataTypes.Basket": "Can not resolve examples/basket/basket-post-response.raml"
              }
            },
            "schema": {
              "$ref": "#/definitions/dataTypes.Basket"
            }
          },
          "400": {
            "description": "The priceAdjustmentId is missing, empty or whitespace.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/problem+json": {
                "dataTypes.ErrorResponse": {
                  "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/bad-request",
                  "title": "Bad Request",
                  "detail": "The customer is invalid."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "The basket with the given basket ID is unknown.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/problem+json": {
                "dataTypes.ErrorResponse": {
                  "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/basket-not-found",
                  "title": "Basket Not Found",
                  "detail": "No basket with ID '123' could be found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "$ref": "#/responses/trait:ApiStandards.RateLimited:429"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:CommerceCloudStandards.SiteSpecific:siteId"
          },
          {
            "$ref": "#/parameters/trait:BasketTraits.LocaleSpecific:locale"
          }
        ]
      },
      "patch": {
        "description": "Updates a custom manual price adjustment on the basket. Only the following path values are considered for the update; all other attributes are ignored.\n- `discount` \n- `itemText`\n- `reasonCode`\n- `custom properties` \nThe discount `type` of a price adjustment cannot be updated and therefore, the value of the existing type must be passed. For an adjustment of type `percentage`, the `percentage` attribute is mandatory. For adjustments of type `amount` and `fixed_price`, the `amount` attribute is mandatory.",
        "operationId": "updatePriceAdjustmentInBasket",
        "produces": [
          "application/problem+json"
        ],
        "responses": {
          "200": {
            "description": "Success, the response body contains the basket with the updated price adjustment.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": {
                "dataTypes.Basket": "Can not resolve examples/basket/price-adjustment-patch-response.raml"
              }
            },
            "schema": {
              "$ref": "#/definitions/dataTypes.Basket"
            }
          },
          "400": {
            "description": "Possible reasons:\n- the price adjustment is not manual and cannot be updated.\n- the expected attributes are missing in the input.\n- the type of a price adjustment does not match the adjustment type of the input data.\n- the price adjustment limit is exceeded.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/problem+json": {
                "dataTypes.ErrorResponse": {
                  "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/bad-request",
                  "title": "Bad Request",
                  "detail": "Decoding of the property with path '$.failedExample.[1].intProperty' failed because the expected type is 'Integer|Decimal' but the actual type was 'String'."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "The price adjustment ID is not found.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/problem+json": {
                "dataTypes.ErrorResponse": "Can not resolve examples/error/price-adjustment-id-not-found-exception.raml"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "$ref": "#/responses/trait:ApiStandards.RateLimited:429"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "dataTypes.PriceAdjustment": "Can not resolve examples/basket/price-adjustment-patch-request.raml"
              },
              "$ref": "#/definitions/dataTypes.PriceAdjustment"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:CommerceCloudStandards.SiteSpecific:siteId"
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "priceAdjustmentId",
          "required": true
        },
        {
          "description": "An identifier for the organization the request is being made by.",
          "type": "string",
          "in": "path",
          "name": "organizationId",
          "required": true
        },
        {
          "minLength": 1,
          "description": "The ID of the basket to be modified.",
          "type": "string",
          "in": "path",
          "name": "basketId",
          "required": true
        }
      ]
    },
    "/organizations/{organizationId}/baskets/{basketId}/price-books": {
      "get": {
        "description": "Gets applicable price books for an existing basket.",
        "operationId": "getPriceBooksForBasket",
        "produces": [
          "application/problem+json"
        ],
        "responses": {
          "200": {
            "description": "Success, the response body contains the priceBookIds for the basket.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": {
                "dataTypes.PriceBookIds": "Can not resolve examples/basket/price-books.raml"
              }
            },
            "schema": {
              "$ref": "#/definitions/dataTypes.PriceBookIds"
            }
          },
          "404": {
            "description": "The basket with the given basket ID is unknown.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/problem+json": {
                "dataTypes.ErrorResponse": {
                  "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/basket-not-found",
                  "title": "Basket Not Found",
                  "detail": "No basket with ID '123' could be found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "$ref": "#/responses/trait:ApiStandards.RateLimited:429"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:CommerceCloudStandards.SiteSpecific:siteId"
          }
        ]
      },
      "put": {
        "description": "This method allows you to put an array of priceBookIds to an existing basket, which will be used for basket calculation.",
        "operationId": "addPriceBooksToBasket",
        "produces": [
          "application/problem+json"
        ],
        "responses": {
          "204": {
            "description": "Success, without body.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            }
          },
          "404": {
            "description": "The basket with the given basket ID is unknown or contains a price book ID that does not correspond to an existing price book.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/problem+json": {
                "dataTypes.ErrorResponse": {
                  "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/basket-not-found",
                  "title": "Basket Not Found",
                  "detail": "No basket with ID '123' could be found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "$ref": "#/responses/trait:ApiStandards.RateLimited:429"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "dataTypes.PriceBookIds": "Can not resolve examples/basket/price-books.raml"
              },
              "$ref": "#/definitions/dataTypes.PriceBookIds"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:CommerceCloudStandards.SiteSpecific:siteId"
          }
        ]
      },
      "parameters": [
        {
          "description": "An identifier for the organization the request is being made by.",
          "type": "string",
          "in": "path",
          "name": "organizationId",
          "required": true
        },
        {
          "minLength": 1,
          "description": "The ID of the basket to be modified.",
          "type": "string",
          "in": "path",
          "name": "basketId",
          "required": true
        }
      ]
    },
    "/organizations/{organizationId}/baskets/{basketId}/shipments": {
      "post": {
        "description": "Creates a new shipment for a basket.\n\nThe created shipment is initialized with values provided in the body\ndocument and can be updated with further data API calls. Considered from\nthe body are the following properties if specified:\n\n- the ID\n- the shipping address\n- the shipping method\n- gift boolean flag\n- gift message\n- custom properties",
        "operationId": "createShipmentForBasket",
        "produces": [
          "application/problem+json"
        ],
        "responses": {
          "200": {
            "description": "Success, the response body contains the basket with added shipment.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": {
                "dataTypes.Basket": "Can not resolve examples/basket/shipments-post-response.raml"
              }
            },
            "schema": {
              "$ref": "#/definitions/dataTypes.Basket"
            }
          },
          "400": {
            "description": "Possible reasons:\n- a shipment id is not provided.\n- a shipment with the provided ID already.\nexists for the basket.\n- a shipment with the provided shipment number\nalready exists for the basket.\n- a shipping method with an ID was specified\nwhich is not a valid shipping method ID.\n- the customer assigned to the basket does not match the\nverified customer represented by the JSON Web Token (JWT).",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/problem+json": {
                "dataTypes.ErrorResponse": {
                  "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/bad-request",
                  "title": "Bad Request",
                  "detail": "Decoding of the property with path '$.failedExample.[1].intProperty' failed because the expected type is 'Integer|Decimal' but the actual type was 'String'."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "The basket with the given basket ID is\nunknown.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/problem+json": {
                "dataTypes.ErrorResponse": {
                  "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/basket-not-found",
                  "title": "Basket Not Found",
                  "detail": "No basket with ID '123' could be found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "$ref": "#/responses/trait:ApiStandards.RateLimited:429"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "dataTypes.Shipment": "Can not resolve examples/basket/shipments-post-request.raml"
              },
              "$ref": "#/definitions/dataTypes.Shipment"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:CommerceCloudStandards.SiteSpecific:siteId"
          },
          {
            "$ref": "#/parameters/trait:BasketTraits.LocaleSpecific:locale"
          }
        ]
      },
      "parameters": [
        {
          "description": "An identifier for the organization the request is being made by.",
          "type": "string",
          "in": "path",
          "name": "organizationId",
          "required": true
        },
        {
          "minLength": 1,
          "description": "The ID of the basket to be modified.",
          "type": "string",
          "in": "path",
          "name": "basketId",
          "required": true
        }
      ]
    },
    "/organizations/{organizationId}/baskets/{basketId}/shipments/{shipmentId}": {
      "delete": {
        "description": "Removes a specified shipment and all associated product, gift certificate,\nshipping, and price adjustment line items from a basket.\nIt is not allowed to remove the default shipment.",
        "operationId": "removeShipmentFromBasket",
        "produces": [
          "application/problem+json"
        ],
        "responses": {
          "200": {
            "description": "Success, the response body contains the basket without the deleted shipment.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": {
                "dataTypes.Basket": "Can not resolve examples/basket/basket-post-response.raml"
              }
            },
            "schema": {
              "$ref": "#/definitions/dataTypes.Basket"
            }
          },
          "400": {
            "description": "Possible reasons:\n- the given shipment ID is invalid.\n- the customer assigned to the basket does not match the\nverified customer represented by the JSON Web Token (JWT).",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/problem+json": {
                "dataTypes.ErrorResponse": {
                  "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/bad-request",
                  "title": "Bad Request",
                  "detail": "The customer is invalid."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "The given shipment ID corresponds to the\ndefault shipment and cannot be removed.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/problem+json": {
                "dataTypes.ErrorResponse": {
                  "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/forbidden",
                  "title": "Forbidden",
                  "detail": "The shipment with ID 'me' corresponds to the default shipment and can't be deleted."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "The basket with the given basket ID is\nunknown.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/problem+json": {
                "dataTypes.ErrorResponse": {
                  "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/basket-not-found",
                  "title": "Basket Not Found",
                  "detail": "No basket with ID '123' could be found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "$ref": "#/responses/trait:ApiStandards.RateLimited:429"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:CommerceCloudStandards.SiteSpecific:siteId"
          },
          {
            "$ref": "#/parameters/trait:BasketTraits.LocaleSpecific:locale"
          }
        ]
      },
      "patch": {
        "description": "Updates a shipment for a basket.\n\nThe shipment is initialized with values provided in the body\ndocument and can be updated with further data API calls. Considered from\nthe body are the following properties if specified:\n- the ID\n- the shipping address\n- the shipping method\n- gift boolean flag\n- gift message\n- custom properties",
        "operationId": "updateShipmentForBasket",
        "produces": [
          "application/problem+json"
        ],
        "responses": {
          "200": {
            "description": "Success, the response body contains the basket with the updated shipment.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": {
                "dataTypes.Basket": "Can not resolve examples/basket/shipments-patch-response.raml"
              }
            },
            "schema": {
              "$ref": "#/definitions/dataTypes.Basket"
            }
          },
          "400": {
            "description": "Possible reasons:\n- the given shipment ID was invalid.\n- a shipment with the provided ID already\nexists for the basket.\n- a shipment with the provided shipment number\nalready exists for the basket.\n- a missing shipping method.\n- an invalid shipping method.\n- the customer assigned to the basket does not match the\nverified customer represented by the JSON Web Token (JWT).",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/problem+json": {
                "dataTypes.ErrorResponse": {
                  "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/bad-request",
                  "title": "Bad Request",
                  "detail": "Decoding of the property with path '$.failedExample.[1].intProperty' failed because the expected type is 'Integer|Decimal' but the actual type was 'String'."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "The basket with the given basket ID is unknown.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/problem+json": {
                "dataTypes.ErrorResponse": {
                  "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/basket-not-found",
                  "title": "Basket Not Found",
                  "detail": "No basket with ID '123' could be found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "$ref": "#/responses/trait:ApiStandards.RateLimited:429"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "dataTypes.Shipment": "Can not resolve examples/basket/shipments-patch-request.raml"
              },
              "$ref": "#/definitions/dataTypes.Shipment"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:CommerceCloudStandards.SiteSpecific:siteId"
          },
          {
            "$ref": "#/parameters/trait:BasketTraits.LocaleSpecific:locale"
          }
        ]
      },
      "parameters": [
        {
          "minLength": 1,
          "description": "The ID of the shipment to be modified.",
          "type": "string",
          "in": "path",
          "name": "shipmentId",
          "required": true
        },
        {
          "description": "An identifier for the organization the request is being made by.",
          "type": "string",
          "in": "path",
          "name": "organizationId",
          "required": true
        },
        {
          "minLength": 1,
          "description": "The ID of the basket to be modified.",
          "type": "string",
          "in": "path",
          "name": "basketId",
          "required": true
        }
      ]
    },
    "/organizations/{organizationId}/baskets/{basketId}/shipments/{shipmentId}/shipping-address": {
      "put": {
        "description": "Sets a shipping address of a specific shipment of a basket.",
        "operationId": "updateShippingAddressForShipment",
        "produces": [
          "application/problem+json"
        ],
        "responses": {
          "200": {
            "description": "Success, the response body contains the basket with the added shipping address.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": {
                "dataTypes.Basket": "Can not resolve examples/basket/shipments-address-put-response.raml"
              }
            },
            "schema": {
              "$ref": "#/definitions/dataTypes.Basket"
            }
          },
          "400": {
            "description": "Possible reasons:\n- the shipment with the given shipment ID is unknown.\n- the customer assigned to the basket does not\nmatch the verified customer represented by the JSON Web Token (JWT).",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": {
                "dataTypes.ErrorResponse": {
                  "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/bad-request",
                  "title": "Bad Request",
                  "detail": "Decoding of the property with path '$.failedExample.[1].intProperty' failed because the expected type is 'Integer|Decimal' but the actual type was 'String'."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "The basket with the given basket ID is unknown.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": {
                "dataTypes.ErrorResponse": {
                  "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/basket-not-found",
                  "title": "Basket Not Found",
                  "detail": "No basket with ID '123' could be found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "$ref": "#/responses/trait:ApiStandards.RateLimited:429"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "dataTypes.OrderAddress": "Can not resolve examples/basket/shipments-address-put-request.raml"
              },
              "$ref": "#/definitions/dataTypes.OrderAddress"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "type": "boolean",
            "in": "query",
            "name": "useAsBilling"
          },
          {
            "default": true,
            "description": "Updating the shipping/billing address can trigger tax recalculation. If the basket's tax mode is internal, the tax is automatically recalculated using tax tables. If the basket's tax mode is external, this query parameter controls tax recalculation as follows:\n- true: (default) The basket's tax values are set to null and must be recalculated.\n- false: The basket's tax values don't change. Use this setting to prevent an unnecessary external tax call when the shipping/billing address change doesn't affect the tax calculation. ",
            "type": "boolean",
            "in": "query",
            "name": "removeExternalTax"
          },
          {
            "$ref": "#/parameters/trait:CommerceCloudStandards.SiteSpecific:siteId"
          },
          {
            "$ref": "#/parameters/trait:BasketTraits.LocaleSpecific:locale"
          }
        ]
      },
      "parameters": [
        {
          "description": "An identifier for the organization the request is being made by.",
          "type": "string",
          "in": "path",
          "name": "organizationId",
          "required": true
        },
        {
          "minLength": 1,
          "description": "The ID of the shipment to be modified.",
          "type": "string",
          "in": "path",
          "name": "shipmentId",
          "required": true
        },
        {
          "minLength": 1,
          "description": "The ID of the basket to be modified.",
          "type": "string",
          "in": "path",
          "name": "basketId",
          "required": true
        }
      ]
    },
    "/organizations/{organizationId}/baskets/{basketId}/shipments/{shipmentId}/shipping-method": {
      "put": {
        "description": "Sets a shipping method to a specific shipment of a basket.",
        "operationId": "updateShippingMethodForShipment",
        "produces": [
          "application/problem+json"
        ],
        "responses": {
          "200": {
            "description": "Success, the response body contains the basket with the added shipping method.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": {
                "dataTypes.Basket": "Can not resolve examples/basket/shipments-method-put-response.raml"
              }
            },
            "schema": {
              "$ref": "#/definitions/dataTypes.Basket"
            }
          },
          "400": {
            "description": "Possible reasons:\n- the id of the shipping method is missing.\n- a shipping method with an ID was specified\nwhich is not a valid shipping method ID.\n- the customer assigned to the basket does not match the\nverified customer represented by the JSON Web Token (JWT).",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": {
                "dataTypes.ErrorResponse": {
                  "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/bad-request",
                  "title": "Bad Request",
                  "detail": "Decoding of the property with path '$.failedExample.[1].intProperty' failed because the expected type is 'Integer|Decimal' but the actual type was 'String'."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "The basket with the given basket ID is unknown.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": {
                "dataTypes.ErrorResponse": {
                  "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/basket-not-found",
                  "title": "Basket Not Found",
                  "detail": "No basket with ID '123' could be found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "$ref": "#/responses/trait:ApiStandards.RateLimited:429"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "dataTypes.ShippingMethod": "Can not resolve examples/basket/shipments-method-put-request.raml"
              },
              "$ref": "#/definitions/dataTypes.ShippingMethod"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:CommerceCloudStandards.SiteSpecific:siteId"
          },
          {
            "$ref": "#/parameters/trait:BasketTraits.LocaleSpecific:locale"
          }
        ]
      },
      "parameters": [
        {
          "description": "An identifier for the organization the request is being made by.",
          "type": "string",
          "in": "path",
          "name": "organizationId",
          "required": true
        },
        {
          "minLength": 1,
          "description": "The ID of the shipment to be modified.",
          "type": "string",
          "in": "path",
          "name": "shipmentId",
          "required": true
        },
        {
          "minLength": 1,
          "description": "The ID of the basket to be modified.",
          "type": "string",
          "in": "path",
          "name": "basketId",
          "required": true
        }
      ]
    },
    "/organizations/{organizationId}/baskets/{basketId}/shipments/{shipmentId}/shipping-methods": {
      "get": {
        "description": "Gets the applicable shipping methods for a certain shipment of a basket.",
        "operationId": "getShippingMethodsForShipment",
        "produces": [
          "application/problem+json"
        ],
        "responses": {
          "200": {
            "description": "Success, the response body contains the applicable shipping methods for a certain shipment of the basket.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": {
                "dataTypes.ShippingMethodResult": "Can not resolve examples/basket/shipments-method-get-response.raml"
              }
            },
            "schema": {
              "$ref": "#/definitions/dataTypes.ShippingMethodResult"
            }
          },
          "400": {
            "description": "The customer assigned to the basket does not match the\nverified customer represented by the JSON Web Token (JWT).",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": {
                "dataTypes.ErrorResponse": {
                  "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/bad-request",
                  "title": "Bad Request",
                  "detail": "The customer is invalid."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Possible reasons:\n- The basket with the given basket ID is unknown.\n- The shipment with the given shipment ID is unknown.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": {
                "dataTypes.ErrorResponse": {
                  "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/basket-not-found",
                  "title": "Basket Not Found",
                  "detail": "No basket with ID '123' could be found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "$ref": "#/responses/trait:ApiStandards.RateLimited:429"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:CommerceCloudStandards.SiteSpecific:siteId"
          },
          {
            "$ref": "#/parameters/trait:BasketTraits.LocaleSpecific:locale"
          }
        ]
      },
      "parameters": [
        {
          "description": "An identifier for the organization the request is being made by.",
          "type": "string",
          "in": "path",
          "name": "organizationId",
          "required": true
        },
        {
          "minLength": 1,
          "description": "The ID of the shipment to be modified.",
          "type": "string",
          "in": "path",
          "name": "shipmentId",
          "required": true
        },
        {
          "minLength": 1,
          "description": "The ID of the basket to be modified.",
          "type": "string",
          "in": "path",
          "name": "basketId",
          "required": true
        }
      ]
    },
    "/organizations/{organizationId}/baskets/{basketId}/storefront": {
      "put": {
        "description": "Marks a basket as a storefront basket.",
        "operationId": "updateAsStorefrontBasket",
        "produces": [
          "application/problem+json"
        ],
        "responses": {
          "200": {
            "description": "Success, the response body contains a basket that is set as a storefront basket.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": {
                "dataTypes.Basket": "Can not resolve examples/basket/basket-put-storefront-response.raml"
              }
            },
            "schema": {
              "$ref": "#/definitions/dataTypes.Basket"
            }
          },
          "400": {
            "description": "Thrown if a storefront basket already exists and the query parameter `exchange` is false.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/problem+json": {
                "datatypes.ErrorResponse": "Can not resolve examples/error/customer-basket-quota-exceeded-exception.raml"
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "The basket with the given basket ID is unknown.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/problem+json": {
                "dataTypes.ErrorResponse": {
                  "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/basket-not-found",
                  "title": "Basket Not Found",
                  "detail": "No basket with ID '123' could be found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "$ref": "#/responses/trait:ApiStandards.RateLimited:429"
          }
        },
        "parameters": [
          {
            "description": "If true, an existing storefront basket is exchanged and marked as an agent basket. If false, a `CustomerBasketsQuotaExceededException` is thrown.",
            "type": "boolean",
            "in": "query",
            "name": "exchange"
          },
          {
            "$ref": "#/parameters/trait:CommerceCloudStandards.SiteSpecific:siteId"
          },
          {
            "$ref": "#/parameters/trait:BasketTraits.LocaleSpecific:locale"
          }
        ]
      },
      "parameters": [
        {
          "description": "An identifier for the organization the request is being made by.",
          "type": "string",
          "in": "path",
          "name": "organizationId",
          "required": true
        },
        {
          "minLength": 1,
          "description": "The ID of the basket to be modified.",
          "type": "string",
          "in": "path",
          "name": "basketId",
          "required": true
        }
      ]
    },
    "/organizations/{organizationId}/baskets/{basketId}/taxes": {
      "get": {
        "description": "This method gives you the external taxation data set by the PUT taxes API. This endpoint can be called only if external taxation mode was used for basket creation. See POST /baskets for more information.",
        "operationId": "getTaxesFromBasket",
        "produces": [
          "application/problem+json"
        ],
        "responses": {
          "200": {
            "description": "Success, the response body contains the external taxation from all line items from the referenced basket.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": {
                "dataTypes.Taxes": "Can not resolve examples/basket/basket-tax-get-response.raml"
              }
            },
            "schema": {
              "$ref": "#/definitions/dataTypes.Taxes"
            }
          },
          "404": {
            "description": "The basket with the given basket ID is unknown.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": {
                "dataTypes.ErrorResponse": {
                  "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/basket-not-found",
                  "title": "Basket Not Found",
                  "detail": "No basket with ID '123' could be found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "Possible Reasons:\n- The tax mode of the referenced basket is not set to EXTERNAL. \n- Salesforce Commerce API Hook Execution is enabled.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/json": {
                "dataTypes.InvalidTaxMode": {
                  "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/invalid-tax-mode",
                  "title": "Invalid Tax Mode",
                  "detail": "Basket with ID 'a10ff320829cb0eef93ca5310a' has invalid tax mode."
                },
                "dataTypes.UnsupportedRequest": {
                  "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/unsupported-request-if-scapi-hooks-enabled",
                  "title": "Unsupported Request If SCAPI Hooks Enabled",
                  "detail": "You can't call this endpoint because Salesforce Commerce API hook execution is enabled."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "$ref": "#/responses/trait:ApiStandards.RateLimited:429"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/trait:CommerceCloudStandards.SiteSpecific:siteId"
          }
        ]
      },
      "put": {
        "description": "This method allows you to apply external taxation data to an existing basket to be able to pass tax rates and optional values for all taxable line items. This endpoint can be called only if external taxation mode was used for basket creation. See POST /baskets for more information.",
        "operationId": "addTaxesForBasket",
        "produces": [
          "application/problem+json"
        ],
        "responses": {
          "204": {
            "description": "Success, without body.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            }
          },
          "404": {
            "description": "The basket with the given basket ID is unknown.",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/problem+json": {
                "dataTypes.ErrorResponse": {
                  "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/basket-not-found",
                  "title": "Basket Not Found",
                  "detail": "No basket with ID '123' could be found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "Possible Reasons:\n- The tax mode of the referenced basket is not set to EXTERNAL.\n- Salesforce Commerce API Hook Execution is enabled. ",
            "headers": {
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests permitted per minute.",
                "type": "string"
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "type": "string"
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "type": "string"
              }
            },
            "examples": {
              "application/problem+json": {
                "dataTypes.UnsupportedRequest": {
                  "type": "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/unsupported-request-if-scapi-hooks-enabled",
                  "title": "Unsupported Request If SCAPI Hooks Enabled",
                  "detail": "You can't call this endpoint because Salesforce Commerce API hook execution is enabled."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "$ref": "#/responses/trait:ApiStandards.RateLimited:429"
          }
        },
        "parameters": [
          {
            "schema": {
              "example": {
                "dataTypes.Taxes": "Can not resolve examples/basket/basket-tax-put-request.raml"
              },
              "$ref": "#/definitions/dataTypes.Taxes"
            },
            "in": "body",
            "name": "body",
            "required": true
          },
          {
            "$ref": "#/parameters/trait:CommerceCloudStandards.SiteSpecific:siteId"
          }
        ]
      },
      "parameters": [
        {
          "description": "An identifier for the organization the request is being made by.",
          "type": "string",
          "in": "path",
          "name": "organizationId",
          "required": true
        },
        {
          "minLength": 1,
          "description": "The ID of the basket to be modified.",
          "type": "string",
          "in": "path",
          "name": "basketId",
          "required": true
        }
      ]
    }
  }
}